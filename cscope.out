cscope 15 $HOME/sorgenti/ELETTRONICA/ArdhatMFC -q 0000004175 0000573885
	@Alarms.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"ty≥s.h
"

5 
	~"Mu…iWii.h
"

6 
	~"LCD.h
"

7 
	~"Sís‹s.h
"

8 
	~"Aœrms.h
"

10 
Æ¨mP©ã∫Compo£r
();

11 
∑âînDecode
(
uöt8_t
 
ªsour˚
,
uöt16_t
 
fú°
,uöt16_à
£c⁄d
,uöt16_à
thúd
,uöt16_à
cy˛ïau£
, uöt16_à
íd∑u£
);

12 
£tTimög
(
uöt8_t
 
ªsour˚
, 
uöt16_t
 
pul£
, uöt16_à
∑u£
);

13 
tu∫Off
(
uöt8_t
 
ªsour˚
);

14 
toggÀResour˚
(
uöt8_t
 
ªsour˚
, uöt8_à
a˘iv©e
);

15 
v¨io_ouçut
(
uöt16_t
 
d
, 
uöt8_t
 
up
);

16 
ölöe
 
swôch_Àd_Êashî
(
uöt8_t
 
⁄
);

17 
ölöe
 
swôch_œndög_lights
(
uöt8_t
 
⁄
);

18 
PûŸLampSequí˚
(
uöt16_t
 
•ìd
, uöt16_à
∑âîn
, 
uöt8_t
 
num_∑âîns
);

20 
uöt8_t
 
	gcy˛eD⁄e
[5]={0,0,0,0,0},

21 
	gªsour˚IsOn
[5] = {0,0,0,0,0};

22 
uöt32_t
 
	gLa°ToggÀTime
[5] ={0,0,0,0,0};

23 
öt16_t
 
	gi2c_îr‹s_cou¡_ﬁd
 = 0;

25 
uöt8_t
 
	gSequí˚A˘ive
[5]={0,0,0,0,0};

27 #i‡
deföed
(
BUZZER
)

28 
uöt8_t
 
	$isBuzzîON
(Ë{  
ªsour˚IsOn
[1]; 
	}
}

30 
uöt8_t
 
	$isBuzzîON
(Ë{  0; 
	}
}

56 
	$Æ¨mH™dÀr
(){

58 #i‡
	`deföed
(
RCOPTIONSBEEP
)

59 
uöt8_t
 
i
 = 0,
fú°run
 = 1, 
œ°_rcO±i⁄s
[
CHECKBOXITEMS
];

61 i‡(
œ°_rcO±i⁄s
[
i
] !
rcO±i⁄s
[i]Ë
Æ¨mAºay
[
ALRM_FAC_TOGGLE
] = 
ALRM_LVL_TOGGLE_1
;

62 
œ°_rcO±i⁄s
[
i
] = 
rcO±i⁄s
[i];

63 
i
++;

64 if(
i
 >
CHECKBOXITEMS
)i=0;

66 if(
fú°run
 =1 && 
Æ¨mAºay
[
ALRM_FAC_CONFIRM
] =
ALRM_LVL_OFF
) {

67 
Æ¨mAºay
[
ALRM_FAC_TOGGLE
] = 
ALRM_LVL_OFF
;

68 
Æ¨mAºay
[
ALRM_FAC_BEEPERON
] = 
ALRM_LVL_OFF
;

70 
fú°run
 = 0;

73 #i‡
	`deföed
(
FAILSAFE
)

74 i‡–
Áûß„C¡
 > (5*
FAILSAFE_DELAY
Ë&& 
f
.
ARMED
) {

75 
Æ¨mAºay
[
ALRM_FAC_FAILSAFE
] = 
ALRM_LVL_FAILSAFE_PANIC
;

76 i‡(
Áûß„C¡
 > 5*(
FAILSAFE_DELAY
+
FAILSAFE_OFF_DELAY
)Ë
Æ¨mAºay
[
ALRM_FAC_FAILSAFE
] = 
ALRM_LVL_FAILSAFE_FINDME
;

78 i‡–
Áûß„C¡
 > (5*
FAILSAFE_DELAY
Ë&& !
f
.
ARMED
Ë
Æ¨mAºay
[
ALRM_FAC_FAILSAFE
] = 
ALRM_LVL_FAILSAFE_FINDME
;

79 i‡–
Áûß„C¡
 =0Ë
Æ¨mAºay
[
ALRM_FAC_FAILSAFE
] = 
ALRM_LVL_OFF
;

82 #i‡
GPS


83 i‡((
f
.
GPS_mode
 !
GPS_MODE_NONE
Ë&& !f.
GPS_FIX
Ë
Æ¨mAºay
[
ALRM_FAC_GPS
] = 
ALRM_LVL_GPS_NOFIX
;

84 i‡(!
f
.
GPS_FIX
Ë
Æ¨mAºay
[
ALRM_FAC_GPS
] = 
ALRM_LVL_ON
;

85 
Æ¨mAºay
[
ALRM_FAC_GPS
] = 
ALRM_LVL_OFF
;

88 #i‡
	`deföed
(
BUZZER
)

89 i‡–
rcO±i⁄s
[
BOXBEEPERON
] ) 
Æ¨mAºay
[
ALRM_FAC_BEEPERON
] = 
ALRM_LVL_ON
;

90 
Æ¨mAºay
[
ALRM_FAC_BEEPERON
] = 
ALRM_LVL_OFF
;

93 #i‡
	`deföed
(
POWERMETER
)

94 i‡–(
pMëî
[
PMOTOR_SUM
] < 
pAœrm
Ë|| (pAœrm =0Ë|| !
f
.
ARMED
Ë
Æ¨mAºay
[
ALRM_FAC_PMETER
] = 
ALRM_LVL_OFF
;

95 i‡(
pMëî
[
PMOTOR_SUM
] > 
pAœrm
Ë
Æ¨mAºay
[
ALRM_FAC_PMETER
] = 
ALRM_LVL_ON
;

98 #i‡
	`deföed
(
ARMEDTIMEWARNING
)

99 i‡(
ArmedTimeW¨nögMi¸oSec⁄ds
 > 0 && 
¨medTime
 >ArmedTimeW¨nögMi¸oSec⁄d†&& 
f
.
ARMED
Ë
Æ¨mAºay
[
ALRM_FAC_RUNTIME
] = 
ALRM_LVL_ON
;

100 
Æ¨mAºay
[
ALRM_FAC_RUNTIME
] = 
ALRM_LVL_OFF
;

103 #i‡
	`deföed
(
VBAT
)

104 i‡(
vb©Mö
 < 
c⁄f
.
vb©Àvñ_¸ô
Ë
Æ¨mAºay
[
ALRM_FAC_VBAT
] = 
ALRM_LVL_VBAT_CRIT
;

105 i‡–(
™Æog
.
vb©
 > 
c⁄f
.
vb©Àvñ_w¨n1
Ë|| (
NO_VBAT
 >á«log.vb©)Ë
Æ¨mAºay
[
ALRM_FAC_VBAT
] = 
ALRM_LVL_OFF
;

106 i‡(
™Æog
.
vb©
 > 
c⁄f
.
vb©Àvñ_w¨n2
Ë
Æ¨mAºay
[
ALRM_FAC_VBAT
] = 
ALRM_LVL_VBAT_INFO
;

107 i‡(
™Æog
.
vb©
 > 
c⁄f
.
vb©Àvñ_¸ô
Ë
Æ¨mAºay
[
ALRM_FAC_VBAT
] = 
ALRM_LVL_VBAT_WARN
;

111 i‡(
i2c_îr‹s_cou¡
 > 
i2c_îr‹s_cou¡_ﬁd
+100 || i2c_îr‹s_cou¡ < -1Ë
Æ¨mAºay
[
ALRM_FAC_I2CERROR
] = 
ALRM_LVL_ON
;

112 
Æ¨mAºay
[
ALRM_FAC_I2CERROR
] = 
ALRM_LVL_OFF
;

113 #i‡
	`deföed
(
LCD_TELEMETRY
Ë&& !deföed(
SUPPRESS_TELEMETRY_PAGE_8
)

114 i‡(
ãÀmëry
 =8Ë
	`lcd_ãÀmëry
();

116 
	`Æ¨mP©ã∫Compo£r
();

117 
	}
}

119 
	$Æ¨mP©ã∫Compo£r
(){

120 
ªsour˚
 = 0;

122 #i‡
	`deföed
(
BUZZER
)

123 
ªsour˚
 = 1;

124 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_FAILSAFE
 , 
ALRM_LVL_FAILSAFE_FINDME
ËË
	`∑âînDecode
(
ªsour˚
,200,0,0,50,2000);

125 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_FAILSAFE
 , 
ALRM_LVL_FAILSAFE_PANIC
) ||

126 
	`IS_ALARM_SET
(
ALRM_FAC_ACC
 , 
ALRM_LVL_ON
ËË
	`∑âînDecode
(
ªsour˚
,50,200,200,50,50);

127 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_TOGGLE
 , 
ALRM_LVL_TOGGLE_1
ËË
	`∑âînDecode
(
ªsour˚
,50,0,0,50,0);

128 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_TOGGLE
 , 
ALRM_LVL_TOGGLE_2
ËË
	`∑âînDecode
(
ªsour˚
,50,50,0,50,0);

129 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_TOGGLE
 , 
ALRM_LVL_TOGGLE_ELSE
ËË
	`∑âînDecode
(
ªsour˚
,50,50,50,50,0);

130 #i‡
GPS


131 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_GPS
 , 
ALRM_LVL_GPS_NOFIX
ËË
	`∑âînDecode
(
ªsour˚
,50,50,0,50,50);

133 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_BEEPERON
 , 
ALRM_LVL_ON
ËË
	`∑âînDecode
(
ªsour˚
,50,50,50,50,50);

134 #ifde‡
POWERMETER


135 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_PMETER
 , 
ALRM_LVL_ON
ËË
	`∑âînDecode
(
ªsour˚
,50,50,0,50,120);

137 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_RUNTIME
 , 
ALRM_LVL_ON
ËË
	`∑âînDecode
(
ªsour˚
,50,50,50,50,0);

138 #ifde‡
VBAT


139 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_VBAT
 , 
ALRM_LVL_VBAT_CRIT
ËË
	`∑âînDecode
(
ªsour˚
,50,50,200,50,2000);

140 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_VBAT
 , 
ALRM_LVL_VBAT_WARN
ËË
	`∑âînDecode
(
ªsour˚
,50,200,0,50,2000);

141 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_VBAT
 , 
ALRM_LVL_VBAT_INFO
ËË
	`∑âînDecode
(
ªsour˚
,200,0,0,50,2000);

143 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_CONFIRM
 , 
ALRM_LVL_CONFIRM_1
ËË
	`∑âînDecode
(
ªsour˚
,200,0,0,50,200);

144 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_CONFIRM
 , 
ALRM_LVL_CONFIRM_2
ËË
	`∑âînDecode
(
ªsour˚
,200,200,0,50,200);

145 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_CONFIRM
 , 
ALRM_LVL_CONFIRM_ELSE
ËË
	`∑âînDecode
(
ªsour˚
,200,200,200,50,200);

146 i‡(
Sequí˚A˘ive
[(
uöt8_t
)
ªsour˚
] =1Ë
	`∑âînDecode
(resource,0,0,0,0,0);

147 
	`tu∫Off
(
ªsour˚
);

148 
Æ¨mAºay
[
ALRM_FAC_ACC
] = 
ALRM_LVL_OFF
;

151 #i‡
	`deföed
(
PILOTLAMP
)

152 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_I2CERROR
 , 
ALRM_LVL_ON
ËË
	`PûŸLampSequí˚
(100,
B000111
,2);

153 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_BEEPERON
 , 
ALRM_LVL_ON
ËË
	`PûŸLampSequí˚
(100,
B0101
<<8|
B00010001
,4);

155 
ªsour˚
 = 2;

156 i‡(
f
.
ARMED
 && f.
ANGLE_MODE
Ë
	`∑âînDecode
(
ªsour˚
,100,100,100,100,1000);

157 i‡(
f
.
ARMED
 && f.
HORIZON_MODE
Ë
	`∑âînDecode
(
ªsour˚
,200,200,200,100,1000);

158 i‡(
f
.
ARMED
Ë
	`∑âînDecode
(
ªsour˚
,100,100,0,100,1000);

159 
	`tu∫Off
(
ªsour˚
);

160 
ªsour˚
 = 3;

161 #i‡
GPS


162 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_GPS
 , 
ALRM_LVL_ON
ËË
	`∑âînDecode
(
ªsour˚
,100,100,100,100,100);

163 i‡(
f
.
GPS_mode
 !
GPS_MODE_NONE
Ë
	`∑âînDecode
(
ªsour˚
,100,100,100,100,1000);

164 
	`£tTimög
(
ªsour˚
,100,1000);

166 
	`tu∫Off
(
ªsour˚
);

168 
ªsour˚
 = 4;

169 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_FAILSAFE
 , 
ALRM_LVL_FAILSAFE_PANIC
ËË
	`£tTimög
(
ªsour˚
,100,100);

170 i‡–
	`IS_ALARM_SET
(
ALRM_FAC_FAILSAFE
 , 
ALRM_LVL_FAILSAFE_FINDME
ËË
	`∑âînDecode
(
ªsour˚
,1000,0,0,0,2000);

171 
	`tu∫Off
(
ªsour˚
);

174 
	}
}

176 
	$∑âînDecode
(
uöt8_t
 
ªsour˚
,
uöt16_t
 
fú°
,uöt16_à
£c⁄d
,uöt16_à
thúd
,uöt16_à
cy˛ïau£
, uöt16_à
íd∑u£
){

177 
uöt16_t
 
∑âîn
[5][5];

178 
uöt8_t
 
i˙t
[5] = {0,0,0,0,0};

180 if(
Sequí˚A˘ive
[
ªsour˚
] == 0){

181 
Sequí˚A˘ive
[
ªsour˚
] = 1;

182 
∑âîn
[
ªsour˚
][0] = 
fú°
;

183 
∑âîn
[
ªsour˚
][1] = 
£c⁄d
;

184 
∑âîn
[
ªsour˚
][2] = 
thúd
;

185 
∑âîn
[
ªsour˚
][3] = 
íd∑u£
;

186 
∑âîn
[
ªsour˚
][4] = 
cy˛ïau£
;

188 if(
i˙t
[
ªsour˚
] <3 ){

189 i‡(
∑âîn
[
ªsour˚
][
i˙t
[resource]] != 0){

190 
	`£tTimög
(
ªsour˚
,
∑âîn
[ªsour˚][
i˙t
[resource]],pattern[resource][4]);

193 i‡(
La°ToggÀTime
[
ªsour˚
] < (
	`mûlis
()-
∑âîn
[resource][3])) {

194 
i˙t
[
ªsour˚
]=0;

195 
Sequí˚A˘ive
[
ªsour˚
] = 0;

196 
Æ¨mAºay
[
ALRM_FAC_TOGGLE
] = 
ALRM_LVL_OFF
;

197 
Æ¨mAºay
[
ALRM_FAC_CONFIRM
] = 
ALRM_LVL_OFF
;

198 
	`tu∫Off
(
ªsour˚
);

201 i‡(
cy˛eD⁄e
[
ªsour˚
] =1 || 
∑âîn
[ªsour˚][
i˙t
[resource]] == 0) {

202 i‡(
i˙t
[
ªsour˚
] < 3) {

203 
i˙t
[
ªsour˚
]++;

205 
cy˛eD⁄e
[
ªsour˚
] = 0;

206 
	`tu∫Off
(
ªsour˚
);

208 
	}
}

210 
	$tu∫Off
(
uöt8_t
 
ªsour˚
){

211 i‡(
ªsour˚
 == 1) {

212 i‡(
ªsour˚IsOn
[1]) {

213 
BUZZERPIN_OFF
;

214 
ªsour˚IsOn
[1] = 0;

216 }i‡(
ªsour˚
 == 0) {

217 i‡(
ªsour˚IsOn
[0]) {

218 
ªsour˚IsOn
[0] = 0;

219 
LEDPIN_OFF
;

221 }i‡(
ªsour˚
 == 2) {

222 i‡(
ªsour˚IsOn
[2]) {

223 
ªsour˚IsOn
[2] = 0;

224 #i‡
	`deföed
 (
PILOTLAMP
)

225 
	`PûŸLamp
(
PL_GRN_OFF
);

228 }i‡(
ªsour˚
 == 3) {

229 i‡(
ªsour˚IsOn
[3]) {

230 
ªsour˚IsOn
[3] = 0;

231 #i‡
	`deföed
 (
PILOTLAMP
)

232 
	`PûŸLamp
(
PL_BLU_OFF
);

235 }i‡(
ªsour˚
 == 4) {

236 i‡(
ªsour˚IsOn
[4]) {

237 
ªsour˚IsOn
[4] = 0;

238 #i‡
	`deföed
 (
PILOTLAMP
)

239 
	`PûŸLamp
(
PL_RED_OFF
);

243 
	}
}

245 #i‡
deföed
 (
PILOTLAMP
)

249 
	#PL_BUF_SIZE
 8

	)

250 vﬁ©ûê
uöt8_t
 
	gqueue
[
PL_BUF_SIZE
];

251 vﬁ©ûê
uöt8_t
 
	ghód
 = 0;

252 vﬁ©ûê
uöt8_t
 
	gèû
 = 0;

270 
	$PûŸLampSequí˚
(
uöt16_t
 
•ìd
, uöt16_à
∑âîn
, 
uöt8_t
 
num_∑âîns
){

271 
uöt32_t
 
œ°swôch
 = 0;

272 
uöt8_t
 
£qno
 = 0;

273 
uöt16_t
 
œ°∑âîn
 = 0;

275 if(
	`mûlis
(Ë< (
œ°swôch
 + 
•ìd
))

277 
œ°swôch
 = 
	`mûlis
();

279 
uöt8_t
 
i
=0;i<3;i++) {

280 
uöt8_t
 
°©e
 = (
∑âîn
 >>(
£qno
*3+
i
)) & 1;

283 
uöt8_t
 
tick
 = 50*(
i
+1);

284 i‡(
°©e
)

285 
tick
 -=25;

286 
	`PûŸLamp
(
tick
);

287 
ªsour˚IsOn
[
i
+2]=
°©e
;

289 
£qno
++;

290 
£qno
%=
num_∑âîns
;

291 
	}
}

293 
	$PûŸLamp
(
uöt8_t
 
cou¡
){

294 i‡(((
èû
+1)%
PL_BUF_SIZE
)!=
hód
) {

295 
queue
[
èû
]=
cou¡
;

296 
èû
++;

297 
èû
=—aû%
PL_BUF_SIZE
);

299 
	}
}

301 
	$ISR
(
PL_ISR
) {

302 
uöt8_t
 
°©e
 = 0;

303 
uöt8_t
 
h
 = 
hód
;

304 
uöt8_t
 
t
 = 
èû
;

305 i‡(
°©e
==0) {

306 i‡(
h
!=
t
) {

307 
uöt8_t
 
c
 = 
queue
[
h
];

308 
PL_PIN_ON
;

309 
PL_CHANNEL
+=
c
;

310 
h
 = ((h+1Ë% 
PL_BUF_SIZE
);

311 
hód
 = 
h
;

312 
°©e
=1;

314 } i‡(
°©e
==1) {

315 
PL_PIN_OFF
;

316 
PL_CHANNEL
+=
PL_IDLE
;

317 
°©e
=0;

319 
	}
}

327 
	$blökLED
(
uöt8_t
 
num
, uöt8_à
⁄time
,uöt8_à
ª≥©
) {

328 
uöt8_t
 
i
,
r
;

329 
r
=0;r<
ª≥©
;r++) {

330 
i
=0;i<
num
;i++) {

331 #i‡
	`deföed
(
LED_FLASHER
)

332 
	`swôch_Àd_Êashî
(1);

334 #i‡
	`deföed
(
LANDING_LIGHTS_DDR
)

335 
	`swôch_œndög_lights
(1);

337 
LEDPIN_TOGGLE
;

338 
	`dñay
(
⁄time
);

339 #i‡
	`deföed
(
LED_FLASHER
)

340 
	`swôch_Àd_Êashî
(0);

342 #i‡
	`deföed
(
LANDING_LIGHTS_DDR
)

343 
	`swôch_œndög_lights
(0);

346 
	`dñay
(60);

348 
	}
}

354 
	$£tTimög
(
uöt8_t
 
ªsour˚
, 
uöt16_t
 
pul£
, uöt16_à
∑u£
){

355 i‡(!
ªsour˚IsOn
[
ªsour˚
] && (
	`mûlis
(Ë>(
La°ToggÀTime
[ªsour˚] + 
∑u£
))&& 
pul£
 != 0) {

356 
ªsour˚IsOn
[
ªsour˚
] = 1;

357 
	`toggÀResour˚
(
ªsour˚
,1);

358 
La°ToggÀTime
[
ªsour˚
]=
	`mûlis
();

359 } i‡–(
ªsour˚IsOn
[
ªsour˚
] && (
	`mûlis
(Ë>
La°ToggÀTime
[ªsour˚] + 
pul£
) ) || (pulse==0 &&ÑesourceIsOn[resource]) ) {

360 
ªsour˚IsOn
[
ªsour˚
] = 0;

361 
	`toggÀResour˚
(
ªsour˚
,0);

362 
La°ToggÀTime
[
ªsour˚
]=
	`mûlis
();

363 
cy˛eD⁄e
[
ªsour˚
] = 1;

365 
	}
}

367 
	$toggÀResour˚
(
uöt8_t
 
ªsour˚
, uöt8_à
a˘iv©e
){

368 
ªsour˚
) {

369 #i‡
	`deföed
 (
BUZZER
)

371 i‡(
a˘iv©e
 =1Ë{
BUZZERPIN_ON
;}

372 
BUZZERPIN_OFF
;

375 #i‡
	`deföed
 (
PILOTLAMP
)

377 i‡(
a˘iv©e
 =1Ë
	`PûŸLamp
(
PL_GRN_ON
);

378 
	`PûŸLamp
(
PL_GRN_OFF
);

381 i‡(
a˘iv©e
 =1Ë
	`PûŸLamp
(
PL_BLU_ON
);

382 
	`PûŸLamp
(
PL_BLU_OFF
);

385 i‡(
a˘iv©e
 =1Ë
	`PûŸLamp
(
PL_RED_ON
);

386 
	`PûŸLamp
(
PL_RED_OFF
);

391 i‡(
a˘iv©e
 =1Ë{
LEDPIN_ON
;}

392 
LEDPIN_OFF
;

396 
	}
}

403 #i‡
deföed
(
LED_RING
)

405 
	#LED_RING_ADDRESS
 0xDA

406 

	)

407 
	$i2CLedRögSèã
() {

408 
uöt8_t
 
b
[10];

410 
b
[0]='M';

411 i‡(
f
.
ARMED
) {

412 if(!(
f
.
ANGLE_MODE
||f.
HORIZON_MODE
)){

413 
b
[0]= 'x';

414 } if(
f
.
GPS_mode
 =
GPS_MODE_RTH
){

415 
b
[0]= 'w';

416 } if(
f
.
GPS_mode
 =
GPS_MODE_HOLD
){

417 
b
[0]= 'v';

418 } if(
f
.
HORIZON_MODE
){

419 
b
[0]= 'y';

421 
b
[0]= 'u';

423 
	`i2c_ªp_°¨t
(
LED_RING_ADDRESS
);

424 
	`i2c_wrôe
(
b
[0]);

425 
	`i2c_°›
();

426 } i‡(!
f
.
ACC_CALIBRATED
) {

427 
b
[0]= 't';

428 
	`i2c_ªp_°¨t
(
LED_RING_ADDRESS
);

429 
	`i2c_wrôe
(
b
[0]);

430 
	`i2c_°›
();

432 
b
[0]= 's';

433 i‡(
f
.
ANGLE_MODE
Ë
b
[1]=1;

434 i‡(
f
.
HORIZON_MODE
Ë
b
[1]=2;

435 
b
[1]= 0;

436 i‡(
f
.
BARO_MODE
Ë
b
[2]=1;

437 
b
[2]= 0;

438 i‡(
f
.
MAG_MODE
Ë
b
[3]=1;

439 
b
[3]= 0;

440 #i‡
GPS


441 i‡(
rcO±i⁄s
[
BOXGPSHOME
]Ë
b
[4]=2;

442 i‡(
rcO±i⁄s
[
BOXGPSHOLD
]Ë
b
[4]=1;

443 
b
[4]=0;

445 
b
[4]=0;

447 
b
[5]=(180-
©t
.
hódög
)/2;

448 
b
[6]=
GPS_numS©
;

449 
	`i2c_ªp_°¨t
(
LED_RING_ADDRESS
);

450 
uöt8_t
 
i
=0;i<7;i++){

451 
	`i2c_wrôe
(
b
[
i
]);

453 
	`i2c_°›
();

455 #i‡
	`deföed
 (
VBAT
)

456 i‡(
™Æog
.
vb©
 < 
c⁄f
.
vb©Àvñ_w¨n1
){

457 
	`i2c_ªp_°¨t
(
LED_RING_ADDRESS
);

458 
	`i2c_wrôe
('r');

459 
	`i2c_°›
();

462 
	}
}

464 
	$blökLedRög
() {

465 
uöt8_t
 
b
[3];

466 
b
[0]='g';

467 
b
[1]= 10;

468 
b
[2]= 10;

469 
	`i2c_ªp_°¨t
(
LED_RING_ADDRESS
<<1);

470 
uöt8_t
 
i
=0;i<3;i++)

471 
	`i2c_wrôe
(
b
[
i
]);

472 
	`i2c_°›
();

473 
	}
}

480 #i‡
deföed
(
LED_FLASHER
)

481 
uöt8_t
 
	gÀd_Êashî_£quí˚
 = 0;

484 
	mLED_FLASHER_AUTO
,

485 
	mLED_FLASHER_CUSTOM


486 } 
	gÀd_Êashî_c⁄åﬁ
 = 
LED_FLASHER_AUTO
;

488 
	$öô_Àd_Êashî
() {

489 #i‡
	`deföed
(
LED_FLASHER_DDR
)

490 
LED_FLASHER_DDR
 |(1<<
LED_FLASHER_BIT
);

491 
	`swôch_Àd_Êashî
(0);

493 
	}
}

495 
	$Àd_Êashî_£t_£quí˚
(
uöt8_t
 
s
) {

496 
Àd_Êashî_£quí˚
 = 
s
;

497 
	}
}

499 
ölöe
 
	$swôch_Àd_Êashî
(
uöt8_t
 
⁄
) {

500 #i‡
	`deföed
(
LED_FLASHER_DDR
)

501 #i‚de‡
LED_FLASHER_INVERT


502 i‡(
⁄
) {

504 i‡(!
⁄
) {

506 
LED_FLASHER_PORT
 |(1<<
LED_FLASHER_BIT
);

508 
LED_FLASHER_PORT
 &~(1<<
LED_FLASHER_BIT
);

511 
	}
}

513 
uöt8_t
 
ölöe
 
	$Àd_Êashî_⁄
() {

514 
uöt8_t
 
£g
 = (
cuºítTime
/1000/125)%8;

515  (
Àd_Êashî_£quí˚
 & 1<<
£g
);

516 
	}
}

518 
	$auto_swôch_Àd_Êashî
() {

519 i‡(
	`Àd_Êashî_⁄
()) {

520 
	`swôch_Àd_Êashî
(1);

522 
	`swôch_Àd_Êashî
(0);

524 
	}
}

529 
	$Àd_Êashî_auto£À˘_£quí˚
() {

530 i‡(
Àd_Êashî_c⁄åﬁ
 !
LED_FLASHER_AUTO
) ;

532 #i‡
	`deföed
(
LED_FLASHER_SEQUENCE_MAX
)

534 i‡(
rcO±i⁄s
[
BOXLEDMAX
]) {

535 
	`Àd_Êashî_£t_£quí˚
(
LED_FLASHER_SEQUENCE_MAX
);

540 #i‡
	`deföed
(
LED_FLASHER_SEQUENCE_LOW
)

541 i‡(
rcO±i⁄s
[
BOXLEDLOW
]) {

542 
	`Àd_Êashî_£t_£quí˚
(
LED_FLASHER_SEQUENCE_LOW
);

547 #i‡
	`deföed
(
LED_FLASHER_SEQUENCE_ARMED
)

549 i‡(
f
.
ARMED
) {

550 
	`Àd_Êashî_£t_£quí˚
(
LED_FLASHER_SEQUENCE_ARMED
);

556 
	`Àd_Êashî_£t_£quí˚
(
LED_FLASHER_SEQUENCE
);

557 
	}
}

561 #i‡
deföed
(
LANDING_LIGHTS_DDR
)

562 
	$öô_œndög_lights
() {

563 
LANDING_LIGHTS_DDR
 |1<<
LANDING_LIGHTS_BIT
;

564 
	`swôch_œndög_lights
(0);

565 
	}
}

567 
ölöe
 
	$swôch_œndög_lights
(
uöt8_t
 
⁄
) {

568 #i‚de‡
LANDING_LIGHTS_INVERT


569 i‡(
⁄
) {

571 i‡(!
⁄
) {

573 
LANDING_LIGHTS_PORT
 |1<<
LANDING_LIGHTS_BIT
;

575 
LANDING_LIGHTS_PORT
 &~(1<<
LANDING_LIGHTS_BIT
);

577 
	}
}

579 
	$auto_swôch_œndög_lights
() {

580 i‡(
rcO±i⁄s
[
BOXLLIGHTS
]

581 #i‡
	`deföed
(
LANDING_LIGHTS_AUTO_ALTITUDE
Ë& 
SONAR


582 || (
s⁄¨A…
 >0 && s⁄¨A… <
LANDING_LIGHTS_AUTO_ALTITUDE
 && 
f
.
ARMED
)

584 #i‡
	`deföed
(
LED_FLASHER_DDR
Ë& deföed(
LANDING_LIGHTS_ADOPT_LED_FLASHER_PATTERN
)

585 || (
	`Àd_Êashî_⁄
())

588 
	`swôch_œndög_lights
(1);

590 
	`swôch_œndög_lights
(0);

592 
	}
}

598 #ifde‡
VARIOMETER


599 
	#TRESHOLD_UP
 50

600 
	#TRESHOLD_DOWN
 40

601 
	#TRESHOLD_UP_MINUS_DOWN
 10

602 
	#ALTITUDE_INTERVAL
 400

603 
	#DELTA_ALT_TRESHOLD
 200

604 
	#DELTA_T
 5

605 
	#SIGNAL_SCALE
 4

606 
	#SILENCE_M
 200

607 
	#SILENCE_SCALE
 33

608 
	#SILENCE_A
 6600

609 
	#DURATION_SUP
 5

610 
	#DURATION_SCALE
 100

611 

	)

617 
	$v¨io_sig«lög
() {

618 
öt16_t
 
œ°_v
 = 0;

619 
uöt16_t
 
sûí˚
 = 0;

620 
öt16_t
 
max_v
 = 0;

621 
uöt8_t
 
max_up
 = 0;

623 
uöt16_t
 
s
 = 0;

624 
öt16_t
 
v
 = 0;

627 #i‡(
VARIOMETER
 == 1) || (VARIOMETER == 12)

629 
uöt8_t
 
up
 = (
Æt
.
v¨io
 > 0 ? 1 : 0 );

631 
v
 = 
	`abs
(
Æt
.
v¨io
Ë- 
up
 * (
TRESHOLD_UP_MINUS_DOWN
Ë- 
TRESHOLD_DOWN
;

632 i‡(
sûí˚
>0) silence--; silence = 0;

633 i‡(
v
 > 0) {

635 i‡(
v
 > 
œ°_v
) {

638 
s
 = (
SILENCE_A
Ë/ (
SILENCE_SCALE
 + 
v
);

639 i‡(
sûí˚
 > 
s
) silence = s;

642 i‡(
v
 > 
max_v
) {

643 
max_v
 = 
v
;

644 
max_up
 = 
up
;

650 #i‡(
VARIOMETER
 == 2) || (VARIOMETER == 12)

652 
uöt16_t
 
t
 = 0;

653 i‡(!(
t
++ % 
ALTITUDE_INTERVAL
)) {

654 
öt32_t
 
œ°_B¨oA…
 = 0;

655 
öt32_t
 
dñè_B¨oA…
 = 
Æt
.
E°A…
 - 
œ°_B¨oA…
;

656 i‡(
	`abs
(
dñè_B¨oA…
Ë> 
DELTA_ALT_TRESHOLD
) {

658 
max_v
 = 
	`abs
(
dñè_B¨oA…
 / 
DELTA_T
);

659 
max_up
 = (
dñè_B¨oA…
 > 0 ? 1 : 0);

660 
sûí˚
 = 0;

662 
œ°_B¨oA…
 = 
Æt
.
E°A…
;

667 i‡–(
sûí˚
 =0Ë&& (
max_v
 > 0) ) {

669 
uöt16_t
 
d
 = (
DURATION_SUP
 * 
max_v
)/(
DURATION_SCALE
 + max_v);

670 
s
 = (
SILENCE_A
Ë/ (
SILENCE_SCALE
 + 
max_v
);

671 
s
+
d
 * 
SIGNAL_SCALE
;

672 
	`v¨io_ouçut
(
d
, 
max_up
);

673 
œ°_v
 = 
v
;

674 
max_v
 = 0;

675 
max_up
 = 0;

676 
sûí˚
 = 
s
;

678 
	}
}

680 
	$v¨io_ouçut
(
uöt16_t
 
d
, 
uöt8_t
 
up
) {

681 i‡(
d
 == 0) ;

682 #i‡
	`deföed
(
SUPPRESS_VARIOMETER_UP
)

683 i‡(
up
) ;

684 #ñi‡
	`deföed
(
SUPPRESS_VARIOMETER_DOWN
)

685 i‡(!
up
) ;

687 #ifde‡
VARIOMETER_SINGLE_TONE


688 
uöt8_t
 
s1
 = 0x07;

689 
uöt8_t
 
d1
 = 
d
;

691 
uöt8_t
 
s1
 = (
up
 ? 0x05 : 0x07);

692 
uöt8_t
 
d1
 = 
d
/2;

694 i‡(
d1
<1) d1 = 1;

695 
uöt8_t
 
i
=0; i<
d1
; i++Ë
	`LCD¥öt
(
s1
);

696 #i‚de‡
VARIOMETER_SINGLE_TONE


697 
uöt8_t
 
s2
 = (
up
 ? 0x07 : 0x05);

698 
uöt8_t
 
d2
 = 
d
-
d1
;

699 i‡(
d2
<1) d2 = 1;

700 
uöt8_t
 
i
=0; i<
d2
; i++Ë
	`LCD¥öt
(
s2
);

702 
	}
}

	@Alarms.h

1 #i‚de‡
ALARMS_H_


2 
	#ALARMS_H_


	)

4 
blökLED
(
uöt8_t
 
num
, uöt8_à
⁄time
,uöt8_à
ª≥©
);

5 
uöt8_t
 
isBuzzîON
();

6 
Æ¨mH™dÀr
();

7 
v¨io_sig«lög
();

8 
i2CLedRögSèã
();

9 
blökLedRög
();

10 
auto_swôch_Àd_Êashî
();

11 
öô_Àd_Êashî
();

12 
Àd_Êashî_£t_£quí˚
(
uöt8_t
 
s
);

13 
Àd_Êashî_auto£À˘_£quí˚
();

14 
öô_œndög_lights
();

15 
auto_swôch_œndög_lights
();

16 
PûŸLamp
(
uöt8_t
 
cou¡
);

31 
	eÆrm_Ác
 {

32 
	mALRM_FAC_TOGGLE
 = 0,

33 
	mALRM_FAC_FAILSAFE
,

34 
	mALRM_FAC_GPS
,

35 
	mALRM_FAC_BEEPERON
,

36 
	mALRM_FAC_PMETER
,

37 
	mALRM_FAC_RUNTIME
,

38 
	mALRM_FAC_VBAT
,

39 
	mALRM_FAC_CONFIRM
,

40 
	mALRM_FAC_ACC
,

41 
	mALRM_FAC_I2CERROR
,

42 
	mALRM_FAC_SIZE
,

54 
	eÆrm_ªs
 {

55 
	mALRM_RES_LED
 = 0,

56 
	mALRM_RES_BUZZER
,

57 
	mALRM_RES_PL_GREEN
,

58 
	mALRM_RES_PL_BLUE
,

59 
	mALRM_RES_PL_RED
,

60 
	mALRM_RES_PL
 ,

61 
	mALRM_RES_ANY
 ,

64 
	eÆrm_lvl_⁄off
 {

65 
	mALRM_LVL_OFF
 = 0,

66 
	mALRM_LVL_ON
 = 1,

68 
	eÆrm_lvl_Áûß„
 {

69 
	mALRM_LVL_FAILSAFE_FINDME
 = 1,

70 
	mALRM_LVL_FAILSAFE_PANIC
,

72 
	eÆrm_lvl_toggÀ
 {

73 
	mALRM_LVL_TOGGLE_1
 = 1,

74 
	mALRM_LVL_TOGGLE_2
 ,

75 
	mALRM_LVL_TOGGLE_ELSE
 ,

77 #i‡
GPS


78 
	eÆrm_lvl_gps
 {

79 
	mALRM_LVL_GPS_NOFIX
 = 2,

82 #ifde‡
VBAT


83 
	eÆrm_lvl_vb©
 {

84 
	mALRM_LVL_VBAT_INFO
 = 1,

85 
	mALRM_LVL_VBAT_WARN
 ,

86 
	mALRM_LVL_VBAT_CRIT
 ,

89 
	eÆrm_lvl_c⁄fúm
 {

90 
	mALRM_LVL_CONFIRM_1
 = 1,

91 
	mALRM_LVL_CONFIRM_2
 ,

92 
	mALRM_LVL_CONFIRM_ELSE
 ,

95 
	#SET_ALARM
(
Ác
, 
Àvñ
Ë
Æ¨mAºay
[Ác] = 
	)
level

96 #ifde‡
BUZZER


97 
	#SET_ALARM_BUZZER
(
Ác
, 
Àvñ
Ë
	`SET_ALARM
–Ác,Üevñ)

	)

99 
	#SET_ALARM_BUZZER
(
Ác
, 
Àvñ
)

	)

102 
	#IS_ALARM_SET
(
Ác
, 
Àvñ
Ë–
Æ¨mAºay
[Ác] =Àvñ )

	)

	@EEPROM.cpp

1 
	~<avr/ì¥om.h
>

2 
	~"Arduöo.h
"

3 
	~"c⁄fig.h
"

4 
	~"def.h
"

5 
	~"ty≥s.h
"

6 
	~"EEPROM.h
"

7 
	~"Mu…iWii.h
"

8 
	~"Aœrms.h
"

9 
	~"GPS.h
"

11 
LﬂdDeÁu…s
();

13 
uöt8_t
 
	$ˇlcuœã_sum
(
uöt8_t
 *
cb
 , uöt8_à
siz
) {

14 
uöt8_t
 
sum
=0x55;

15 --
siz
Ë
sum
 +*
cb
++;

16  
sum
;

17 
	}
}

19 
	$ªadGlobÆSë
() {

20 
	`ì¥om_ªad_block
((*)&
globÆ_c⁄f
, (*)0, (global_conf));

21 if(
	`ˇlcuœã_sum
((
uöt8_t
*)&
globÆ_c⁄f
, (globÆ_c⁄f)Ë!globÆ_c⁄f.
checksum
) {

22 
globÆ_c⁄f
.
cuºítSë
 = 0;

23 
globÆ_c⁄f
.
accZîo
[
ROLL
] = 5000;

25 
	}
}

27 
boﬁ
 
	$ªadEEPROM
() {

28 
uöt8_t
 
i
;

29 
öt8_t
 
tmp
;

30 
uöt8_t
 
y
;

32 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


33 if(
globÆ_c⁄f
.
cuºítSë
>2) global_conf.currentSet=0;

35 
globÆ_c⁄f
.
cuºítSë
=0;

37 
	`ì¥om_ªad_block
((*)&
c⁄f
, (*)(
globÆ_c⁄f
.
cuºítSë
 * (conf) + (global_conf)), (conf));

38 if(
	`ˇlcuœã_sum
((
uöt8_t
*)&
c⁄f
, (c⁄f)Ë!c⁄f.
checksum
) {

39 
	`blökLED
(6,100,3);

40 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_ELSE
);

41 
	`LﬂdDeÁu…s
();

42  
Ál£
;

45 
i
=0;i<5;i++) {

46 
lookupPôchRﬁlRC
[
i
] = (1526+
c⁄f
.
rcExpo8
*(i*i-15))*i*(
öt32_t
)c⁄f.
rcR©e8
/1192;

48 
i
=0;i<11;i++) {

49 
tmp
 = 10*
i
-
c⁄f
.
thrMid8
;

50 
y
 = 
c⁄f
.
thrMid8
;

51 i‡(
tmp
>0Ë
y
 = 100-y;

52 
lookupThrŸéeRC
[
i
] = 100*
c⁄f
.
thrMid8
 + 
tmp
*–(
öt32_t
)c⁄f.
thrExpo8
*—mp*tmp)/((
uöt16_t
)
y
*y)+100-conf.thrExpo8 );

53 
lookupThrŸéeRC
[
i
] = 
c⁄f
.
möthrŸée
 + (
uöt32_t
)((
uöt16_t
)(
MAXTHROTTLE
-conf.minthrottle))*ÜookupThrottleRC[i]/10000;

55 #i‡
	`deföed
(
POWERMETER
)

56 
pAœrm
 = (
uöt32_t
Ë
c⁄f
.
powîTriggî1
 * (uöt32_tË
PLEVELSCALE
 * (uöt32_tË
PLEVELDIV
;

58 #i‡
GPS


59 
	`GPS_£t_pids
();

60 
	`ªˇŒGPSc⁄f
();

62 #i‡
	`deföed
(
ARMEDTIMEWARNING
)

63 
ArmedTimeW¨nögMi¸oSec⁄ds
 = (
c⁄f
.
¨medtimew¨nög
 *1000000);

65  
åue
;

66 
	}
}

68 
	$wrôe
(, 
uöt8_t
) {

70 
	}
}

72 
	$wrôeGlobÆSë
(
uöt8_t
 
b
) {

73 
globÆ_c⁄f
.
checksum
 = 
	`ˇlcuœã_sum
((
uöt8_t
*)&global_conf, (global_conf));

74 
	`ì¥om_wrôe_block
((c⁄° *)&
globÆ_c⁄f
, (*)0, (global_conf));

75 i‡(
b
 =1Ë
	`blökLED
(15,20,1);

76 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_1
);

78 
	}
}

80 
	$wrôeP¨ams
(
uöt8_t
 
b
) {

81 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


82 if(
globÆ_c⁄f
.
cuºítSë
>2) global_conf.currentSet=0;

84 
globÆ_c⁄f
.
cuºítSë
=0;

86 
c⁄f
.
checksum
 = 
	`ˇlcuœã_sum
((
uöt8_t
*)&conf, (conf));

87 
	`ì¥om_wrôe_block
((c⁄° *)&
c⁄f
, (*)(
globÆ_c⁄f
.
cuºítSë
 * (conf) + (global_conf)), (conf));

89 #i‡
GPS


90 
	`wrôeGPSc⁄f
();

91 
	`ªˇŒGPSc⁄f
();

94 
	`ªadEEPROM
();

95 i‡(
b
 =1Ë
	`blökLED
(15,20,1);

96 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_1
);

97 
	}
}

99 
	$upd©e_c⁄°™ts
() {

100 #i‡
	`deföed
(
GYRO_SMOOTHING
)

102 
uöt8_t
 
s
[3] = 
GYRO_SMOOTHING
;

103 
uöt8_t
 
i
=0;i<3;i++Ë
c⁄f
.
SmoŸhög
[i] = 
s
[i];

106 #i‡
	`deföed
 (
FAILSAFE
)

107 
c⁄f
.
Áûß„_thrŸée
 = 
FAILSAFE_THROTTLE
;

109 #ifde‡
VBAT


110 
c⁄f
.
vb©sˇÀ
 = 
VBATSCALE
;

111 
c⁄f
.
vb©Àvñ_w¨n1
 = 
VBATLEVEL_WARN1
;

112 
c⁄f
.
vb©Àvñ_w¨n2
 = 
VBATLEVEL_WARN2
;

113 
c⁄f
.
vb©Àvñ_¸ô
 = 
VBATLEVEL_CRIT
;

115 #ifde‡
POWERMETER


116 
c⁄f
.
pöt2ma
 = 
PINT2mA
;

118 #ifde‡
POWERMETER_HARD


119 
c⁄f
.
p£ns‹nuŒ
 = 
PSENSORNULL
;

121 #ifde‡
MMGYRO


122 
c⁄f
.
mmgyro
 = 
MMGYRO
;

124 #i‡
	`deföed
(
ARMEDTIMEWARNING
)

125 
c⁄f
.
¨medtimew¨nög
 = 
ARMEDTIMEWARNING
;

127 
c⁄f
.
möthrŸée
 = 
MINTHROTTLE
;

128 #i‡
MAG


129 
c⁄f
.
mag_de˛ö©i⁄
 = (
öt16_t
)(
MAG_DECLINATION
 * 10);

131 #ifde‡
GOVERNOR_P


132 
c⁄f
.
govîn‹P
 = 
GOVERNOR_P
;

133 
c⁄f
.
govîn‹D
 = 
GOVERNOR_D
;

135 #ifde‡
YAW_COLL_PRECOMP


136 
c⁄f
.
yawCﬁlPªcomp
 = 
YAW_COLL_PRECOMP
;

137 
c⁄f
.
yawCﬁlPªcompDódb™d
 = 
YAW_COLL_PRECOMP_DEADBAND
;

139 #i‡
	`deföed
(
MY_PRIVATE_DEFAULTS
)

140 #ö˛udê
MY_PRIVATE_DEFAULTS


143 #i‡
GPS


144 
	`lﬂdGPSdeÁu…s
();

147 
	`wrôeP¨ams
(0);

148 
	}
}

150 
	$LﬂdDeÁu…s
() {

151 
uöt8_t
 
i
;

152 #ifde‡
SUPPRESS_DEFAULTS_FROM_GUI


154 #ñi‡
	`deföed
(
MY_PRIVATE_DEFAULTS
)

158 #i‡
PID_CONTROLLER
 == 1

159 
c⁄f
.
pid
[
ROLL
].
P8
 = 33; c⁄f.pid[ROLL].
I8
 = 30; c⁄f.pid[ROLL].
D8
 = 23;

160 
c⁄f
.
pid
[
PITCH
].
P8
 = 33; c⁄f.pid[PITCH].
I8
 = 30; c⁄f.pid[PITCH].
D8
 = 23;

161 
c⁄f
.
pid
[
PIDLEVEL
].
P8
 = 90; c⁄f.pid[PIDLEVEL].
I8
 = 10; c⁄f.pid[PIDLEVEL].
D8
 = 100;

162 #ñi‡
PID_CONTROLLER
 == 2

163 
c⁄f
.
pid
[
ROLL
].
P8
 = 28; c⁄f.pid[ROLL].
I8
 = 10; c⁄f.pid[ROLL].
D8
 = 7;

164 
c⁄f
.
pid
[
PITCH
].
P8
 = 28; c⁄f.pid[PITCH].
I8
 = 10; c⁄f.pid[PITCH].
D8
 = 7;

165 
c⁄f
.
pid
[
PIDLEVEL
].
P8
 = 30; c⁄f.pid[PIDLEVEL].
I8
 = 32; c⁄f.pid[PIDLEVEL].
D8
 = 0;

167 
c⁄f
.
pid
[
YAW
].
P8
 = 68; c⁄f.pid[YAW].
I8
 = 45; c⁄f.pid[YAW].
D8
 = 0;

168 
c⁄f
.
pid
[
PIDALT
].
P8
 = 64; c⁄f.pid[PIDALT].
I8
 = 25; c⁄f.pid[PIDALT].
D8
 = 24;

170 
c⁄f
.
pid
[
PIDPOS
].
P8
 = 
POSHOLD_P
 * 100; c⁄f.pid[PIDPOS].
I8
 = 
POSHOLD_I
 * 100; c⁄f.pid[PIDPOS].
D8
 = 0;

171 
c⁄f
.
pid
[
PIDPOSR
].
P8
 = 
POSHOLD_RATE_P
 * 10; c⁄f.pid[PIDPOSR].
I8
 = 
POSHOLD_RATE_I
 * 100; c⁄f.pid[PIDPOSR].
D8
 = 
POSHOLD_RATE_D
 * 1000;

172 
c⁄f
.
pid
[
PIDNAVR
].
P8
 = 
NAV_P
 * 10; c⁄f.pid[PIDNAVR].
I8
 = 
NAV_I
 * 100; c⁄f.pid[PIDNAVR].
D8
 = 
NAV_D
 * 1000;

174 
c⁄f
.
pid
[
PIDMAG
].
P8
 = 40;

176 
c⁄f
.
pid
[
PIDVEL
].
P8
 = 0; c⁄f.pid[PIDVEL].
I8
 = 0; c⁄f.pid[PIDVEL].
D8
 = 0;

178 
c⁄f
.
rcR©e8
 = 90; c⁄f.
rcExpo8
 = 65;

179 
c⁄f
.
rﬁlPôchR©e
 = 0;

180 
c⁄f
.
yawR©e
 = 0;

181 
c⁄f
.
dynThrPID
 = 0;

182 
c⁄f
.
thrMid8
 = 50; c⁄f.
thrExpo8
 = 0;

183 
i
=0;i<
CHECKBOXITEMS
;i++Ë{
c⁄f
.
a˘iv©e
[i] = 0;}

184 
c⁄f
.
™gÀTrim
[0] = 0; conf.angleTrim[1] = 0;

185 
c⁄f
.
powîTriggî1
 = 0;

187 #i‡
	`deföed
(
SERVO
)

188 
öt8_t
 
§
[8] = 
SERVO_RATES
;

189 #ifde‡
SERVO_MIN


190 
öt16_t
 
smö
[8] = 
SERVO_MIN
;

191 
öt16_t
 
smax
[8] = 
SERVO_MAX
;

192 
öt16_t
 
smid
[8] = 
SERVO_MID
;

194 
i
=0;i<8;i++) {

195 #ifde‡
SERVO_MIN


196 
c⁄f
.
£rvoC⁄f
[
i
].
mö
 = 
smö
[i];

197 
c⁄f
.
£rvoC⁄f
[
i
].
max
 = 
smax
[i];

198 
c⁄f
.
£rvoC⁄f
[
i
].
middÀ
 = 
smid
[i];

200 
c⁄f
.
£rvoC⁄f
[
i
].
mö
 = 1020;

201 
c⁄f
.
£rvoC⁄f
[
i
].
max
 = 2000;

202 
c⁄f
.
£rvoC⁄f
[
i
].
middÀ
 = 1500;

204 
c⁄f
.
£rvoC⁄f
[
i
].
øã
 = 
§
[i];

214 #ifde‡
FIXEDWING


215 
c⁄f
.
dynThrPID
 = 50;

216 
c⁄f
.
rcExpo8
 = 0;

217 #i‡
GPS


218 
c⁄f
.
pid
[
PIDALT
].
P8
 = 30;c⁄f.pid[PIDALT].
I8
 = 20;c⁄f.pid[PIDALT].
D8
 = 45;

219 
c⁄f
.
pid
[
PIDNAVR
].
P8
 = 20;c⁄f.pid[PIDNAVR].
I8
 = 20;c⁄f.pid[PIDNAVR].
D8
 = 45;

220 
c⁄f
.
pid
[
YAW
].
I8
 = 0;

223 
	`upd©e_c⁄°™ts
();

224 
	}
}

226 #ifde‡
LOG_PERMANENT


227 #i‚de‡
LOG_PERMANENT_SD_ONLY


228 
	$ªadPLog
() {

229 
	`ì¥om_ªad_block
((*)&
∂og
, (*)(
E2END
 - 4 - (plog)), (plog));

230 if(
	`ˇlcuœã_sum
((
uöt8_t
*)&
∂og
, ’log)Ë!∂og.
checksum
) {

231 
	`blökLED
(9,100,3);

232 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_ELSE
);

234 
∂og
.
¨m
 =Ölog.
dißrm
 =Ölog.
°¨t
 =Ölog.
Áûß„
 =Ölog.
i2c
 = 0;

235 
∂og
.
ru¬ög
 = 1;

236 
∂og
.
li„time
 =Ölog.
¨med_time
 = 0;

237 
	`wrôePLog
();

239 
	}
}

240 
	$wrôePLog
() {

241 
∂og
.
checksum
 = 
	`ˇlcuœã_sum
((
uöt8_t
*)&plog, (plog));

242 
	`ì¥om_wrôe_block
((c⁄° *)&
∂og
, (*)(
E2END
 - 4 - (plog)), (plog));

243 
	}
}

247 #i‡
GPS


250 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


251 
	#PROFILES
 3

	)

253 
	#PROFILES
 1

	)

255 #ifde‡
LOG_PERMANENT


256 
	#PLOG_SIZE
 (
∂og
)

	)

258 
	#PLOG_SIZE
 0

	)

263 
	$wrôeGPSc⁄f
() {

264 
GPS_c⁄f
.
checksum
 = 
	`ˇlcuœã_sum
((
uöt8_t
*)&GPS_conf, (GPS_conf));

265 
	`ì¥om_wrôe_block
–(*)&
GPS_c⁄f
, (*Ë(
PROFILES
 * (
c⁄f
Ë+ (
globÆ_c⁄f
)), (GPS_conf) );

266 
	}
}

269 
boﬁ
 
	$ªˇŒGPSc⁄f
() {

270 
	`ì¥om_ªad_block
((*)&
GPS_c⁄f
, (*)(
PROFILES
 * (
c⁄f
Ë+ (
globÆ_c⁄f
)), (GPS_conf));

271 if(
	`ˇlcuœã_sum
((
uöt8_t
*)&
GPS_c⁄f
, (GPS_c⁄f)Ë!GPS_c⁄f.
checksum
) {

272 
	`lﬂdGPSdeÁu…s
();

273  
Ál£
;

275  
åue
;

276 
	}
}

279 
	$lﬂdGPSdeÁu…s
() {

281 
uöt8_t
 *
±r
 = (uöt8_à*Ë&
GPS_c⁄f
;

282 
i
=0;i<(
GPS_c⁄f
);i++Ë*
±r
++ = 0;

284 #i‡
	`deföed
(
GPS_FILTERING
)

285 
GPS_c⁄f
.
fûãrög
 = 1;

287 #i‡
	`deföed
 (
GPS_LEAD_FILTER
)

288 
GPS_c⁄f
.
Àad_fûãr
 = 1;

290 #i‡
	`deföed
 (
DONT_RESET_HOME_AT_ARM
)

291 
GPS_c⁄f
.
d⁄t_ª£t_home_©_¨m
 = 1;

293 
GPS_c⁄f
.
«v_c⁄åﬁs_hódög
 = 
NAV_CONTROLS_HEADING
;

294 
GPS_c⁄f
.
«v_èû_fú°
 = 
NAV_TAIL_FIRST
;

295 
GPS_c⁄f
.
«v_πh_èkeoff_hódög
 = 
NAV_SET_TAKEOFF_HEADING
;

296 
GPS_c⁄f
.
¶ow_«v
 = 
NAV_SLOW_NAV
;

297 
GPS_c⁄f
.
waô_f‹_πh_Æt
 = 
WAIT_FOR_RTH_ALT
;

299 
GPS_c⁄f
.
ign‹e_thrŸée
 = 
IGNORE_THROTTLE
;

300 
GPS_c⁄f
.
èkeovî_b¨o
 = 
NAV_TAKEOVER_BARO
;

302 
GPS_c⁄f
.
wp_ødius
 = 
GPS_WP_RADIUS
;

303 
GPS_c⁄f
.
ß„_wp_di°™˚
 = 
SAFE_WP_DISTANCE
;

304 
GPS_c⁄f
.
«v_max_Ætôude
 = 
MAX_NAV_ALTITUDE
;

305 
GPS_c⁄f
.
«v_•ìd_max
 = 
NAV_SPEED_MAX
;

306 
GPS_c⁄f
.
«v_•ìd_mö
 = 
NAV_SPEED_MIN
;

307 
GPS_c⁄f
.
¸os°øck_gaö
 = 
CROSSTRACK_GAIN
 * 100;

308 
GPS_c⁄f
.
«v_b™k_max
 = 
NAV_BANK_MAX
;

309 
GPS_c⁄f
.
πh_Ætôude
 = 
RTH_ALTITUDE
;

310 
GPS_c⁄f
.
„n˚
 = 
FENCE_DISTANCE
;

311 
GPS_c⁄f
.
œnd_•ìd
 = 
LAND_SPEED
;

312 
GPS_c⁄f
.
max_wp_numbî
 = 
	`gëMaxWPNumbî
();

313 
	`wrôeGPSc⁄f
();

314 
	}
}

318 
	$°‹eWP
() {

319 i‡(
missi⁄_°ï
.
numbî
 >254) ;

320 
missi⁄_°ï
.
checksum
 = 
	`ˇlcuœã_sum
((
uöt8_t
*)&mission_step, (mission_step));

321 
	`ì¥om_wrôe_block
((*)&
missi⁄_°ï
, (*)(
PROFILES
 * (
c⁄f
Ë+ (
globÆ_c⁄f
Ë+ (
GPS_c⁄f
Ë+((missi⁄_°ï)*missi⁄_°ï.
numbî
)),(mission_step));

322 
	}
}

326 
boﬁ
 
	$ªˇŒWP
(
uöt8_t
 
wp_numbî
) {

327 i‡(
wp_numbî
 > 254Ë 
Ál£
;

328 
	`ì¥om_ªad_block
((*)&
missi⁄_°ï
, (*)(
PROFILES
 * (
c⁄f
Ë+ (
globÆ_c⁄f
)+(
GPS_c⁄f
)+((missi⁄_°ï)*
wp_numbî
)), (mission_step));

329 if(
	`ˇlcuœã_sum
((
uöt8_t
*)&
missi⁄_°ï
, (missi⁄_°ï)Ë!missi⁄_°ï.
checksum
Ë 
Ál£
;

330  
åue
;

331 
	}
}

334 
uöt8_t
 
	$gëMaxWPNumbî
() {

335 
uöt16_t
 
fú°_avaû
 = 
PROFILES
*(
c⁄f
Ë+ (
globÆ_c⁄f
)+(
GPS_c⁄f
)+ 1;

336 
uöt16_t
 
œ°_avaû
 = 
E2END
 - 
PLOG_SIZE
 - 4;

337 
uöt16_t
 
wp_num
 = (
œ°_avaû
-
fú°_avaû
)/(
missi⁄_°ï
);

338 i‡(
wp_num
>254) wp_num = 254;

339  
wp_num
;

340 
	}
}

	@EEPROM.h

1 #i‚de‡
EEPROM_H_


2 
	#EEPROM_H_


	)

4 
ªadGlobÆSë
();

5 
boﬁ
 
ªadEEPROM
();

6 
wrôe
(, 
uöt8_t
);

7 
upd©e_c⁄°™ts
();

8 
wrôeGlobÆSë
(
uöt8_t
 
b
);

9 
wrôeP¨ams
(
uöt8_t
 
b
);

10 
LﬂdDeÁu…s
();

11 
ªadPLog
();

12 
wrôePLog
();

13 
uöt8_t
 
ˇlcuœã_sum
(uöt8_à*
cb
, uöt8_à
siz
);

15 #i‡
deföed
(
GPS
)

18 
°‹eWP
();

19 
boﬁ
 
ªˇŒWP
(
uöt8_t
);

21 
uöt8_t
 
gëMaxWPNumbî
();

23 
lﬂdGPSdeÁu…s
();

24 
wrôeGPSc⁄f
() ;

25 
boﬁ
 
ªˇŒGPSc⁄f
();

	@GPS.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"ty≥s.h
"

5 
	~"GPS.h
"

6 
	~"Sîül.h
"

7 
	~"Sís‹s.h
"

8 
	~"Mu…iWii.h
"

9 
	~"EEPROM.h
"

10 
	~<m©h.h
>

12 #i‡
GPS


16 
GPS_bórög
(
öt32_t
* 
œt1
, i¡32_t* 
l⁄1
, i¡32_t* 
œt2
, i¡32_t* 
l⁄2
, i¡32_t* 
bórög
);

17 
GPS_di°™˚_cm
(
öt32_t
* 
œt1
, i¡32_t* 
l⁄1
, i¡32_t* 
œt2
, i¡32_t* 
l⁄2
,
uöt32_t
* 
di°
);

18 
GPS_ˇlc_vñocôy
();

19 
GPS_ˇlc_loˇti⁄_îr‹
–
öt32_t
* 
èrgë_œt
, i¡32_t* 
èrgë_ g
, i¡32_t* 
gps_œt
, i¡32_t* 
gps_ g
 );

20 
GPS_ˇlc_poshﬁd
();

21 
uöt16_t
 
GPS_ˇlc_desúed_•ìd
(uöt16_à
max_•ìd
, 
boﬁ
 
_¶ow
);

22 
GPS_ˇlc_«v_øã
(
uöt16_t
 
max_•ìd
);

23 
öt32_t
 
wøp_18000
(öt32_à
™g
);

24 
boﬁ
 
check_mis£d_wp
();

25 
GPS_ˇlc_l⁄gôude_sˇlög
(
öt32_t
 
œt
);

26 
GPS_upd©e_¸os°øck
();

27 
öt32_t
 
wøp_36000
(öt32_à
™g
);

30 
˛órNav
();

31 #i‡
deföed
(
FIXEDWING
)

32 
	gNavîr‹I
,
	gA…îr‹I
;

33 
öt16_t
 
	gœ°A…Diff
,
	gœ°NavDiff
,
	gS≥edBoo°
;

34 
öt16_t
 
	gA…Hi°
[
GPS_UPD_HZ
];

35 
öt16_t
 
	gNavDif
[
GPS_UPD_HZ
];

39 
öt32_t
 
	g«v_bórög
;

45 #i‡
deföed
(
UBLOX
Ë|| deföed (
MTK_BINARY19
)

46 
	#GPS_LAG
 0.5f

47 #ñ£

	)

48 
	#GPS_LAG
 1.0f

50 

	)

51 
öt32_t
 
	gGPS_co‹d_Àad
[2];

53 ˛as†
	cLódFûãr
 {

54 
	mpublic
:

55 
	$LódFûãr
() :

56 
	$_œ°_vñocôy
(0) {

60 
öt32_t
 
	`gë_posôi⁄
(öt32_à
pos
, 
öt16_t
 
vñ
, 
œg_ö_£c⁄ds
 = 1.0);

61 
	$˛ór
(Ë{ 
_œ°_vñocôy
 = 0; 
	}
}

63 
	g¥iv©e
:

64 
öt16_t
 
_œ°_vñocôy
;

68 
öt32_t
 
	gLódFûãr
::
	$gë_posôi⁄
(
öt32_t
 
pos
, 
öt16_t
 
vñ
, 
œg_ö_£c⁄ds
)

70 
öt16_t
 
ac˚l_c⁄åibuti⁄
 = (
vñ
 - 
_œ°_vñocôy
Ë* 
œg_ö_£c⁄ds
 *Üag_in_seconds;

71 
öt16_t
 
vñ_c⁄åibuti⁄
 = 
vñ
 * 
œg_ö_£c⁄ds
;

74 
_œ°_vñocôy
 = 
vñ
;

76  
pos
 + 
vñ_c⁄åibuti⁄
 + 
ac˚l_c⁄åibuti⁄
;

77 
	}
}

80 
LódFûãr
 
	gxLódFûãr
;

81 
LódFûãr
 
	gyLódFûãr
;

83 
	sPID_PARAM_
 {

84 
	mkP
;

85 
	mkI
;

86 
	mkD
;

87 
	mImax
;

88 } 
	tPID_PARAM
;

90 
PID_PARAM
 
	gposhﬁdPID_PARAM
;

91 
PID_PARAM
 
	gposhﬁd_øãPID_PARAM
;

92 
PID_PARAM
 
	g«vPID_PARAM
;

93 
PID_PARAM
 
	gÆtPID_PARAM
;

95 
	sPID_
 {

96 
	möãgøt‹
;

97 
öt32_t
 
	mœ°_öput
;

98 
	mœ°dîiv©ive
;

99 
	mouçut
;

100 
	mdîiv©ive
;

101 } 
	tPID
;

102 
PID
 
	gposhﬁdPID
[2];

103 
PID
 
	gposhﬁd_øãPID
[2];

104 
PID
 
	g«vPID
[2];

106 
öt32_t
 
	$gë_P
(
öt32_t
 
îr‹
, 
PID_PARAM_
* 
pid
) {

107  ()
îr‹
 * 
pid
->
kP
;

108 
	}
}

110 
öt32_t
 
	$gë_I
(
öt32_t
 
îr‹
, * 
dt
, 
PID_
* 
pid
, 
PID_PARAM_
* 
pid_∑øm
) {

111 
pid
->
öãgøt‹
 +(()
îr‹
 * 
pid_∑øm
->
kI
Ë* *
dt
;

112 
pid
->
öãgøt‹
 = 
	`c⁄°øö
’id->öãgøt‹,-
pid_∑øm
->
Imax
,pid_param->Imax);

113  
pid
->
öãgøt‹
;

114 
	}
}

116 
öt32_t
 
	$gë_D
(
öt32_t
 
öput
, * 
dt
, 
PID_
* 
pid
, 
PID_PARAM_
* 
pid_∑øm
) {

117 
pid
->
dîiv©ive
 = (
öput
 -Öid->
œ°_öput
Ë/ *
dt
;

120 
fûãr
 = 7.9577e-3;

130 
pid
->
dîiv©ive
 =Öid->
œ°dîiv©ive
 + (*
dt
 / ( 
fûãr
 + *dt)) * (pid->derivative -Öid->lastderivative);

132 
pid
->
œ°_öput
 = 
öput
;

133 
pid
->
œ°dîiv©ive
 =Öid->
dîiv©ive
;

135  
pid_∑øm
->
kD
 * 
pid
->
dîiv©ive
;

136 
	}
}

138 
	$ª£t_PID
(
PID_
* 
pid
) {

139 
pid
->
öãgøt‹
 = 0;

140 
pid
->
œ°_öput
 = 0;

141 
pid
->
œ°dîiv©ive
 = 0;

142 
	}
}

144 
	#_X
 1

	)

145 
	#_Y
 0

	)

147 
	#RADX100
 0.000174532925

	)

149 
uöt8_t
 
	gœnd_dëe˘
;

150 
uöt32_t
 
	gœnd_£âÀ_timî
;

151 
uöt8_t
 
	gGPS_Føme
;

153 
	gdT«v
;

154 
öt16_t
 
	ga˘uÆ_•ìd
[2] = {0,0};

155 
	gGPS_sˇÀL⁄Down
;

159 
öt16_t
 
	gøã_îr‹
[2];

160 
öt32_t
 
	gîr‹
[2];

162 
öt32_t
 
	gGPS_WP
[2];

163 
öt32_t
 
	gGPS_FROM
[2];

164 
öt32_t
 
	gèrgë_bórög
;

165 
öt32_t
 
	g‹igöÆ_èrgë_bórög
;

166 
öt16_t
 
	g¸os°øck_îr‹
;

167 
uöt32_t
 
	gwp_di°™˚
;

168 
uöt16_t
 
	gwaypoöt_•ìd_gov
;

175 
	#GPS_FILTER_VECTOR_LENGTH
 5

	)

177 
uöt8_t
 
	gGPS_fûãr_ödex
 = 0;

178 
öt32_t
 
	gGPS_fûãr
[2][
GPS_FILTER_VECTOR_LENGTH
];

179 
öt32_t
 
	gGPS_fûãr_sum
[2];

180 
öt32_t
 
	gGPS_ªad
[2];

181 
öt32_t
 
	gGPS_fûãªd
[2];

182 
öt32_t
 
	gGPS_degªe
[2];

183 
uöt16_t
 
	g‰a˘i⁄3
[2];

185 
öt16_t
 
	g«v_èkeoff_bórög
;

191 
uöt8_t
 
	$GPS_Compuã
() {

192 
axis
;

193 
uöt32_t
 
di°
;

194 
öt32_t
 
dú
;

195 
uöt32_t
 
«v_lo›Timî
;

198 i‡(
GPS_Føme
 == 0)  0; GPS_Frame = 0;

201 i‡(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 5) {

202 #i‡!
	`deföed
(
DONT_RESET_HOME_AT_ARM
)

203 i‡(!
f
.
ARMED
Ë{f.
GPS_FIX_HOME
 = 0;}

205 i‡(!
f
.
GPS_FIX_HOME
 && f.
ARMED
) {

206 
	`GPS_ª£t_home_posôi⁄
();

209 i‡(
GPS_c⁄f
.
fûãrög
) {

210 
GPS_fûãr_ödex
 = (GPS_fûãr_ödex+1Ë% 
GPS_FILTER_VECTOR_LENGTH
;

211 
axis
 = 0;áxis< 2;áxis++) {

212 
GPS_ªad
[
axis
] = 
GPS_co‹d
[axis];

213 
GPS_degªe
[
axis
] = 
GPS_ªad
[axis] / 10000000;

217 
‰a˘i⁄3
[
axis
] = (
GPS_ªad
[axis]- 
GPS_degªe
[axis]*10000000) / 10000;

219 
GPS_fûãr_sum
[
axis
] -
GPS_fûãr
[axis][
GPS_fûãr_ödex
];

220 
GPS_fûãr
[
axis
][
GPS_fûãr_ödex
] = 
GPS_ªad
[axis] - (
GPS_degªe
[axis]*10000000);

221 
GPS_fûãr_sum
[
axis
] +
GPS_fûãr
[axis][
GPS_fûãr_ödex
];

222 
GPS_fûãªd
[
axis
] = 
GPS_fûãr_sum
[axis] / 
GPS_FILTER_VECTOR_LENGTH
 + (
GPS_degªe
[axis]*10000000);

223 i‡–
NAV_°©e
 =
NAV_STATE_HOLD_INFINIT
 || NAV_°©ê=
NAV_STATE_HOLD_TIMED
) {

224 i‡–
‰a˘i⁄3
[
axis
]>1 && fø˘i⁄3[axis]<999 ) 
GPS_co‹d
[axis] = 
GPS_fûãªd
[axis];

231 
dT«v
 = ()(
	`mûlis
(Ë- 
«v_lo›Timî
)/ 1000.0;

232 
«v_lo›Timî
 = 
	`mûlis
();

235 
dT«v
 = 
	`mö
(dTnav, 1.0);

238 
	`GPS_bórög
(&
GPS_co‹d
[
LAT
],&GPS_co‹d[
LON
],&
GPS_home
[LAT],&GPS_home[LON],&
dú
);

239 
	`GPS_di°™˚_cm
(&
GPS_co‹d
[
LAT
],&GPS_co‹d[
LON
],&
GPS_home
[LAT],&GPS_home[LON],&
di°
);

240 
GPS_di°™˚ToHome
 = 
di°
/100;

241 
GPS_dúe˘i⁄ToHome
 = 
dú
/100;

243 i‡(!
f
.
GPS_FIX_HOME
) {

244 
GPS_di°™˚ToHome
 = 0;

245 
GPS_dúe˘i⁄ToHome
 = 0;

250 i‡((
GPS_c⁄f
.
„n˚
 > 0Ë&& (GPS_c⁄f.„n˚ < 
GPS_di°™˚ToHome
Ë&& (
f
.
GPS_mode
 !
GPS_MODE_RTH
) ) {

251 
	`öô_RTH
();

255 
	`GPS_ˇlc_vñocôy
();

258 i‡(
f
.
GPS_mode
 !
GPS_MODE_NONE
) {

260 
	`GPS_bórög
(&
GPS_co‹d
[
LAT
],&GPS_co‹d[
LON
],&
GPS_WP
[LAT],&GPS_WP[LON],&
èrgë_bórög
);

261 i‡(
GPS_c⁄f
.
Àad_fûãr
) {

262 
	`GPS_di°™˚_cm
(&
GPS_co‹d_Àad
[
LAT
],&GPS_co‹d_Àad[
LON
],&
GPS_WP
[LAT],&GPS_WP[LON],&
wp_di°™˚
);

263 
	`GPS_ˇlc_loˇti⁄_îr‹
(&
GPS_WP
[
LAT
],&GPS_WP[
LON
],&
GPS_co‹d_Àad
[LAT],&GPS_coord_lead[LON]);

265 
	`GPS_di°™˚_cm
(&
GPS_co‹d
[
LAT
],&GPS_co‹d[
LON
],&
GPS_WP
[LAT],&GPS_WP[LON],&
wp_di°™˚
);

266 
	`GPS_ˇlc_loˇti⁄_îr‹
(&
GPS_WP
[
LAT
],&GPS_WP[
LON
],&
GPS_co‹d
[LAT],&GPS_coord[LON]);

271 i‡–!((
NAV_°©e
 =
NAV_STATE_HOLD_INFINIT
Ë&& (
Æt_ch™ge_Êag
 =
REACHED_ALT
))) {

272 i‡(!
f
.
LAND_IN_PROGRESS
) {

273 
Æt_to_hﬁd
 = 
	`gë_√w_Ætôude
();

274 
A…Hﬁd
 = 
Æt_to_hﬁd
;

278 
öt16_t
 
•ìd
 = 0;

279 
uöt16_t
 
dyn_wp_ødius
 = 
GPS_c⁄f
.
wp_ødius
;

280 #i‡
	`deföed
(
FIXEDWING
)

281 
dyn_wp_ødius
 = 
GPS_•ìd
 / 
GPS_UPD_HZ
;

282 
dyn_wp_ødius
 = 
	`max
–dyn_wp_ødiu†, 
GPS_c⁄f
.
wp_ødius
 );

284 
NAV_°©e
)

286 
NAV_STATE_NONE
:

288 #i‡!
	`deföed
 (
SLIM_WING
)

290 
NAV_STATE_LAND_START
:

291 
	`GPS_ˇlc_poshﬁd
();

292 
œnd_£âÀ_timî
 = 
	`mûlis
();

293 
NAV_°©e
 = 
NAV_STATE_LAND_SETTLE
;

296 
NAV_STATE_LAND_SETTLE
:

297 
	`GPS_ˇlc_poshﬁd
();

298 i‡(
	`mûlis
()-
œnd_£âÀ_timî
 > 5000)

299 
NAV_°©e
 = 
NAV_STATE_LAND_START_DESCENT
;

302 
NAV_STATE_LAND_START_DESCENT
:

303 
	`GPS_ˇlc_poshﬁd
();

304 
f
.
THROTTLE_IGNORED
 = 1;

305 
f
.
GPS_BARO_MODE
 = 1;

306 
œnd_dëe˘
 = 0;

307 
f
.
LAND_COMPLETED
 = 0;

308 
f
.
LAND_IN_PROGRESS
 = 1;

309 
NAV_°©e
 = 
NAV_STATE_LAND_IN_PROGRESS
;

312 
NAV_STATE_LAND_IN_PROGRESS
:

313 
	`GPS_ˇlc_poshﬁd
();

314 
	`check_œnd
();

315 i‡(
f
.
LAND_COMPLETED
) {

316 
«v_timî_°›
 = 
	`mûlis
() + 5000;

317 
NAV_°©e
 = 
NAV_STATE_LANDED
;

321 
NAV_STATE_LANDED
:

323 i‡(
rcD©a
[
THROTTLE
]<
MINCHECK
 || 
«v_timî_°›
 <
	`mûlis
()) {

324 
	`go_dißrm
();

325 
f
.
OK_TO_ARM
 = 0;

326 
NAV_°©e
 = 
NAV_STATE_NONE
;

327 
f
.
GPS_BARO_MODE
 = 0;

328 
f
.
LAND_COMPLETED
 = 0;

329 
f
.
LAND_IN_PROGRESS
 = 0;

330 
œnd_dëe˘
 = 0;

331 
f
.
THROTTLE_IGNORED
 = 0;

332 
	`GPS_ª£t_«v
();

335 
NAV_STATE_RTH_START
:

336 i‡((
Æt_ch™ge_Êag
 =
REACHED_ALT
Ë|| (!
GPS_c⁄f
.
waô_f‹_πh_Æt
)) {

337 
	`GPS_£t_√xt_wp
(&
GPS_home
[
LAT
],&GPS_home[
LON
], &
GPS_co‹d
[LAT], &GPS_coord[LON]);

338 
NAV_°©e
 = 
NAV_STATE_RTH_ENROUTE
;

339 
NAV_îr‹
 = 
NAV_ERROR_NONE
;

341 
	`GPS_ˇlc_poshﬁd
();

342 
NAV_îr‹
 = 
NAV_ERROR_WAIT_FOR_RTH_ALT
;

348 
NAV_STATE_HOLD_INFINIT
:

349 #i‚de‡
SLIM_WING


350 
	`GPS_ˇlc_poshﬁd
();

353 #i‡!
	`deföed
 (
SLIM_WING
)

355 
NAV_STATE_HOLD_TIMED
:

356 i‡(
«v_timî_°›
 == 0) {

357 
«v_timî_°›
 = 
	`mûlis
(Ë+ 1000*
«v_hﬁd_time
;

358 } i‡(
«v_timî_°›
 <
	`mûlis
()) {

359 i‡(
missi⁄_°ï
.
Êag
 !
MISSION_FLAG_END
) {

360 
NAV_°©e
 = 
NAV_STATE_PROCESS_NEXT
;

362 
NAV_îr‹
 = 
NAV_ERROR_TIMEWAIT
;

364 
	`GPS_ˇlc_poshﬁd
();

367 
NAV_STATE_RTH_START
:

368 i‡((
Æt_ch™ge_Êag
 =
REACHED_ALT
Ë|| (!
GPS_c⁄f
.
waô_f‹_πh_Æt
)) {

369 
	`GPS_£t_√xt_wp
(&
GPS_home
[
LAT
],&GPS_home[
LON
], &
GPS_co‹d
[LAT], &GPS_coord[LON]);

370 
NAV_°©e
 = 
NAV_STATE_RTH_ENROUTE
;

371 
NAV_îr‹
 = 
NAV_ERROR_NONE
;

373 
	`GPS_ˇlc_poshﬁd
();

374 
NAV_îr‹
 = 
NAV_ERROR_WAIT_FOR_RTH_ALT
;

378 
NAV_STATE_RTH_ENROUTE
:

379 
•ìd
 = 
	`GPS_ˇlc_desúed_•ìd
(
GPS_c⁄f
.
«v_•ìd_max
, GPS_c⁄f.
¶ow_«v
);

380 
	`GPS_ˇlc_«v_øã
(
•ìd
);

381 
	`GPS_adju°_hódög
();

382 i‡((
wp_di°™˚
 <
dyn_wp_ødius
Ë|| 
	`check_mis£d_wp
()) {

383 i‡(
missi⁄_°ï
.
∑ømëî1
 =0Ë
NAV_°©e
 = 
NAV_STATE_HOLD_INFINIT
;

384 
NAV_°©e
 = 
NAV_STATE_LAND_START
;

385 i‡(
GPS_c⁄f
.
«v_πh_èkeoff_hódög
Ë{ 
magHﬁd
 = 
«v_èkeoff_bórög
; }

389 
NAV_STATE_WP_ENROUTE
:

390 #i‡!
	`deföed
 (
SLIM_WING
)

391 
•ìd
 = 
	`GPS_ˇlc_desúed_•ìd
(
GPS_c⁄f
.
«v_•ìd_max
, GPS_c⁄f.
¶ow_«v
);

392 
	`GPS_ˇlc_«v_øã
(
•ìd
);

393 
	`GPS_adju°_hódög
();

396 i‡((
wp_di°™˚
 <
dyn_wp_ødius
Ë|| 
	`check_mis£d_wp
()) {

397 i‡(
missi⁄_°ï
.
a˘i⁄
 =
MISSION_LAND
) {

398 
NAV_°©e
 = 
NAV_STATE_LAND_START
;

399 
	`£t_√w_Ætôude
(
Æt
.
E°A…
);

400 } i‡(
missi⁄_°ï
.
Êag
 =
MISSION_FLAG_END
) {

401 
NAV_°©e
 = 
NAV_STATE_HOLD_INFINIT
;

402 
NAV_îr‹
 = 
NAV_ERROR_FINISH
;

403 } i‡(
missi⁄_°ï
.
a˘i⁄
 =
MISSION_HOLD_UNLIM
) {

404 
NAV_°©e
 = 
NAV_STATE_HOLD_INFINIT
;

405 
NAV_îr‹
 = 
NAV_ERROR_FINISH
;

406 } i‡(
missi⁄_°ï
.
a˘i⁄
 =
MISSION_HOLD_TIME
) {

407 
«v_hﬁd_time
 = 
missi⁄_°ï
.
∑ømëî1
;

408 
«v_timî_°›
 = 0;

409 
NAV_°©e
 = 
NAV_STATE_HOLD_TIMED
;

411 
NAV_°©e
 = 
NAV_STATE_PROCESS_NEXT
;

416 #i‡!
	`deföed
 (
SLIM_WING
)

420 
NAV_STATE_DO_JUMP
:

421 i‡(
jump_times
 < 0) {

422 
√xt_°ï
 = 
missi⁄_°ï
.
∑ømëî1
;

423 
NAV_°©e
 = 
NAV_STATE_PROCESS_NEXT
;

425 i‡(
jump_times
 == 0) {

426 
jump_times
 = -10;

427 i‡(
missi⁄_°ï
.
Êag
 =
MISSION_FLAG_END
) {

428 
NAV_°©e
 = 
NAV_STATE_HOLD_INFINIT
;

429 
NAV_îr‹
 = 
NAV_ERROR_FINISH
;

431 
NAV_°©e
 = 
NAV_STATE_PROCESS_NEXT
;

434 i‡(
jump_times
 > 0) {

435 
√xt_°ï
 = 
missi⁄_°ï
.
∑ømëî1
;

436 
NAV_°©e
 = 
NAV_STATE_PROCESS_NEXT
;

437 
jump_times
--;

440 
NAV_STATE_PROCESS_NEXT
:

441 
NAV_îr‹
 = 
NAV_ERROR_NONE
;

442 i‡(!
	`ªˇŒWP
(
√xt_°ï
)) {

443 
	`ab‹t_missi⁄
(
NAV_ERROR_WP_CRC
);

445 
missi⁄_°ï
.
a˘i⁄
)

448 
MISSION_WAYPOINT
:

449 
MISSION_HOLD_TIME
:

450 
MISSION_HOLD_UNLIM
:

451 
MISSION_LAND
:

452 
	`£t_√w_Ætôude
(
missi⁄_°ï
.
Ætôude
);

453 
	`GPS_£t_√xt_wp
(&
missi⁄_°ï
.
pos
[
LAT
], &missi⁄_°ï.pos[
LON
], &
GPS_¥ev
[LAT], &GPS_prev[LON]);

454 i‡((
wp_di°™˚
/100Ë>
GPS_c⁄f
.
ß„_wp_di°™˚
Ë
	`ab‹t_missi⁄
(
NAV_ERROR_TOOFAR
);

455 
NAV_°©e
 = 
NAV_STATE_WP_ENROUTE
;

456 
GPS_¥ev
[
LAT
] = 
missi⁄_°ï
.
pos
[LAT];

457 
GPS_¥ev
[
LON
] = 
missi⁄_°ï
.
pos
[LON];

459 
MISSION_RTH
:

460 
f
.
GPS_hód_£t
 = 0;

461 i‡(
GPS_c⁄f
.
πh_Ætôude
 =0 && 
missi⁄_°ï
.
Ætôude
 == 0)

462 
	`£t_√w_Ætôude
(
Æt
.
E°A…
);

464 
uöt32_t
 
πh_Æt
;

465 i‡(
missi⁄_°ï
.
Ætôude
 =0Ë
πh_Æt
 = 
GPS_c⁄f
.
πh_Ætôude
 * 100;

466 
πh_Æt
 = 
missi⁄_°ï
.
Ætôude
;

468 i‡(
Æt
.
E°A…
 < 
πh_Æt
Ë
	`£t_√w_Ætôude
(rth_alt);

469 
	`£t_√w_Ætôude
(
Æt
.
E°A…
);

471 
NAV_°©e
 = 
NAV_STATE_RTH_START
;

473 
MISSION_JUMP
:

474 i‡(
jump_times
 =-10Ëjump_time†
missi⁄_°ï
.
∑ømëî2
;

475 i‡(
missi⁄_°ï
.
∑ømëî1
 > 0 && missi⁄_°ï.∑ømëî1 < missi⁄_°ï.
numbî
)

476 
NAV_°©e
 = 
NAV_STATE_DO_JUMP
;

478 
	`ab‹t_missi⁄
(
NAV_ERROR_INVALID_JUMP
);

481 #i‡!
	`deföed
 (
SLIM_WING
)

482 
MISSION_SET_POI
:

483 
GPS_poi
[
LAT
] = 
missi⁄_°ï
.
pos
[LAT];

484 
GPS_poi
[
LON
] = 
missi⁄_°ï
.
pos
[LON];

485 
f
.
GPS_hód_£t
 = 1;

487 
MISSION_SET_HEADING
:

488 
GPS_poi
[
LAT
] = 0; GPS_poi[
LON
] = 0;

489 i‡(
missi⁄_°ï
.
∑ømëî1
 < 0Ë
f
.
GPS_hód_£t
 = 0;

491 
f
.
GPS_hód_£t
 = 1;

492 
GPS_dúe˘i⁄ToPoi
 = 
missi⁄_°ï
.
∑ømëî1
;

497 
	`ab‹t_missi⁄
(
NAV_ERROR_INVALID_DATA
);

500 
√xt_°ï
++;

507 
	}
}

510 
	$ab‹t_missi⁄
(
îr‹_code
) {

511 
	`GPS_£t_√xt_wp
(&
GPS_co‹d
[
LAT
], &GPS_co‹d[
LON
],&GPS_coord[LAT], &GPS_coord[LON]);

512 
NAV_îr‹
 = 
îr‹_code
;

513 
NAV_°©e
 = 
NAV_STATE_HOLD_INFINIT
;

514 
	}
}

515 #i‡!
deföed
 (
SLIM_WING
)

517 
	$GPS_adju°_hódög
() {

520 i‡(
f
.
GPS_hód_£t
) {

521 i‡(
GPS_poi
[
LAT
] == 0)

522 
magHﬁd
 = 
	`wøp_18000
((
GPS_dúe˘i⁄ToPoi
*100))/100;

524 
	`GPS_bórög
(&
GPS_co‹d
[
LAT
],&GPS_co‹d[
LON
],&
GPS_poi
[LAT],&GPS_poi[LON],&
GPS_dúe˘i⁄ToPoi
);

525 
	`GPS_di°™˚_cm
(&
GPS_co‹d
[
LAT
],&GPS_co‹d[
LON
],&
GPS_poi
[LAT],&GPS_poi[LON],&
wp_di°™˚
);

526 
magHﬁd
 = 
GPS_dúe˘i⁄ToPoi
 /100;

529 i‡(
GPS_c⁄f
.
«v_c⁄åﬁs_hódög
) {

530 i‡(
GPS_c⁄f
.
«v_èû_fú°
) {

531 
magHﬁd
 = 
	`wøp_18000
(
èrgë_bórög
-18000)/100;

533 
magHﬁd
 = 
	`wøp_18000
(
èrgë_bórög
)/100;

537 
	}
}

539 
	#LAND_DETECT_THRESHOLD
 40

540 
	#BAROPIDMIN
 -180

541 

	)

543 #i‡!
deföed
 (
SLIM_WING
)

546 
	$check_œnd
() {

548 i‡–(
	`abs
(
Æt
.
v¨io
Ë< 20Ë&& (
B¨oPID
 < 
BAROPIDMIN
)) {

549 i‡(!
f
.
LAND_COMPLETED
) {

550 if–
œnd_dëe˘
 < 
LAND_DETECT_THRESHOLD
) {

551 
œnd_dëe˘
++;

553 
f
.
LAND_COMPLETED
 = 1;

554 
œnd_dëe˘
 = 0;

559 
œnd_dëe˘
 = 0;

560 if(
f
.
LAND_COMPLETED
) {

561 
f
.
LAND_COMPLETED
 = 0;

564 
	}
}

567 
öt32_t
 
	$gë_Ætôude_îr‹
() {

568  
Æt_to_hﬁd
 - 
Æt
.
E°A…
;

569 
	}
}

571 
	$˛ór_√w_Ætôude
() {

572 
Æt_ch™ge_Êag
 = 
REACHED_ALT
;

573 
	}
}

575 
	$f‹˚_√w_Ætôude
(
öt32_t
 
_√w_Æt
) {

576 
Æt_to_hﬁd
 = 
_√w_Æt
;

577 
èrgë_Ætôude
 = 
_√w_Æt
;

578 
Æt_ch™ge_Êag
 = 
REACHED_ALT
;

579 
	}
}

581 
	$£t_√w_Ætôude
(
öt32_t
 
_√w_Æt
) {

583 if(
_√w_Æt
 > 
GPS_c⁄f
.
«v_max_Ætôude
*100) _new_alt = GPS_conf.nav_max_altitude * 100;

584 if(
_√w_Æt
 =
Æt
.
E°A…
 || 
f
.
Fixed_Wög_Nav
){

585 
	`f‹˚_√w_Ætôude
(
_√w_Æt
);

589 
Æt_to_hﬁd
 = 
Æt
.
E°A…
;

591 
Æt_ch™ge_timî
 = 
	`mûlis
();

593 
èrgë_Ætôude
 = 
_√w_Æt
;

595 
Æt_ch™ge
 = 0;

597 
‹igöÆ_Ætôude
 = 
Æt
.
E°A…
;

599 if(
èrgë_Ætôude
 > 
‹igöÆ_Ætôude
){

601 
Æt_ch™ge_Êag
 = 
ASCENDING
;

602 } if(
èrgë_Ætôude
 < 
‹igöÆ_Ætôude
){

604 
Æt_ch™ge_Êag
 = 
DESCENDING
;

607 
Æt_ch™ge_Êag
 = 
REACHED_ALT
;

609 
	}
}

611 
öt32_t
 
	$gë_√w_Ætôude
() {

613 if(
Æt_ch™ge_Êag
 =
ASCENDING
) {

615 if(
Æt
.
E°A…
 >
èrgë_Ætôude
Ë
Æt_ch™ge_Êag
 = 
REACHED_ALT
;

617 if(
Æt_to_hﬁd
 >
èrgë_Ætôude
) Åarget_altitude;

618 } i‡(
Æt_ch™ge_Êag
 =
DESCENDING
) {

620 if(
Æt
.
E°A…
 <
èrgë_Ætôude
Ë
Æt_ch™ge_Êag
 = 
REACHED_ALT
;

622 if(
Æt_to_hﬁd
 <
èrgë_Ætôude
) Åarget_altitude;

625 if(
Æt_ch™ge_Êag
 =
REACHED_ALT
Ë 
èrgë_Ætôude
;

627 
öt32_t
 
diff
 = 
	`abs
(
Æt_to_hﬁd
 - 
èrgë_Ætôude
);

630 
öt8_t
 
_sˇÀ
 = 4;

632 i‡(
Æt_to_hﬁd
 < 
èrgë_Ætôude
) {

634 if(
diff
 < 200Ë
_sˇÀ
 = 4;

635 
_sˇÀ
 = 3;

638 if(
diff
 < 400Ë
_sˇÀ
 = 5;

639 if(
diff
 < 100Ë
_sˇÀ
 = 6;

645 
öt32_t
 
ch™ge
 = (
	`mûlis
(Ë- 
Æt_ch™ge_timî
Ë>> 
_sˇÀ
;

647 if(
Æt_ch™ge_Êag
 =
ASCENDING
){

648 
Æt_ch™ge
 +
ch™ge
;

650 
Æt_ch™ge
 -
ch™ge
;

653 
Æt_ch™ge_timî
 = 
	`mûlis
();

655  
‹igöÆ_Ætôude
 + 
Æt_ch™ge
;

656 
	}
}

665 
öt16_t
 
	$c⁄°øö_öt16
(
öt16_t
 
amt
, i¡16_à
low
, i¡16_à
high
) {

666  ((
amt
)<(
low
)?÷ow):(◊mt)>(
high
)?(high):(amt)));

667 
	}
}

672 
	$GPS_ˇlc_l⁄gôude_sˇlög
(
öt32_t
 
œt
) {

673 
GPS_sˇÀL⁄Down
 = 
	`cos
(
œt
 * 1.0e-7f * 0.01745329251f);

674 
	}
}

679 
	$GPS_£t_√xt_wp
(
öt32_t
* 
œt_to
, i¡32_t* 
l⁄_to
, i¡32_t* 
œt_‰om
, i¡32_t* 
l⁄_‰om
) {

680 
GPS_WP
[
LAT
] = *
œt_to
;

681 
GPS_WP
[
LON
] = *
l⁄_to
;

683 
GPS_FROM
[
LAT
] = *
œt_‰om
;

684 
GPS_FROM
[
LON
] = *
l⁄_‰om
;

685 
	`GPS_ˇlc_l⁄gôude_sˇlög
(*
œt_to
);

687 #ifde‡
FIXEDWING


689 i‡(
f
.
CRUISE_MODE
){

690 
	#GEO_SKALEFACT
 89.832f

691 
öt32_t
 
hh
 = 
©t
.
hódög
;

	)

692 i‡(
hh
 >180) hh -=360 ;

694 
sˇÀr
=–
GEO_SKALEFACT
/
GPS_sˇÀL⁄Down
Ë* 
GPS_c⁄f
.
ß„_wp_di°™˚
;

695 
wp_œt_diff
 = 
	`cos
(
hh
*0.0174532925fË* 
GPS_sˇÀL⁄Down
;

696 
wp_l⁄_diff
 = 
	`sö
(
hh
*0.0174532925f);

697 
GPS_WP
[
LAT
] +=
wp_œt_diff
*
sˇÀr
;

698 
GPS_WP
[
LON
] +=
wp_l⁄_diff
*
sˇÀr
;

702 
	`GPS_bórög
(&
GPS_FROM
[
LAT
],&GPS_FROM[
LON
],&
GPS_WP
[LAT],&GPS_WP[LON],&
èrgë_bórög
);

703 
	`GPS_di°™˚_cm
(&
GPS_FROM
[
LAT
],&GPS_FROM[
LON
],&
GPS_WP
[LAT],&GPS_WP[LON],&
wp_di°™˚
);

704 
	`GPS_ˇlc_loˇti⁄_îr‹
(&
GPS_WP
[
LAT
],&GPS_WP[
LON
],&
GPS_FROM
[LAT],&GPS_FROM[LON]);

705 
waypoöt_•ìd_gov
 = 
GPS_c⁄f
.
«v_•ìd_mö
;

706 
‹igöÆ_èrgë_bórög
 = 
èrgë_bórög
;

707 
	`˛órNav
();

708 
	}
}

713 
boﬁ
 
	$check_mis£d_wp
() {

714 
öt32_t
 
ãmp
;

715 
ãmp
 = 
èrgë_bórög
 - 
‹igöÆ_èrgë_bórög
;

716 
ãmp
 = 
	`wøp_18000
(temp);

717  (
	`abs
(
ãmp
) > 10000);

718 
	}
}

724 
	$GPS_bórög
(
öt32_t
* 
œt1
, i¡32_t* 
l⁄1
, i¡32_t* 
œt2
, i¡32_t* 
l⁄2
, i¡32_t* 
bórög
) {

725 
öt32_t
 
off_x
 = *
l⁄2
 - *
l⁄1
;

726 
öt32_t
 
off_y
 = (*
œt2
 - *
œt1
Ë/ 
GPS_sˇÀL⁄Down
;

728 *
bórög
 = 9000 + 
	`©™2
(-
off_y
, 
off_x
) * 5729.57795f;

729 i‡(*
bórög
 < 0) *bearing += 36000;

730 
	}
}

732 
	$GPS_di°™˚_cm
(
öt32_t
* 
œt1
, i¡32_t* 
l⁄1
, i¡32_t* 
œt2
, i¡32_t* 
l⁄2
,
uöt32_t
* 
di°
) {

733 
dL©
 = ()(*
œt2
 - *
œt1
);

734 
dL⁄
 = ()(*
l⁄2
 - *
l⁄1
Ë* 
GPS_sˇÀL⁄Down
;

735 *
di°
 = 
	`sqπ
(
	`sq
(
dL©
Ë+ sq(
dL⁄
)) * 1.11318845f;

736 
	}
}

748 
	$GPS_ˇlc_vñocôy
(){

749 
öt16_t
 
•ìd_ﬁd
[2] = {0,0};

750 
öt32_t
 
œ°
[2] = {0,0};

751 
uöt8_t
 
öô
 = 0;

753 i‡(
öô
) {

754 
tmp
 = 1.0/
dT«v
;

755 
a˘uÆ_•ìd
[
_X
] = ()(
GPS_co‹d
[
LON
] - 
œ°
[LON]Ë* 
GPS_sˇÀL⁄Down
 * 
tmp
;

756 
a˘uÆ_•ìd
[
_Y
] = ()(
GPS_co‹d
[
LAT
] - 
œ°
[LAT]Ë* 
tmp
;

759 i‡(!
GPS_c⁄f
.
Àad_fûãr
) {

760 
a˘uÆ_•ìd
[
_X
] = (a˘uÆ_•ìd[_X] + 
•ìd_ﬁd
[_X]) / 2;

761 
a˘uÆ_•ìd
[
_Y
] = (a˘uÆ_•ìd[_Y] + 
•ìd_ﬁd
[_Y]) / 2;

763 
•ìd_ﬁd
[
_X
] = 
a˘uÆ_•ìd
[_X];

764 
•ìd_ﬁd
[
_Y
] = 
a˘uÆ_•ìd
[_Y];

767 
öô
=1;

769 
œ°
[
LON
] = 
GPS_co‹d
[LON];

770 
œ°
[
LAT
] = 
GPS_co‹d
[LAT];

772 i‡(
GPS_c⁄f
.
Àad_fûãr
) {

773 
GPS_co‹d_Àad
[
LON
] = 
xLódFûãr
.
	`gë_posôi⁄
(
GPS_co‹d
[LON], 
a˘uÆ_•ìd
[
_X
], 
GPS_LAG
);

774 
GPS_co‹d_Àad
[
LAT
] = 
yLódFûãr
.
	`gë_posôi⁄
(
GPS_co‹d
[LAT], 
a˘uÆ_•ìd
[
_Y
], 
GPS_LAG
);

776 
	}
}

787 
	$GPS_ˇlc_loˇti⁄_îr‹
–
öt32_t
* 
èrgë_œt
, i¡32_t* 
èrgë_ g
, i¡32_t* 
gps_œt
, i¡32_t* 
gps_ g
 ) {

788 
îr‹
[
LON
] = ()(*
èrgë_ g
 - *
gps_ g
Ë* 
GPS_sˇÀL⁄Down
;

789 
îr‹
[
LAT
] = *
èrgë_œt
 - *
gps_œt
;

790 
	}
}

792 #i‡!
deföed
 (
SLIM_WING
)

798 
	$GPS_ˇlc_poshﬁd
() {

799 
öt32_t
 
d
;

800 
öt32_t
 
èrgë_•ìd
;

801 
uöt8_t
 
axis
;

803 
axis
=0;axis<2;axis++) {

804 
èrgë_•ìd
 = 
	`gë_P
(
îr‹
[
axis
], &
poshﬁdPID_PARAM
);

805 
èrgë_•ìd
 = 
	`c⁄°øö
(target_speed,-100,100);

806 
øã_îr‹
[
axis
] = 
èrgë_•ìd
 - 
a˘uÆ_•ìd
[axis];

808 
«v
[
axis
] =

809 
	`gë_P
(
øã_îr‹
[
axis
], &
poshﬁd_øãPID_PARAM
)

810 +
	`gë_I
(
øã_îr‹
[
axis
] + 
îr‹
[axis], &
dT«v
, &
poshﬁd_øãPID
[axis], &
poshﬁd_øãPID_PARAM
);

812 
d
 = 
	`gë_D
(
îr‹
[
axis
], &
dT«v
, &
poshﬁd_øãPID
[axis], &
poshﬁd_øãPID_PARAM
);

814 
d
 = 
	`c⁄°øö
(d, -2000, 2000);

817 if(
	`abs
(
a˘uÆ_•ìd
[
axis
]Ë< 50Ë
d
 = 0;

819 
«v
[
axis
] +=
d
;

821 
«v
[
axis
] = 
	`c⁄°øö_öt16
“av[axis], -
GPS_c⁄f
.
«v_b™k_max
, GPS_conf.nav_bank_max);

822 
«vPID
[
axis
].
öãgøt‹
 = 
poshﬁd_øãPID
[axis].integrator;

824 
	}
}

828 
	$GPS_ˇlc_«v_øã
–
uöt16_t
 
max_•ìd
) {

829 
åig
[2];

830 
öt32_t
 
èrgë_•ìd
[2];

831 
öt32_t
 
tût
;

832 
uöt8_t
 
axis
;

834 
	`GPS_upd©e_¸os°øck
();

835 
öt16_t
 
¸oss_•ìd
 = 
¸os°øck_îr‹
 * (
GPS_c⁄f
.
¸os°øck_gaö
 / 100.0);

836 
¸oss_•ìd
 = 
	`c⁄°øö
(cross_speed,-200,200);

837 
¸oss_•ìd
 = -cross_speed;

839 
ãmp
 = (9000»- 
èrgë_bórög
Ë* 
RADX100
;

840 
åig
[
_X
] = 
	`cos
(
ãmp
);

841 
åig
[
_Y
] = 
	`sö
(
ãmp
);

843 
èrgë_•ìd
[
_X
] = 
max_•ìd
 * 
åig
[_X] - 
¸oss_•ìd
 *Årig[
_Y
];

844 
èrgë_•ìd
[
_Y
] = 
¸oss_•ìd
 * 
åig
[
_X
] + 
max_•ìd
 *Årig[_Y];

846 
axis
=0;axis<2;axis++) {

847 
øã_îr‹
[
axis
] = 
èrgë_•ìd
[axis] - 
a˘uÆ_•ìd
[axis];

848 
øã_îr‹
[
axis
] = 
	`c⁄°øö
(rate_error[axis],-1000,1000);

849 
«v
[
axis
] =

850 
	`gë_P
(
øã_îr‹
[
axis
], &
«vPID_PARAM
)

851 +
	`gë_I
(
øã_îr‹
[
axis
], &
dT«v
, &
«vPID
[axis], &
«vPID_PARAM
)

852 +
	`gë_D
(
øã_îr‹
[
axis
], &
dT«v
, &
«vPID
[axis], &
«vPID_PARAM
);

855 
«v
[
axis
] = 
	`c⁄°øö_öt16
“av[axis], -
GPS_c⁄f
.
«v_b™k_max
, GPS_conf.nav_bank_max);

856 
poshﬁd_øãPID
[
axis
].
öãgøt‹
 = 
«vPID
[axis].integrator;

858 
	}
}

861 
	$GPS_upd©e_¸os°øck
() {

865 
ãmp
 = (
èrgë_bórög
 - 
‹igöÆ_èrgë_bórög
Ë* 
RADX100
;

866 
¸os°øck_îr‹
 = 
	`sö
(
ãmp
Ë* 
wp_di°™˚
;

867 #i‡
	`deföed
(
FIXEDWING
)

868 i‡(
	`abs
(
	`wøp_18000
(
èrgë_bórög
 - 
‹igöÆ_èrgë_bórög
)) < 4500) {

869 
¸os°øck_îr‹
 = 
	`sö
(
ãmp
Ë* (
wp_di°™˚
 * 
GPS_c⁄f
.
¸os°øck_gaö
 / 100.0 );

870 
«v_bórög
 = 
èrgë_bórög
 + 
	`c⁄°øö
(
¸os°øck_îr‹
, -3000, 3000);

871 
«v_bórög
 = 
	`wøp_36000
(nav_bearing);

873 
«v_bórög
 = 
èrgë_bórög
;

877 
	}
}

890 
uöt16_t
 
	$GPS_ˇlc_desúed_•ìd
(
uöt16_t
 
max_•ìd
, 
boﬁ
 
_¶ow
) {

891 if(
_¶ow
){

892 
max_•ìd
 = 
	`mö
(max_•ìd, 
wp_di°™˚
 / 2);

894 
max_•ìd
 = 
	`mö
(max_•ìd, 
wp_di°™˚
);

895 
max_•ìd
 = 
	`max
(max_•ìd, 
GPS_c⁄f
.
«v_•ìd_mö
);

899 if(
max_•ìd
 > 
waypoöt_•ìd_gov
){

900 
waypoöt_•ìd_gov
 +()(100.0 * 
dT«v
);

901 
max_•ìd
 = 
waypoöt_•ìd_gov
;

903  
max_•ìd
;

904 
	}
}

910 
öt32_t
 
	$wøp_36000
(
öt32_t
 
™g
) {

911 i‡(
™g
 > 36000)áng -= 36000;

912 i‡(
™g
 < 0)áng += 36000;

913  
™g
;

914 
	}
}

923 
	#DIGIT_TO_VAL
(
_x
Ë(_x - '0')

	)

924 
uöt32_t
 
	$GPS_co‹d_to_degªes
(* 
s
) {

925 *
p
, *
q
;

926 
uöt8_t
 
deg
 = 0, 
mö
 = 0;

927 
‰ac_mö
 = 0;

928 
uöt8_t
 
i
;

931 
p
 = 
s
; 
	`isdigô
(*p);Ö++) ;

932 
q
 = 
s
;

935 (
p
 - 
q
) > 2) {

936 i‡(
deg
)

937 
deg
 *= 10;

938 
deg
 +
	`DIGIT_TO_VAL
(*
q
++);

941 
p
 > 
q
) {

942 i‡(
mö
)

943 
mö
 *= 10;

944 
mö
 +
	`DIGIT_TO_VAL
(*
q
++);

949 i‡(*
p
 == '.') {

950 
q
 = 
p
 + 1;

951 
i
 = 0; i < 4; i++) {

952 
‰ac_mö
 *= 10;

953 i‡(
	`isdigô
(*
q
))

954 
‰ac_mö
 +*
q
++ - '0';

957  
deg
 * 10000000UL + (
mö
 * 1000000UL + 
‰ac_mö
*100UL) / 6;

958 
	}
}

961 
uöt16_t
 
	$gøb_fõlds
(* 
§c
, 
uöt8_t
 
mu…
) {

962 
uöt8_t
 
i
;

963 
uöt16_t
 
tmp
 = 0;

965 
i
=0; 
§c
[i]!=0; i++) {

966 if(
§c
[
i
] == '.') {

967 
i
++;

968 if(
mu…
==0) ;

969 
§c
[
i
+
mu…
] = 0;

971 
tmp
 *= 10;

972 if(
§c
[
i
] >='0' && src[i] <='9'Ë
tmp
 += src[i]-'0';

974  
tmp
;

975 
	}
}

977 
uöt8_t
 
	$hex_c
(
uöt8_t
 
n
) {

978 
n
 -= '0';

979 if(
n
>9)Ç -= 7;

980 
n
 &= 0x0F;

981  
n
;

982 
	}
}

987 
	$öô_RTH
() {

988 
f
.
GPS_mode
 = 
GPS_MODE_RTH
;

989 
f
.
GPS_BARO_MODE
 = 
åue
;

990 #ifde‡
FIXEDWING


991 
GPS_hﬁd
[
LAT
] = 
GPS_home
[LAT];

992 
GPS_hﬁd
[
LON
] = 
GPS_home
[LON];

993 
f
.
CLIMBOUT_FW
=1;

995 
GPS_hﬁd
[
LAT
] = 
GPS_co‹d
[LAT];

996 
GPS_hﬁd
[
LON
] = 
GPS_co‹d
[LON];

998 #ifde‡
ArdH©


999 
	`GPS_£t_√xt_wp
(&
GPS_hﬁd
[
LAT
],&GPS_hﬁd[
LON
], &GPS_hold[LAT], &GPS_hold[LON]);

1000 
NAV_∑u£d_©
 = 0;

1002 i‡(
GPS_c⁄f
.
πh_Ætôude
 =0Ë
	`£t_√w_Ætôude
(
Æt
.
E°A…
);

1004 i‡(
Æt
.
E°A…
 < 
GPS_c⁄f
.
πh_Ætôude
 * 100)

1005 
	`£t_√w_Ætôude
(
GPS_c⁄f
.
πh_Ætôude
 * 100);

1006 
	`£t_√w_Ætôude
(
Æt
.
E°A…
);

1008 #i‚de‡
ArdH©


1009 
NAV_∑u£d_©
 = 0;

1010 
	`GPS_£t_√xt_wp
(&
GPS_hﬁd
[
LAT
],&GPS_hﬁd[
LON
], &GPS_hold[LAT], &GPS_hold[LON]);

1012 
f
.
GPS_hód_£t
 = 0;

1013 
NAV_°©e
 = 
NAV_STATE_RTH_START
;

1014 
	}
}

1016 
	$GPS_ª£t_home_posôi⁄
() {

1017 i‡(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 5) {

1018 
GPS_home
[
LAT
] = 
GPS_co‹d
[LAT];

1019 
GPS_home
[
LON
] = 
GPS_co‹d
[LON];

1020 
	`GPS_ˇlc_l⁄gôude_sˇlög
(
GPS_co‹d
[
LAT
]);

1021 
«v_èkeoff_bórög
 = 
©t
.
hódög
;

1022 
GPS_home
[
ALT
] = 
GPS_Ætôude
;

1023 
f
.
GPS_FIX_HOME
 = 1;

1025 
	}
}

1028 
	$GPS_ª£t_«v
() {

1029 
uöt8_t
 
i
;

1031 
i
=0;i<2;i++) {

1032 
«v
[
i
] = 0;

1033 
	`ª£t_PID
(&
poshﬁdPID
[
i
]);

1034 
	`ª£t_PID
(&
poshﬁd_øãPID
[
i
]);

1035 
	`ª£t_PID
(&
«vPID
[
i
]);

1036 
NAV_°©e
 = 
NAV_STATE_NONE
;

1038 
jump_times
 = -10;

1040 
√xt_°ï
 = 1;

1042 
GPS_poi
[
LAT
] = 0; GPS_poi[
LON
] = 0;

1043 
f
.
GPS_hód_£t
 = 0;

1045 
	`˛órNav
();

1046 
	}
}

1049 
	$˛órNav
(){

1050 #i‡
	`deföed
(
FIXEDWING
)

1051 
Navîr‹I
=0;

1052 
A…îr‹I
=0;

1053 
œ°A…Diff
=0;
œ°NavDiff
=0;
S≥edBoo°
=0;

1054 
uöt8_t
 
i
=0;ò<
GPS_UPD_HZ
;i++){ 
A…Hi°
[i] = 0; 
NavDif
[i] =0;};

1056 
	}
}

1059 
	$GPS_£t_pids
() {

1060 
poshﬁdPID_PARAM
.
kP
 = ()
c⁄f
.
pid
[
PIDPOS
].
P8
/100.0;

1061 
poshﬁdPID_PARAM
.
kI
 = ()
c⁄f
.
pid
[
PIDPOS
].
I8
/100.0;

1062 
poshﬁdPID_PARAM
.
Imax
 = 
POSHOLD_RATE_IMAX
 * 100;

1064 
poshﬁd_øãPID_PARAM
.
kP
 = ()
c⁄f
.
pid
[
PIDPOSR
].
P8
/10.0;

1065 
poshﬁd_øãPID_PARAM
.
kI
 = ()
c⁄f
.
pid
[
PIDPOSR
].
I8
/100.0;

1066 
poshﬁd_øãPID_PARAM
.
kD
 = ()
c⁄f
.
pid
[
PIDPOSR
].
D8
/1000.0;

1067 
poshﬁd_øãPID_PARAM
.
Imax
 = 
POSHOLD_RATE_IMAX
 * 100;

1069 
«vPID_PARAM
.
kP
 = ()
c⁄f
.
pid
[
PIDNAVR
].
P8
/10.0;

1070 
«vPID_PARAM
.
kI
 = ()
c⁄f
.
pid
[
PIDNAVR
].
I8
/100.0;

1071 
«vPID_PARAM
.
kD
 = ()
c⁄f
.
pid
[
PIDNAVR
].
D8
/1000.0;

1072 
«vPID_PARAM
.
Imax
 = 
POSHOLD_RATE_IMAX
 * 100;

1074 #ifde‡
FIXEDWING


1075 
ÆtPID_PARAM
.
kP
 = ()
c⁄f
.
pid
[
PIDALT
].
P8
/10.0;

1076 
ÆtPID_PARAM
.
kI
 = ()
c⁄f
.
pid
[
PIDALT
].
I8
/100.0;

1077 
ÆtPID_PARAM
.
kD
 = ()
c⁄f
.
pid
[
PIDALT
].
D8
/1000.0;

1080 
	}
}

1082 
öt32_t
 
	$wøp_18000
(
öt32_t
 
™g
) {

1083 i‡(
™g
 > 18000)áng -= 36000;

1084 i‡(
™g
 < -18000)áng += 36000;

1085  
™g
;

1086 
	}
}

1106 #i‡
deföed
(
GPS_SERIAL
)

1111 #i‡
deföed
(
NMEA
)

1123 
	#FRAME_GGA
 1

	)

1124 
	#FRAME_RMC
 2

	)

1126 
	$GPS_SîülInô
() {

1127 
	`SîülO≥n
(
GPS_SERIAL
,
GPS_BAUD
);

1128 
	`dñay
(1000);

1129 
	}
}

1131 
boﬁ
 
	$GPS_√wFøme
(
uöt8_t
 
c
) {

1132 
uöt8_t
 
‰ameOK
 = 0;

1133 
uöt8_t
 
∑øm
 = 0, 
off£t
 = 0, 
∑rôy
 = 0;

1134 
°rög
[15];

1135 
uöt8_t
 
checksum_∑øm
, 
‰ame
 = 0;

1137 i‡(
c
 == '$') {

1138 
∑øm
 = 0; 
off£t
 = 0; 
∑rôy
 = 0;

1139 } i‡(
c
 == ',' || c == '*') {

1140 
°rög
[
off£t
] = 0;

1141 i‡(
∑øm
 == 0) {

1142 
‰ame
 = 0;

1143 i‡(
°rög
[0] ='G' && såög[1] ='P' && såög[2] ='G' && såög[3] ='G' && såög[4] ='A'Ë
‰ame
 = 
FRAME_GGA
;

1144 i‡(
°rög
[0] ='G' && såög[1] ='P' && såög[2] ='R' && såög[3] ='M' && såög[4] ='C'Ë
‰ame
 = 
FRAME_RMC
;

1145 } i‡(
‰ame
 =
FRAME_GGA
) {

1146 i‡(
∑øm
 =2Ë{
GPS_co‹d
[
LAT
] = 
	`GPS_co‹d_to_degªes
(
°rög
);}

1147 i‡(
∑øm
 =3 && 
°rög
[0] ='S'Ë
GPS_co‹d
[
LAT
] = -GPS_coord[LAT];

1148 i‡(
∑øm
 =4Ë{
GPS_co‹d
[
LON
] = 
	`GPS_co‹d_to_degªes
(
°rög
);}

1149 i‡(
∑øm
 =5 && 
°rög
[0] ='W'Ë
GPS_co‹d
[
LON
] = -GPS_coord[LON];

1150 i‡(
∑øm
 =6Ë{
f
.
GPS_FIX
 = (
°rög
[0] > '0');}

1151 i‡(
∑øm
 =7Ë{
GPS_numS©
 = 
	`gøb_fõlds
(
°rög
,0);}

1152 i‡(
∑øm
 =9Ë{
GPS_Ætôude
 = 
	`gøb_fõlds
(
°rög
,0);}

1153 } i‡(
‰ame
 =
FRAME_RMC
) {

1154 i‡(
∑øm
 =7Ë{
GPS_•ìd
 = ((
uöt32_t
)
	`gøb_fõlds
(
°rög
,1)*5144L)/1000L;}

1155 i‡(
∑øm
 =8Ë{
GPS_ground_cour£
 = 
	`gøb_fõlds
(
°rög
,1); }

1157 
∑øm
++; 
off£t
 = 0;

1158 i‡(
c
 ='*'Ë
checksum_∑øm
=1;

1159 
∑rôy
 ^
c
;

1160 } i‡(
c
 == '\r' || c == '\n') {

1161 i‡(
checksum_∑øm
) {

1162 
uöt8_t
 
checksum
 = 
	`hex_c
(
°rög
[0]);

1163 
checksum
 <<= 4;

1164 
checksum
 +
	`hex_c
(
°rög
[1]);

1165 i‡(
checksum
 =
∑rôy
Ë
‰ameOK
 = 1;

1167 
checksum_∑øm
=0;

1169 i‡(
off£t
 < 15Ë
°rög
[off£t++] = 
c
;

1170 i‡(!
checksum_∑øm
Ë
∑rôy
 ^
c
;

1172  
‰ameOK
 && (
‰ame
==
FRAME_GGA
);

1173 
	}
}

1181 #i‡
deföed
(
UBLOX
)

1182 
	#GPS_SV_MAXSATS
 16;

	)

1189 c⁄° 
	gUBLOX_INIT
[] 
	gPROGMEM
 = {

1204 
	subx_hódî
 {

1205 
uöt8_t
 
	m¥ómbÀ1
;

1206 
uöt8_t
 
	m¥ómbÀ2
;

1207 
uöt8_t
 
	mmsg_˛ass
;

1208 
uöt8_t
 
	mmsg_id
;

1209 
uöt16_t
 
	mÀngth
;

1211 
	subx_«v_po¶lh
 {

1212 
uöt32_t
 
	mtime
;

1213 
öt32_t
 
	ml⁄gôude
;

1214 
öt32_t
 
	mœtôude
;

1215 
öt32_t
 
	mÆtôude_ñlùsoid
;

1216 
öt32_t
 
	mÆtôude_m¶
;

1217 
uöt32_t
 
	mh‹iz⁄èl_accuøcy
;

1218 
uöt32_t
 
	mvîtiˇl_accuøcy
;

1220 
	subx_«v_sﬁuti⁄
 {

1221 
uöt32_t
 
	mtime
;

1222 
öt32_t
 
	mtime_n£c
;

1223 
öt16_t
 
	mwìk
;

1224 
uöt8_t
 
	mfix_ty≥
;

1225 
uöt8_t
 
	mfix_°©us
;

1226 
öt32_t
 
	me˚f_x
;

1227 
öt32_t
 
	me˚f_y
;

1228 
öt32_t
 
	me˚f_z
;

1229 
uöt32_t
 
	mposôi⁄_accuøcy_3d
;

1230 
öt32_t
 
	me˚f_x_vñocôy
;

1231 
öt32_t
 
	me˚f_y_vñocôy
;

1232 
öt32_t
 
	me˚f_z_vñocôy
;

1233 
uöt32_t
 
	m•ìd_accuøcy
;

1234 
uöt16_t
 
	mposôi⁄_DOP
;

1235 
uöt8_t
 
	mªs
;

1236 
uöt8_t
 
	mßãŒôes
;

1237 
uöt32_t
 
	mªs2
;

1239 
	subx_«v_vñ√d
 {

1240 
uöt32_t
 
	mtime
;

1241 
öt32_t
 
	m√d_n‹th
;

1242 
öt32_t
 
	m√d_ó°
;

1243 
öt32_t
 
	m√d_down
;

1244 
uöt32_t
 
	m•ìd_3d
;

1245 
uöt32_t
 
	m•ìd_2d
;

1246 
öt32_t
 
	mhódög_2d
;

1247 
uöt32_t
 
	m•ìd_accuøcy
;

1248 
uöt32_t
 
	mhódög_accuøcy
;

1251 
uöt8_t
 
	mchn
;

1252 
uöt8_t
 
	msvid
;

1253 
uöt8_t
 
	mÊags
;

1254 
uöt8_t
 
	mquÆôy
;

1255 
uöt8_t
 
	m˙o
;

1256 
uöt8_t
 
	mñev
;

1257 
öt16_t
 
	mazim
;

1258 
öt32_t
 
	m¥Res
;

1259 } 
	tubx_«v_svöfo_ch™√l
;

1261 
uöt32_t
 
	mtime
;

1262 
uöt8_t
 
	mnumCh
;

1263 
uöt8_t
 
	mglobÆFœgs
;

1264 
uöt16_t
 
	mª£rved2
;

1265 
ubx_«v_svöfo_ch™√l
 
	mch™√l
[16];

1266 } 
	tubx_«v_svöfo
;

1268 
	eubs_¥Ÿocﬁ_byãs
 {

1269 
	mPREAMBLE1
 = 0xb5,

1270 
	mPREAMBLE2
 = 0x62,

1271 
	mCLASS_NAV
 = 0x01,

1272 
	mCLASS_ACK
 = 0x05,

1273 
	mCLASS_CFG
 = 0x06,

1274 
	mMSG_ACK_NACK
 = 0x00,

1275 
	mMSG_ACK_ACK
 = 0x01,

1276 
	mMSG_POSLLH
 = 0x2,

1277 
	mMSG_STATUS
 = 0x3,

1278 
	mMSG_SOL
 = 0x6,

1279 
	mMSG_VELNED
 = 0x12,

1280 
	mMSG_SVINFO
 = 0x30,

1281 
	mMSG_CFG_PRT
 = 0x00,

1282 
	mMSG_CFG_RATE
 = 0x08,

1283 
	mMSG_CFG_SET_RATE
 = 0x01,

1284 
	mMSG_CFG_NAV_SETTINGS
 = 0x24

1286 
	eubs_«v_fix_ty≥
 {

1287 
	mFIX_NONE
 = 0,

1288 
	mFIX_DEAD_RECKONING
 = 1,

1289 
	mFIX_2D
 = 2,

1290 
	mFIX_3D
 = 3,

1291 
	mFIX_GPS_DEAD_RECKONING
 = 4,

1292 
	mFIX_TIME
 = 5

1294 
	eubx_«v_°©us_bôs
 {

1295 
	mNAV_STATUS_FIX_VALID
 = 1

1300 
ubx_«v_po¶lh
 
	mpo¶lh
;

1301 
ubx_«v_sﬁuti⁄
 
	msﬁuti⁄
;

1302 
ubx_«v_vñ√d
 
	mvñ√d
;

1303 
ubx_«v_svöfo
 
	msvöfo
;

1304 
uöt8_t
 
	mbyãs
[];

1305 } 
	g_buf„r
;

1307 
uöt32_t
 
	göô_•ìd
[5] = {9600,19200,38400,57600,115200};

1309 
	$SîülGpsPröt
(c⁄° 
PROGMEM
 * 
°r
) {

1310 
b
;

1311 
°r
 && (
b
 = 
	`pgm_ªad_byã
(str++))) {

1312 
	`SîülWrôe
(
GPS_SERIAL
, 
b
);

1313 
	`dñay
(5);

1315 
	}
}

1317 
	$GPS_SîülInô
() {

1318 
	`SîülO≥n
(
GPS_SERIAL
,
GPS_BAUD
);

1319 
	`dñay
(1000);

1320 
uöt8_t
 
i
=0;i<5;i++){

1321 
	`SîülO≥n
(
GPS_SERIAL
,
öô_•ìd
[
i
]);

1322 #i‡(
GPS_BAUD
==19200)

1323 
	`SîülGpsPröt
(
	`PSTR
("$PUBX,41,1,0003,0001,19200,0*23\r\n"));

1325 #i‡(
GPS_BAUD
==38400)

1326 
	`SîülGpsPröt
(
	`PSTR
("$PUBX,41,1,0003,0001,38400,0*26\r\n"));

1328 #i‡(
GPS_BAUD
==57600)

1329 
	`SîülGpsPröt
(
	`PSTR
("$PUBX,41,1,0003,0001,57600,0*2D\r\n"));

1331 #i‡(
GPS_BAUD
==115200)

1332 
	`SîülGpsPröt
(
	`PSTR
("$PUBX,41,1,0003,0001,115200,0*1E\r\n"));

1334 !
	`SîülTX‰ì
(
GPS_SERIAL
)Ë
	`dñay
(10);

1336 
	`dñay
(200);

1337 
	`SîülO≥n
(
GPS_SERIAL
,
GPS_BAUD
);

1338 
uöt8_t
 
i
=0; i<(
UBLOX_INIT
); i++) {

1339 
	`SîülWrôe
(
GPS_SERIAL
, 
	`pgm_ªad_byã
(
UBLOX_INIT
+
i
));

1340 
	`dñay
(5);

1342 
	}
}

1344 
boﬁ
 
	$GPS_√wFøme
(
uöt8_t
 
d©a
){

1345 
uöt8_t
 
_°ï
 = 0;

1346 
uöt8_t
 
_msg_id
;

1347 
uöt16_t
 
_∑ylﬂd_Àngth
;

1348 
uöt16_t
 
_∑ylﬂd_cou¡î
;

1349 
uöt8_t
 
_ck_a
;

1350 
uöt8_t
 
_ck_b
;

1352 
uöt8_t
 
°
 = 
_°ï
+1;

1353 
boﬁ
 
ªt
 = 
Ál£
;

1355 
uöt32_t
 
i
;

1357 i‡(
°
 == 2)

1358 i‡(
PREAMBLE2
 !
d©a
Ë
°
--;

1359 i‡(
°
 == 1) {

1360 if(
PREAMBLE1
 !
d©a
Ë
°
--;

1361 } i‡(
°
 == 3) {

1362 
_ck_b
 = 
_ck_a
 = 
d©a
;

1363 } i‡(
°
 > 3 && st < 8) {

1364 
_ck_b
 +(
_ck_a
 +
d©a
);

1365 i‡(
°
 == 4) {

1366 
_msg_id
 = 
d©a
;

1367 } i‡(
°
 == 5) {

1368 
_∑ylﬂd_Àngth
 = 
d©a
;

1369 } i‡(
°
 == 6) {

1370 
_∑ylﬂd_Àngth
 +(
uöt16_t
)(
d©a
<<8);

1371 i‡(
_∑ylﬂd_Àngth
 > 512Ë
°
 = 0;

1372 
_∑ylﬂd_cou¡î
 = 0;

1374 i‡(
_∑ylﬂd_cou¡î
+1 < 
_∑ylﬂd_Àngth
Ë
°
--;

1375 i‡(
_∑ylﬂd_cou¡î
 < (
_buf„r
)Ë_buf„r.
byãs
[_∑ylﬂd_cou¡î] = 
d©a
;

1376 
_∑ylﬂd_cou¡î
++;

1378 } i‡(
°
 == 8) {

1379 i‡(
_ck_a
 !
d©a
Ë
°
 = 0;

1380 } i‡(
°
 == 9) {

1381 
°
 = 0;

1382 i‡(
_ck_b
 =
d©a
) {

1383 
debug
[2] = 
_msg_id
;

1384 i‡(
_msg_id
 =
MSG_POSLLH
) {

1385 if(
f
.
GPS_FIX
) {

1386 
GPS_co‹d
[
LON
] = 
_buf„r
.
po¶lh
.
l⁄gôude
;

1387 
GPS_co‹d
[
LAT
] = 
_buf„r
.
po¶lh
.
œtôude
;

1388 
GPS_Ætôude
 = 
_buf„r
.
po¶lh
.
Ætôude_m¶
 / 1000;

1389 #i‚de‡
ArdH©


1390 
GPS_time
 = 
_buf„r
.
po¶lh
.
time
;

1393 
ªt

åue
;

1394 } i‡(
_msg_id
 =
MSG_SOL
) {

1395 
f
.
GPS_FIX
 = 0;

1396 if((
_buf„r
.
sﬁuti⁄
.
fix_°©us
 & 
NAV_STATUS_FIX_VALID
Ë&& (_buf„r.sﬁuti⁄.
fix_ty≥
 =
FIX_3D
 || _buf„r.sﬁuti⁄.fix_ty≥ =
FIX_2D
)Ë
f
.
GPS_FIX
 = 1;

1397 
GPS_numS©
 = 
_buf„r
.
sﬁuti⁄
.
ßãŒôes
;

1398 } i‡(
_msg_id
 =
MSG_VELNED
) {

1399 
GPS_•ìd
 = 
_buf„r
.
vñ√d
.
•ìd_2d
;

1400 
GPS_ground_cour£
 = (
uöt16_t
)(
_buf„r
.
vñ√d
.
hódög_2d
 / 10000);

1402 i‡(
_msg_id
 =
MSG_SVINFO
) {

1415 
GPS_numCh
 = 
_buf„r
.
svöfo
.
numCh
;

1416 i‡(
GPS_numCh
 > 16)

1417 
GPS_numCh
 = 16;

1421 
i
 = 0; i < 
GPS_numCh
; i++) {

1422 
GPS_svöfo_chn
[
i
] = 
_buf„r
.
svöfo
.
ch™√l
[i].
chn
;

1423 
GPS_svöfo_svid
[
i
] = 
_buf„r
.
svöfo
.
ch™√l
[i].
svid
;

1424 
GPS_svöfo_quÆôy
[
i
] = 
_buf„r
.
svöfo
.
ch™√l
[i].
quÆôy
;

1425 
GPS_svöfo_˙o
[
i
] = 
_buf„r
.
svöfo
.
ch™√l
[i].
˙o
;

1430 
_°ï
 = 
°
;

1431  
ªt
;

1432 
	}
}

1440 #i‡
deföed
(
MTK_BINARY16
Ë|| deföed(
MTK_BINARY19
)

1442 
	#MTK_SET_BINARY
 
	`PSTR
("$PGCMD,16,0,0,0,0,0*6A\r\n")

	)

1443 
	#MTK_SET_NMEA
 
	`PSTR
("$PGCMD,16,1,1,1,1,1*6B\r\n")

	)

1444 
	#MTK_SET_NMEA_SENTENCES
 
	`PSTR
("$PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*28\r\n")

	)

1445 
	#MTK_OUTPUT_4HZ
 
	`PSTR
("$PMTK220,250*29\r\n")

	)

1446 
	#MTK_OUTPUT_5HZ
 
	`PSTR
("$PMTK220,200*2C\r\n")

	)

1447 
	#MTK_OUTPUT_10HZ
 
	`PSTR
("$PMTK220,100*2F\r\n")

	)

1448 
	#MTK_NAVTHRES_OFF
 
	`PSTR
("$PMTK397,0*23\r\n")

1449 
	#SBAS_ON
 
	`PSTR
("$PMTK313,1*2E\r\n")

	)

1450 
	#WAAS_ON
 
	`PSTR
("$PMTK301,2*2E\r\n")

	)

1451 
	#SBAS_TEST_MODE
 
	`PSTR
("$PMTK319,0*25\r\n")

1452 

	)

1453 
	sdiyd_mtk_msg
 {

1454 
öt32_t
 
	mœtôude
;

1455 
öt32_t
 
	ml⁄gôude
;

1456 
öt32_t
 
	mÆtôude
;

1457 
öt32_t
 
	mground_•ìd
;

1458 
öt32_t
 
	mground_cour£
;

1459 
uöt8_t
 
	mßãŒôes
;

1460 
uöt8_t
 
	mfix_ty≥
;

1461 
uöt32_t
 
	mutc_d©e
;

1462 
uöt32_t
 
	mutc_time
;

1463 
uöt16_t
 
	mhd›
;

1467 
	ediyd_mtk_fix_ty≥
 {

1468 
	mFIX_NONE
 = 1,

1469 
	mFIX_2D
 = 2,

1470 
	mFIX_3D
 = 3,

1471 
	mFIX_2D_SBAS
 = 6,

1472 
	mFIX_3D_SBAS
 = 7

1475 #i‡
deföed
(
MTK_BINARY16
)

1476 
	ediyd_mtk_¥Ÿocﬁ_byãs
 {

1477 
	mPREAMBLE1
 = 0xd0,

1478 
	mPREAMBLE2
 = 0xdd,

1482 #i‡
deföed
(
MTK_BINARY19
)

1483 
	ediyd_mtk_¥Ÿocﬁ_byãs
 {

1484 
	mPREAMBLE1
 = 0xd1,

1485 
	mPREAMBLE2
 = 0xdd,

1490 
uöt8_t
 
	g_ck_a
;

1491 
uöt8_t
 
	g_ck_b
;

1494 
uöt8_t
 
	g_°ï
;

1495 
uöt8_t
 
	g_∑ylﬂd_cou¡î
;

1498 
	g_time_off£t
;

1499 
boﬁ
 
	g_off£t_ˇlcuœãd
;

1503 
diyd_mtk_msg
 
	mmsg
;

1504 
uöt8_t
 
	mbyãs
[];

1505 } 
	g_buf„r
;

1507 
ölöe
 
	$_sw≠l
(c⁄° *
byãs
) {

1508 c⁄° 
uöt8_t
 *
b
 = (c⁄° uöt8_à*)
byãs
;

1510 
v
;

1511 
uöt8_t
 
b
[4];

1512 } 
u
;

1514 
u
.
b
[0] = b[3];

1515 
u
.
b
[1] = b[2];

1516 
u
.
b
[2] = b[1];

1517 
u
.
b
[3] = b[0];

1519 (
u
.
v
);

1520 
	}
}

1522 
uöt32_t
 
	göô_•ìd
[5] = {9600,19200,38400,57600,115200};

1524 
	$SîülGpsPröt
(c⁄° 
PROGMEM
 * 
°r
) {

1525 
b
;

1526 
°r
 && (
b
 = 
	`pgm_ªad_byã
(str++))) {

1527 
	`SîülWrôe
(
GPS_SERIAL
, 
b
);

1529 
	}
}

1531 
	$GPS_SîülInô
() {

1532 
	`SîülO≥n
(
GPS_SERIAL
,
GPS_BAUD
);

1533 
	`dñay
(1000);

1534 #i‡
	`deföed
(
INIT_MTK_GPS
)

1535 
uöt8_t
 
i
=0;i<5;i++){

1536 
	`SîülO≥n
(
GPS_SERIAL
,
öô_•ìd
[
i
]);

1537 #i‡(
GPS_BAUD
==19200)

1538 
	`SîülGpsPröt
(
	`PSTR
("$PMTK251,19200*22\r\n"));

1540 #i‡(
GPS_BAUD
==38400)

1541 
	`SîülGpsPröt
(
	`PSTR
("$PMTK251,38400*27\r\n"));

1543 #i‡(
GPS_BAUD
==57600)

1544 
	`SîülGpsPröt
(
	`PSTR
("$PMTK251,57600*2C\r\n"));

1546 #i‡(
GPS_BAUD
==115200)

1547 
	`SîülGpsPröt
(
	`PSTR
("$PMTK251,115200*1F\r\n"));

1549 !
	`SîülTX‰ì
(
GPS_SERIAL
)Ë
	`dñay
(80);

1553 
	`SîülO≥n
(
GPS_SERIAL
,
GPS_BAUD
);

1555 
	`SîülGpsPröt
(
MTK_NAVTHRES_OFF
);

1556 !
	`SîülTX‰ì
(
GPS_SERIAL
)Ë
	`dñay
(80);

1557 
	`SîülGpsPröt
(
SBAS_ON
);

1558 !
	`SîülTX‰ì
(
GPS_SERIAL
)Ë
	`dñay
(80);

1559 
	`SîülGpsPröt
(
WAAS_ON
);

1560 !
	`SîülTX‰ì
(
GPS_SERIAL
)Ë
	`dñay
(80);

1561 
	`SîülGpsPröt
(
SBAS_TEST_MODE
);

1562 !
	`SîülTX‰ì
(
GPS_SERIAL
)Ë
	`dñay
(80);

1563 
	`SîülGpsPröt
(
MTK_OUTPUT_5HZ
);

1565 #i‡
	`deföed
(
NMEA
)

1566 
	`SîülGpsPröt
(
MTK_SET_NMEA_SENTENCES
);

1568 #i‡
	`deföed
(
MTK_BINARY19
Ë|| deföed(
MTK_BINARY16
)

1569 
	`SîülGpsPröt
(
MTK_SET_BINARY
);

1572 
	}
}

1574 
boﬁ
 
	$GPS_√wFøme
(
uöt8_t
 
d©a
) {

1575 
boﬁ
 
∑r£d
 = 
Ál£
;

1577 
ª°¨t
:

1578 
_°ï
) {

1589 if(
PREAMBLE1
 =
d©a
)

1590 
_°ï
++;

1593 i‡(
PREAMBLE2
 =
d©a
) {

1594 
_°ï
++;

1597 
_°ï
 = 0;

1598 
ª°¨t
;

1600 i‡((
_buf„r
Ë=
d©a
) {

1601 
_°ï
++;

1602 
_ck_b
 = 
_ck_a
 = 
d©a
;

1603 
_∑ylﬂd_cou¡î
 = 0;

1605 
_°ï
 = 0;

1606 
ª°¨t
;

1611 
_buf„r
.
byãs
[
_∑ylﬂd_cou¡î
++] = 
d©a
;

1612 
_ck_b
 +(
_ck_a
 +
d©a
);

1613 i‡(
_∑ylﬂd_cou¡î
 =(
_buf„r
))

1614 
_°ï
++;

1618 
_°ï
++;

1619 i‡(
_ck_a
 !
d©a
)

1620 
_°ï
 = 0;

1623 
_°ï
 = 0;

1624 i‡(
_ck_b
 !
d©a
)

1626 
f
.
GPS_FIX
 = ((
_buf„r
.
msg
.
fix_ty≥
 =
FIX_3D
Ë|| (_buf„r.msg.fix_ty≥ =
FIX_3D_SBAS
));

1627 #i‡
	`deföed
(
MTK_BINARY16
)

1628 
GPS_co‹d
[
LAT
] = 
_buf„r
.
msg
.
œtôude
 * 10;

1629 
GPS_co‹d
[
LON
] = 
_buf„r
.
msg
.
l⁄gôude
 * 10;

1631 #i‡
	`deföed
(
MTK_BINARY19
)

1632 
GPS_co‹d
[
LAT
] = 
_buf„r
.
msg
.
œtôude
;

1633 
GPS_co‹d
[
LON
] = 
_buf„r
.
msg
.
l⁄gôude
;

1635 
GPS_Ætôude
 = 
_buf„r
.
msg
.
Ætôude
 /100;

1636 
GPS_•ìd
 = 
_buf„r
.
msg
.
ground_•ìd
;

1637 
GPS_ground_cour£
 = 
_buf„r
.
msg
.
ground_cour£
/100;

1638 
GPS_numS©
 = 
_buf„r
.
msg
.
ßãŒôes
;

1639 #i‚de‡
ArdH©


1640 
GPS_time
 = 
_buf„r
.
msg
.
utc_time
;

1643 
∑r£d
 = 
åue
;

1645  
∑r£d
;

1646 
	}
}

1654 #i‡
deföed
(
VENUS8
)

1657 
	#VENUS_CONFIG_SERIAL_PORT
 0x05

	)

1658 
	#VENUS_CONFIG_OUTPUT_MSG_FORMAT
 0x09

	)

1659 
	#VENUS_CONFIG_POWER_MODE
 0x0C

	)

1660 
	#VENUS_CONFIG_GPS_UPDATE_RATE
 0x0E

	)

1663 
	#VENUS_CONFIG_GPS_PINNING
 0x39

	)

1664 
	#VENUS_CONFIG_GPS_PINNING_PARAMS
 0x3B

	)

1665 
	#VENUS_CONFIG_NAV_MODE
 0x3C

	)

1668 
	#VENUS_GPS_LOCATION
 0xA8

	)

1671 
	#VENUS8_EXT2
 0x62

	)

1672 
	#VENUS8_EXT3
 0x63

	)

1673 
	#VENUS8_EXT4
 0x64

	)

1674 
	#VENUS8_CONFIG_SBAS
 0x01

1675 
	#VENUS8_CONFIG_INTERFERENCE_DETECT
 0x06

1676 
	#VENUS8_CONFIG_NAV_MODE
 0x17

1677 
	#VENUS8_CONFIG_SAGPS
 0x01

1678 

	)

1680 
öt32_t
 
	mx
,
	my
,
	mz
;

1681 } 
	txyz32_t
;

1684 
uöt8_t
 
	mfixmode
;

1685 
uöt8_t
 
	msv_cou¡
;

1686 
uöt16_t
 
	mgps_wìk
;

1687 
uöt32_t
 
	mgps_tow
;

1688 
öt32_t
 
	mœtôude
;

1689 
öt32_t
 
	ml⁄gôude
;

1690 
uöt32_t
 
	mñlùsoid_Æt
;

1691 
uöt32_t
 
	m£Æevñ_Æt
;

1692 
uöt16_t
 
	mgd›
, 
	mpd›
, 
	mhd›
, 
	mvd›
, 
	mtd›
;

1693 
xyz32_t
 
	me˚f
,
	mvñ
;

1694 } 
	tvíus_loˇti⁄
;

1697 
uöt8_t
 
	mid
;

1699 
uöt8_t
 
	mbody
[];

1700 
víus_loˇti⁄
 
	mloˇti⁄
;

1702 } 
	tvíus_mesßge
;

1707 
uöt8_t
 
	m∑ylﬂd
[];

1708 
víus_mesßge
 
	mmesßge
;

1710 } 
	tvíus_∑ylﬂd
;

1712 
víus_∑ylﬂd
 
	gvíus_˘x
;

1714 
	#SWAP16
(
x
Ë((x&0xff)<<8 | (x>>8))

	)

1715 
	#SWAP32
(
x
Ë((x&0xff)<<24 | ((x&0xff00)<<8Ë| ((x&0xff0000)>>8Ë| ((x&0xff000000)>>24))

	)

1717 
	$VíusFixLoˇti⁄Endü√ss
() {

1718 
víus_˘x
.
mesßge
.
loˇti⁄
.
œtôude
 = 
	`SWAP32
(venus_ctx.message.location.latitude);

1719 
víus_˘x
.
mesßge
.
loˇti⁄
.
l⁄gôude
 = 
	`SWAP32
(venus_ctx.message.location.longitude);

1720 
víus_˘x
.
mesßge
.
loˇti⁄
.
£Æevñ_Æt
 = 
	`SWAP32
(venus_ctx.message.location.sealevel_alt);

1721 
	}
}

1723 
	$víusWrôe
(
uöt8_t
 
Àngth
) {

1724 
uöt8_t
 
∂s
;

1725 
uöt8_t
 
cs
=0;

1726 
	`SîülWrôe
(
GPS_SERIAL
,0xA0);

1727 
	`SîülWrôe
(
GPS_SERIAL
,0xA1);

1728 
	`SîülWrôe
(
GPS_SERIAL
,0);

1729 
	`SîülWrôe
(
GPS_SERIAL
,
Àngth
);

1730 
∂s
=0;Öls<
Àngth
;Öls++) {

1731 
cs
 = c†^ 
víus_˘x
.
∑ylﬂd
[
∂s
];

1732 
	`SîülWrôe
(
GPS_SERIAL
,
víus_˘x
.
∑ylﬂd
[
∂s
]);

1734 
	`SîülWrôe
(
GPS_SERIAL
,
cs
);

1735 
	`SîülWrôe
(
GPS_SERIAL
,0x0D);

1736 
	`SîülWrôe
(
GPS_SERIAL
,0x0A);

1737 
	`dñay
(50);

1738 
	}
}

1740 
	$GPS_SîülInô
() {

1741 
uöt32_t
 
öô_•ìd
[5] = {9600,19200,38400,115200,57600};

1743 
uöt8_t
 
i
=0;i<5;i++){

1744 
	`SîülO≥n
(
GPS_SERIAL
,
öô_•ìd
[
i
]);

1746 
víus_˘x
.
mesßge
.
id
 = 
VENUS_CONFIG_OUTPUT_MSG_FORMAT
;

1747 
víus_˘x
.
mesßge
.
body
[0] = 2;

1748 
víus_˘x
.
mesßge
.
body
[1] = 0;

1749 
	`víusWrôe
(3);

1751 
víus_˘x
.
mesßge
.
id
 = 
VENUS_CONFIG_SERIAL_PORT
;

1752 
víus_˘x
.
mesßge
.
body
[0] = 0;

1753 
víus_˘x
.
mesßge
.
body
[1] = 4;

1754 
víus_˘x
.
mesßge
.
body
[2] = 0;

1755 
	`víusWrôe
(4);

1757 
	`dñay
(200);

1760 
víus_˘x
.
mesßge
.
id
 = 
VENUS8_EXT4
;

1761 
víus_˘x
.
mesßge
.
body
[0] = 
VENUS8_CONFIG_NAV_MODE
;

1762 
víus_˘x
.
mesßge
.
body
[1] = 5;

1763 
víus_˘x
.
mesßge
.
body
[2] = 0;

1764 
	`víusWrôe
(4);

1767 
víus_˘x
.
mesßge
.
id
 = 
VENUS8_EXT4
;

1768 
víus_˘x
.
mesßge
.
body
[0] = 
VENUS8_CONFIG_INTERFERENCE_DETECT
;

1769 
víus_˘x
.
mesßge
.
body
[1] = 1;

1770 
víus_˘x
.
mesßge
.
body
[2] = 0;

1771 
	`víusWrôe
(4);

1774 
víus_˘x
.
mesßge
.
id
 = 
VENUS8_EXT2
;

1775 
víus_˘x
.
mesßge
.
body
[0] = 
VENUS8_CONFIG_SBAS
;

1776 
víus_˘x
.
mesßge
.
body
[1] = 1;

1777 
víus_˘x
.
mesßge
.
body
[2] = 1;

1778 
víus_˘x
.
mesßge
.
body
[3] = 8;

1779 
víus_˘x
.
mesßge
.
body
[4] = 1;

1780 
víus_˘x
.
mesßge
.
body
[5] = 3;

1781 
víus_˘x
.
mesßge
.
body
[6] = 7;

1782 
víus_˘x
.
mesßge
.
body
[7] = 0;

1783 
	`víusWrôe
(9);

1786 
víus_˘x
.
mesßge
.
id
 = 
VENUS_CONFIG_GPS_PINNING
;

1787 
víus_˘x
.
mesßge
.
body
[0] = 2;

1788 
víus_˘x
.
mesßge
.
body
[1] = 0;

1789 
	`víusWrôe
(3);

1792 
víus_˘x
.
mesßge
.
id
 = 
VENUS_CONFIG_GPS_PINNING_PARAMS
;

1793 
uöt8_t
 
i
=0;i<10;i++Ë
víus_˘x
.
mesßge
.
body
[i] = 0;

1794 
víus_˘x
.
mesßge
.
body
[10] = 0;

1795 
	`víusWrôe
(12);

1798 
víus_˘x
.
mesßge
.
id
 = 
VENUS8_EXT3
;

1799 
víus_˘x
.
mesßge
.
body
[0] = 
VENUS8_CONFIG_SAGPS
;

1800 
víus_˘x
.
mesßge
.
body
[1] = 2;

1801 
víus_˘x
.
mesßge
.
body
[2] = 0;

1802 
	`víusWrôe
(4);

1805 
víus_˘x
.
mesßge
.
id
 = 
VENUS_CONFIG_POWER_MODE
;

1806 
víus_˘x
.
mesßge
.
body
[0] = 0;

1807 
víus_˘x
.
mesßge
.
body
[1] = 0;

1808 
	`víusWrôe
(3);

1811 
víus_˘x
.
mesßge
.
id
 = 
VENUS_CONFIG_GPS_UPDATE_RATE
;

1812 
víus_˘x
.
mesßge
.
body
[0] = 5;

1813 
víus_˘x
.
mesßge
.
body
[1] = 0;

1814 
	`víusWrôe
(3);

1815 
	}
}

1817 
boﬁ
 
	$GPS_√wFøme
(
uöt8_t
 
c
) {

1818 
uöt8_t
 
°©e
=0;

1819 
uöt8_t
 
n
=0;

1820 
uöt8_t
 
¸
=0;

1821 
uöt8_t
 
Àngth
;

1822 
boﬁ
 
ªt
 = 
Ál£
;

1824 
°©e
) {

1825 0: if(
c
==0xA0Ë
°©e
++; ;

1826 1: if(
c
==0xA1Ë
°©e
++; state=0; ;

1827 2: 
°©e
++; ;

1828 3: 
Àngth
=
c
; 
°©e
++; ;

1830 
víus_˘x
.
mesßge
.
id
 = 
c
;

1831 
¸
=
c
;

1832 
n
=1;

1833 
°©e
++;

1836 
¸
 ^
c
;

1837 if(
n
<(
víus_˘x
.
mesßge
))

1838 
víus_˘x
.
∑ylﬂd
[
n
] = 
c
;

1839 
n
++;

1840 if(
n
==
Àngth
Ë
°©e
++;

1843 if(
c
==
¸
Ë
°©e
++;

1844 
°©e
=0;

1847 if(
c
==0x0DË
°©e
++;

1848 
°©e
=0;

1851 
°©e
=0;

1852 if(
c
!=0x0A) ;

1853 if(
víus_˘x
.
mesßge
.
id
==
VENUS_GPS_LOCATION
) {

1854 
GPS_numS©
 = 
víus_˘x
.
mesßge
.
loˇti⁄
.
sv_cou¡
;

1855 
f
.
GPS_FIX
 = 
víus_˘x
.
mesßge
.
loˇti⁄
.
fixmode
 >=2;

1856 i‡(
f
.
GPS_FIX
) {

1857 
	`VíusFixLoˇti⁄Endü√ss
();

1858 
GPS_co‹d
[
LAT
] = 
víus_˘x
.
mesßge
.
loˇti⁄
.
œtôude
;

1859 
GPS_co‹d
[
LON
] = 
víus_˘x
.
mesßge
.
loˇti⁄
.
l⁄gôude
;

1860 
GPS_Ætôude
 = 
víus_˘x
.
mesßge
.
loˇti⁄
.
£Æevñ_Æt
 /100;

1862 
ªt
=
åue
;

1865  
ªt
;

1866 
	}
}

1877 #i‡
deföed
(
I2C_GPS
)

1878 
	#I2C_GPS_ADDRESS
 0x20

1879 

	)

1880 
	#I2C_GPS_STATUS_00
 00

1881 
	#I2C_GPS_STATUS_NEW_DATA
 0x01

1882 
	#I2C_GPS_STATUS_2DFIX
 0x02

1883 
	#I2C_GPS_STATUS_3DFIX
 0x04

1884 
	#I2C_GPS_STATUS_NUMSATS
 0xF0

1885 
	#I2C_GPS_LOCATION
 07

1886 
	#I2C_GPS_GROUND_SPEED
 31

1887 
	#I2C_GPS_ALTITUDE
 33

1888 
	#I2C_GPS_GROUND_COURSE
 35

1889 
	#I2C_GPS_TIME
 39

1890 
	#I2C_GPS_SONAR_ALT
 239

1891 

	)

1892 
uöt8_t
 
	$GPS_NewD©a
() {

1893 
uöt8_t
 
i2c_gps_°©us
;

1895 
i2c_gps_°©us
 = 
	`i2c_ªadReg
(
I2C_GPS_ADDRESS
,
I2C_GPS_STATUS_00
);

1897 #i‡
	`deföed
(
I2C_GPS_SONAR
)

1898 
	`i2c_ªad_ªg_to_buf
(
I2C_GPS_ADDRESS
, 
I2C_GPS_SONAR_ALT
, (
uöt8_t
*)&
s⁄¨A…
,2);

1901 
f
.
GPS_FIX
 = 0;

1902 i‡(
i2c_gps_°©us
 & 
I2C_GPS_STATUS_3DFIX
) {

1903 
f
.
GPS_FIX
 = 1;

1904 i‡(
i2c_gps_°©us
 & 
I2C_GPS_STATUS_NEW_DATA
) {

1905 
GPS_Føme
 = 1;

1906 
GPS_FAIL_timî
=
	`mûlis
();

1907 i‡(
GPS_upd©e
 == 1) GPS_update = 0; GPS_update = 1;

1908 
GPS_numS©
 = 
i2c_gps_°©us
 >>4;

1909 
	`i2c_ªad_ªg_to_buf
(
I2C_GPS_ADDRESS
, 
I2C_GPS_LOCATION
, (
uöt8_t
*)&
GPS_co‹d
[
LAT
],4);

1910 
	`i2c_ªad_ªg_to_buf
(
I2C_GPS_ADDRESS
, 
I2C_GPS_LOCATION
+4, (
uöt8_t
*)&
GPS_co‹d
[
LON
],4);

1913 #i‡
	`deföed
(
FIXEDWING
)

1914 
	`i2c_ªad_ªg_to_buf
(
I2C_GPS_ADDRESS
, 
I2C_GPS_GROUND_SPEED
, (
uöt8_t
*)&
GPS_•ìd
,2);

1915 
	`i2c_ªad_ªg_to_buf
(
I2C_GPS_ADDRESS
, 
I2C_GPS_ALTITUDE
, (
uöt8_t
*)&
GPS_Ætôude
,2);

1916 
	`i2c_ªad_ªg_to_buf
(
I2C_GPS_ADDRESS
, 
I2C_GPS_GROUND_COURSE
,(
uöt8_t
*)&
GPS_ground_cour£
,2);

1922 
	}
}

1927 #i‡
deföed
(
FIXEDWING
)

1928 
	$FW_NAV
(){

1930 
öt16_t
 
NAV_dñèSum
 = 0, 
ALT_dñèSum
=0;

1931 
öt16_t
 
GPS_FwT¨gë
 = 0;

1932 
öt16_t
 
GPS_A…Eº
 = 0;

1933 
öt16_t
 
NAV_Thro
 = 0;

1934 
öt16_t
 
GPS_Hódög
 = 
GPS_ground_cour£
;

1935 
öt16_t
 
Cuºít_Hódög
;

1936 
öt16_t
 
ÆtDiff
 = 0 ;

1937 
öt16_t
 
RTH_A…
 = 
GPS_c⁄f
.
πh_Ætôude
;

1938 
öt16_t
 
dñè
[2] = {0,0};

1939 
öt16_t
 
TX_Thro
 = 
rcD©a
[
THROTTLE
];

1942 
öt16_t
 
cuº_A…
 = 
Æt
.
E°A…
/100;

1945 i‡(
GPS_Hódög
 > 1800) GPS_Heading -= 3600;

1946 i‡(
GPS_Hódög
 < -1800) GPS_Heading += 3600;

1949 #i‡
MAG


1950 i‡(
	`abs
(
©t
.
hódög
 -(
GPS_Hódög
/10))>10 && 
GPS_•ìd
 >500)

1951 {
Cuºít_Hódög
 = 
GPS_Hódög
/10;}{Cuºít_Hódög = 
©t
.
hódög
;}

1953 
Cuºít_Hódög
 =
GPS_Hódög
/10 ;

1956 #ifde‡
SIMDEBUG


1957 
Cuºít_Hódög
 = 
©t
.
hódög
;

1961 
	`GPS_upd©e_¸os°øck
();

1962 
GPS_FwT¨gë
 = 
«v_bórög
/100 ;

1963 i‡(
GPS_FwT¨gë
 >180)

1964 
GPS_FwT¨gë
 = GPS_FwTarget -=360 ;

1966 
öt16_t
 
«vDiff
 = 
GPS_FwT¨gë
 - 
Cuºít_Hódög
;

1967 
GPS_A…Eº
 = -
	`gë_Ætôude_îr‹
()/100;

1970 
	#RADIANS
 0.174533f

	)

1971 
	`DifÁngÀ
 ((
wp_di°™˚
/100Ë/ 
	`abs
(
GPS_A…Eº
));

1972 
DifÁngÀ
 = 1 / 
	`èn
(DifÁngÀ * 
RADIANS
);

1973 i‡(
GPS_A…Eº
 < 0Ë
DifÁngÀ
 *= -1;

1976 i‡(
f
.
GPS_mode
 =
GPS_MODE_NAV
 && f.
HORIZON_MODE
){

1977 
GPS_A…Eº
 = 
DifÁngÀ
 * 10;

1983 
uöt32_t
 
gpsTimî
 = 0;

1984 
uöt16_t
 
gpsFªq
 = 1000/
GPS_UPD_HZ
;

1985 i‡–
	`mûlis
(Ë- 
gpsTimî
 >
gpsFªq
 ){

1986 
gpsTimî
 = 
	`mûlis
();

1991 i‡(
rcD©a
[
THROTTLE
] > 
MAXCHECK
 || 
f
.
FS_MODE
){

1992 
NAV_Thro
 = 
CRUICETHROTTLE
;

1993 i‡(
NAV_°©e
 =
NAV_STATE_WP_ENROUTE
 && 
Æt_to_hﬁd
 =0Ë
NAV_Thro
 = 
IDLE_THROTTLE
;

1996 
NAV_Thro
 = 
rcD©a
[
THROTTLE
];}

1999 i‡(
	`abs
(
GPS_A…Eº
) > 2){

2000 
NAV_Thro
=
	`c⁄°øö
(NAV_Thrÿ- (
GPS_A…Eº
 *
SCALER_THROTTLE
Ë, 
IDLE_THROTTLE
 ,
CLIMBTHROTTLE
);}

2003 i‡(
f
.
CLIMBOUT_FW
 && 
GPS_A…Eº
 >= 0 ) f.CLIMBOUT_FW = 0;

2006 i‡(
f
.
GPS_mode
 =
GPS_MODE_RTH
 ){

2007 i‡(
f
.
CLIMBOUT_FW
){

2008 
GPS_A…Eº
 = - (
GPS_MAXCLIMB
 *10) ;

2009 
NAV_Thro
 = 
CLIMBTHROTTLE
;

2010 i‡(
cuº_A…
 <
SAFE_NAV_ALT
Ë
«vDiff
=0;

2013 i‡–(
GPS_di°™˚ToHome
 < 
SAFE_DECSCEND_ZONE
 )&& 
cuº_A…
 > 
RTH_A…
){

2014 
	`£t_√w_Ætôude
–
RTH_A…
*100);

2019 i‡–
f
.
FAILSAFE_RTH_ENABLE
 ){

2020 i‡–
GPS_di°™˚ToHome
 <10 ){

2021 
f
.
ARMED
 = 0;

2022 
f
.
CLIMBOUT_FW
 = 0 ;

2023 
	`£t_√w_Ætôude
(500);

2035 i‡(
«vDiff
 <= - 180)ÇavDiff += 360;

2036 i‡(
«vDiff
 >= + 180)ÇavDiff -= 360;

2038 i‡(
NAV_°©e
 !
NAV_STATE_WP_ENROUTE
Ëi‡(
	`abs
(
«vDiff
) > 165)ÇavDiff = -179;

2041 i‡–
GPS_di°™˚ToHome
 <10 )
«vDiff
*=0.1;

2047 
NavDT
 ;

2048 
uöt32_t
 
«v_lo›T
;

2049 
NavDT
 = ()(
	`mûlis
(Ë- 
«v_lo›T
)/ 1000;

2050 
«v_lo›T
 = 
	`mûlis
();

2054 i‡(
	`abs
(
GPS_A…Eº
)<=3Ë
A…îr‹I
*=
NavDT
;

2056 
GPS_A…Eº
*=10;

2057 
A…îr‹I
 +(
GPS_A…Eº
 * 
ÆtPID_PARAM
.
kI
Ë* 
NavDT
;

2058 
A…îr‹I
 =
	`c⁄°øö
(AlterrorI,-500,500);

2060 
dñè
[0] = (
GPS_A…Eº
 - 
œ°A…Diff
);

2061 
œ°A…Diff
 = 
GPS_A…Eº
;

2062 i‡(
	`abs
(
dñè
[0])>100) delta[0] = 0;

2064 
uöt8_t
 
i
=0;ò<
GPS_UPD_HZ
;i++){ 
A…Hi°
[i] = AltHist[i+1];}

2065 
A…Hi°
[
GPS_UPD_HZ
-1]=
dñè
[0];

2068 
ALT_dñèSum
 = 0;

2069 
uöt8_t
 
i
=0;i<
GPS_UPD_HZ
;i++){ 
ALT_dñèSum
 +
A…Hi°
[i]; }

2071 
ALT_dñèSum
 = ( ALT_dñèSum * 
ÆtPID_PARAM
.
kD
Ë/ 
NavDT
;

2072 
ÆtDiff
 = 
GPS_A…Eº
 * 
ÆtPID_PARAM
.
kP
 ;

2073 
ÆtDiff
 +=(
A…îr‹I
);

2076 i‡(
	`abs
(
«vDiff
)<=2Ë
Navîr‹I
*=
NavDT
;

2077 
«vDiff
*=10;

2079 
Navîr‹I
 +(
«vDiff
 * 
«vPID_PARAM
.
kI
Ë*
NavDT
;

2080 
Navîr‹I
 =
	`c⁄°øö
(NaverrorI,-500,500);

2082 
dñè
[1] = (
«vDiff
 - 
œ°NavDiff
);

2083 
œ°NavDiff
 = 
«vDiff
;

2084 i‡(
	`abs
(
dñè
[1])>100) delta[1] = 0;

2087 
uöt8_t
 
i
=0;ò< 
GPS_UPD_HZ
;i++){ 
NavDif
[i] = NavDif[i+1];}

2088 
NavDif
[
GPS_UPD_HZ
-1]=
dñè
[1];

2090 
NAV_dñèSum
 = 0;

2091 
uöt8_t
 
i
=0;i<
GPS_UPD_HZ
;i++){ 
NAV_dñèSum
 +
NavDif
[i]; }

2093 
NAV_dñèSum
 = ( NAV_dñèSum *
«vPID_PARAM
.
kD
 )/ 
NavDT
;

2095 i‡(
f
.
GPS_mode
 =
GPS_MODE_RTH
 )

2096 {
«vDiff
 *
poshﬁd_øãPID_PARAM
.
kP
;}

2097 {
«vDiff
 *
«vPID_PARAM
.
kP
;}

2099 
«vDiff
 +
Navîr‹I
;

2105 
GPS_™gÀ
[
PITCH
] = 
	`c⁄°øö
(
ÆtDiff
/10,-
GPS_MAXCLIMB
*10,
GPS_MAXDIVE
*10Ë+ 
ALT_dñèSum
;

2106 
GPS_™gÀ
[
YAW
] = 
	`c⁄°øö
(
«vDiff
/10,-
GPS_RUDDER
*10, GPS_RUDDER*10 ) + 
NAV_dñèSum
;

2107 
GPS_™gÀ
[
ROLL
] = 
	`c⁄°øö
(
«vDiff
/10,-
GPS_MAXCORR
*10, GPS_MAXCORR*10Ë+ 
NAV_dñèSum
;

2114 i‡–
f
.
MOTORS_STOPPED
 ){ 
GPS_™gÀ
[
PITCH
]=
	`c⁄°øö
(GPS_™gÀ[PITCH],0, 
GPS_MAXDIVE
*10);}

2117 i‡(!
f
.
CLIMBOUT_FW
Ë{
GPS_™gÀ
[
PITCH
]-
	`abs
(
©t
.
™gÀ
[
ROLL
]Ë* (
ELEVATORCOMPENSATION
 /100);}

2123 
NAV_Thro
 -
	`c⁄°øö
(
©t
.
™gÀ
[
PITCH
] * 
PITCH_COMP
 ,0 ,450 );

2124 
NAV_Thro
 = 
	`c⁄°øö
(NAV_Thro,
IDLE_THROTTLE
 ,
CLIMBTHROTTLE
 );

2126 
	`FW_NavS≥ed
();

2127 
NAV_Thro
 +
S≥edBoo°
;

2133 i‡–(!
f
.
ANGLE_MODE
 && !f.
HORIZON_MODE
Ë|| ( f.
PASSTHRU_MODE
 && !f.
FAILSAFE_RTH_ENABLE
 ) ){

2134 
NAV_Thro
 = 
TX_Thro
;

2135 
GPS_™gÀ
[
PITCH
] =0;

2136 
GPS_™gÀ
[
ROLL
] =0;

2137 
GPS_™gÀ
[
YAW
] =0;

2139 
rcComm™d
[
THROTTLE
] = 
NAV_Thro
;

2140 
rcComm™d
[
YAW
] +
GPS_™gÀ
[YAW];

2148 #ifde‡
TESTBED


2156 
	}
}

2161 
	$FW_NavS≥ed
(){

2162 
	#GPS_MINSPEED
 500

2163 
	#I_TERM
 0.1f

	)

2164 #i‡
	`deföed
 (
AIRSPEED
)

2165 
öt16_t
 
aú_Nav•ìd
 = 
AIRSPEED
 *100;

2166 
öt16_t
 
aú_Max•ìd
 = 
AIR_MAXSPEED
 *100;

2167 
•Diff
 = 0;

2168 
•Add
 = 0;

2170 i‡((
GPS_•ìd
 ) < (
GPS_MINSPEED
 )) {

2171 
Dñè
 = (
GPS_MINSPEED
 - 
GPS_•ìd
)*
I_TERM
;

2172 
•Add
 +(
Dñè
 == 0)? 1 : Delta;

2174 
•Add
 -•Add*
I_TERM
;

2176 
•Add
 = 
	`c⁄°øö
(•Add, 0, 
aú_Max•ìd
 - 
aú_Nav•ìd
 - 100);

2178 i‡(
aú•ìdS≥ed
 < 
aú_Nav•ìd
 - 100 + 
•Add
 ||áirspeedSpeed >áir_Navspeed + 100 + spAdd) {

2179 
•Diff
 = (
aú_Nav•ìd
 + 
•Add
 - 
aú•ìdS≥ed
);

2180 
•Diff
 = spDif‡* 
I_TERM
;

2181 
S≥edBoo°
 +
•Diff
;

2184 
S≥edBoo°
 = 
	`c⁄°øö
(SpeedBoost,-500,500);

2187 
öt16_t
 
groundS≥ed
 = 
GPS_•ìd
;

2188 
uöt16_t
 
boo°limô
 = 
MAXTHROTTLE
 - 
CRUICETHROTTLE
;

2190 
•Diff
=(
GPS_MINSPEED
 -
groundS≥ed
)*
I_TERM
;

2191 i‡(
GPS_•ìd
 < 
GPS_MINSPEED
-50 || GPS_•ìd > GPS_MINSPEED+50)
S≥edBoo°
 +
•Diff
;

2192 
S≥edBoo°
 = 
	`c⁄°øö
(S≥edBoo°,0,
boo°limô
);

2194 
	}
}

	@GPS.h

1 #i‚de‡
GPS_H_


2 
	#GPS_H_


	)

4 
uöt8_t
 
GPS_numCh
;

5 
uöt8_t
 
GPS_svöfo_chn
[16];

6 
uöt8_t
 
GPS_svöfo_svid
[16];

7 
uöt8_t
 
GPS_svöfo_quÆôy
[16];

8 
uöt8_t
 
GPS_svöfo_˙o
[16];

11 
boﬁ
 
GPS_√wFøme
(
uöt8_t
 
c
);

12 
uöt8_t
 
GPS_Føme
;

14 
öt32_t
 
wøp_18000
(öt32_à
™g
);

16 
FW_NAV
();

17 
FW_NavS≥ed
();

19 
GPS_£t_pids
();

20 
GPS_SîülInô
();

21 
uöt8_t
 
GPS_Compuã
();

22 
GPS_ª£t_home_posôi⁄
();

23 
GPS_£t_√xt_wp
(
öt32_t
* 
œt_to
, i¡32_t* 
l⁄_to
, i¡32_t* 
œt_‰om
, i¡32_t* 
l⁄_‰om
);

24 
GPS_ª£t_«v
();

26 
öt32_t
 
gë_Ætôude_îr‹
();

27 
˛ór_√w_Ætôude
();

28 
f‹˚_√w_Ætôude
(
öt32_t
 
_√w_Æt
);

29 
£t_√w_Ætôude
(
öt32_t
 
_√w_Æt
);

30 
öt32_t
 
gë_√w_Ætôude
();

31 
ab‹t_missi⁄
(
îr‹_code
);

32 
GPS_adju°_hódög
();

33 
öô_RTH
();

34 
check_œnd
();

36 #i‡
deföed
(
I2C_GPS
)

37 
uöt8_t
 
GPS_NewD©a
();

40 
uöt32_t
 
wp_di°™˚
;

41 
öt32_t
 
èrgë_bórög
;

43 #i‡
deföed
 (
FIXEDWING
Ë&& (deföed (
GPS_SERIAL
Ë|| deföed(
I2C_GPS
))

59 
	#GPS_UPD_HZ
 5

60 
	#PITCH_COMP
 0.5f

61 
	#ELEVATORCOMPENSATION
 100

62 

	)

64 
	#GPS_MAXCORR
 45

65 
	#GPS_RUDDER
 20

66 

	)

67 
	#GPS_MAXCLIMB
 20

68 
	#GPS_MAXDIVE
 20

69 

	)

70 
	#CLIMBTHROTTLE
 1900

71 
	#CRUICETHROTTLE
 1400

72 

	)

73 
	#IDLE_THROTTLE
 1200

74 
	#SCALER_THROTTLE
 8

75 

	)

76 
	#FAILSAFE


77 

	)

78 
	#SAFE_NAV_ALT
 20

79 
	#SAFE_DECSCEND_ZONE
 50

	@IMU.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"ty≥s.h
"

5 
	~"Mu…iWii.h
"

6 
	~"IMU.h
"

7 
	~"Sís‹s.h
"

9 
gëE°im©edAâôude
();

11 
	$compuãIMU
 () {

12 
uöt8_t
 
axis
;

13 
öt16_t
 
gyroADC¥evious
[3] = {0,0,0};

14 
öt16_t
 
gyroADCöãr
[3];

16 
uöt16_t
 
timeI¡îÀave
 = 0;

17 #i‡
ACC


18 
	`ACC_gëADC
();

19 
	`gëE°im©edAâôude
();

21 #i‡
GYRO


22 
	`Gyro_gëADC
();

24 
axis
 = 0;áxis < 3;áxis++)

25 
gyroADCöãr
[
axis
] = 
imu
.
gyroADC
[axis];

26 
timeI¡îÀave
=
	`mi¸os
();

27 
	`™√xCode
();

28 
uöt8_t
 
t
=0;

29 (
öt16_t
)(
	`mi¸os
()-
timeI¡îÀave
)<650Ë
t
=1;

30 #ifde‡
LCD_TELEMETRY


31 i‡(!
t
Ë
™√x650_ovîrun_cou¡
++;

33 #i‡
GYRO


34 
	`Gyro_gëADC
();

36 
axis
 = 0;áxis < 3;áxis++) {

37 
gyroADCöãr
[
axis
] = 
imu
.
gyroADC
[axis]+gyroADCinter[axis];

39 
imu
.
gyroD©a
[
axis
] = (
gyroADCöãr
[axis]+
gyroADC¥evious
[axis])/3;

40 
gyroADC¥evious
[
axis
] = 
gyroADCöãr
[axis]>>1;

41 i‡(!
ACC
Ë
imu
.
accADC
[
axis
]=0;

43 #i‡
	`deföed
(
GYRO_SMOOTHING
)

44 
öt16_t
 
gyroSmoŸh
[3] = {0,0,0};

45 
axis
 = 0;áxis < 3;áxis++) {

46 
imu
.
gyroD©a
[
axis
] = (
öt16_t
Ë––(
öt32_t
)((öt32_t)
gyroSmoŸh
[axis] * (
c⁄f
.
SmoŸhög
[axis]-1) )+imu.gyroData[axis]+1 ) / conf.Smoothing[axis]);

47 
gyroSmoŸh
[
axis
] = 
imu
.
gyroD©a
[axis];

49 #ñi‡
	`deföed
(
TRI
)

50 
öt16_t
 
gyroYawSmoŸh
 = 0;

51 
imu
.
gyroD©a
[
YAW
] = (
gyroYawSmoŸh
*2+imu.gyroData[YAW])/3;

52 
gyroYawSmoŸh
 = 
imu
.
gyroD©a
[
YAW
];

54 
	}
}

79 #i‚de‡
ACC_LPF_FACTOR


80 
	#ACC_LPF_FACTOR
 4

82 

	)

85 #i‚de‡
GYR_CMPF_FACTOR


86 
	#GYR_CMPF_FACTOR
 10

88 

	)

91 
	#GYR_CMPFM_FACTOR
 8

92 

	)

95 
öt32_t
 
	mX
,
	mY
,
	mZ
;

96 } 
	tt_öt32_t_ve˘‹_def
;

99 
uöt16_t
 
	mXL
; 
öt16_t
 
	mX
;

100 
uöt16_t
 
	mYL
; 
öt16_t
 
	mY
;

101 
uöt16_t
 
	mZL
; 
öt16_t
 
	mZ
;

102 } 
	tt_öt16_t_ve˘‹_def
;

106 
öt32_t
 
	mA32
[3];

107 
t_öt32_t_ve˘‹_def
 
	mV32
;

108 
öt16_t
 
	mA16
[6];

109 
t_öt16_t_ve˘‹_def
 
	mV16
;

110 } 
	tt_öt32_t_ve˘‹
;

113 
öt16_t
 
	$_©™2
(
öt32_t
 
y
, i¡32_à
x
){

114 
z
 = 
y
;

115 
öt16_t
 
a
;

116 
uöt8_t
 
c
;

117 
c
 = 
	`abs
(
y
Ë<ábs(
x
);

118 i‡–
c
 ) {
z
 = z / 
x
;} {z = x / z;}

119 
a
 = 2046.43 * (
z
 / (3.5714 + z * z));

120 i‡–
c
 ){

121 i‡(
x
<0) {

122 i‡(
y
<0Ë
a
 -= 1800;

123 
a
 += 1800;

126 
a
 = 900 -á;

127 i‡(
y
<0Ë
a
 -= 1800;

129  
a
;

130 
	}
}

132 
	$InvSqπ
 (
x
){

134 
öt32_t
 
i
;

135 
f
;

136 } 
c⁄v
;

137 
c⁄v
.
f
 = 
x
;

138 
c⁄v
.
i
 = 0x5f1ffff9 - (conv.i >> 1);

139  
c⁄v
.
f
 * (1.68191409‡- 0.703952253‡* 
x
 * conv.f * conv.f);

140 
	}
}

145 
	#Mu…iS16X16to32
(
l⁄gRes
, 
ötIn1
, 
ötIn2
) \

146 
asm
 volatile ( \

164 "=&r" (
l⁄gRes
) \

166 "a" (
ötIn1
), \

167 "a" (
ötIn2
) \

170 )

	)

172 
öt32_t
 
__©åibuã__
 ((
noölöe
)Ë
	$mul
(
öt16_t
 
a
, i¡16_à
b
) {

173 
öt32_t
 
r
;

174 
	`Mu…iS16X16to32
(
r
, 
a
, 
b
);

176  
r
;

177 
	}
}

180 
	$rŸ©eV32
–
t_öt32_t_ve˘‹
 *
v
,
öt16_t
* 
dñè
) {

181 
öt16_t
 
X
 = 
v
->
V16
.X;

182 
öt16_t
 
Y
 = 
v
->
V16
.Y;

183 
öt16_t
 
Z
 = 
v
->
V16
.Z;

185 
v
->
V32
.
Z
 -
	`mul
(
dñè
[
ROLL
] , 
X
Ë+ mul(dñè[
PITCH
] , 
Y
);

186 
v
->
V32
.
X
 +
	`mul
(
dñè
[
ROLL
] , 
Z
Ë- mul(dñè[
YAW
] , 
Y
);

187 
v
->
V32
.
Y
 +
	`mul
(
dñè
[
PITCH
] , 
Z
Ë+ mul(dñè[
YAW
] , 
X
);

188 
	}
}

190 
öt16_t
 
	gaccZ
=0;

192 
	$gëE°im©edAâôude
(){

193 
uöt8_t
 
axis
;

194 
öt32_t
 
accMag
 = 0;

195 
sˇÀ
;

196 
öt16_t
 
dñèGyroAngÀ16
[3];

197 
t_öt32_t_ve˘‹
 
E°G
 = {0,0,(
öt32_t
)
ACC_1G
<<16};

198 #i‡
MAG


199 
t_öt32_t_ve˘‹
 
E°M
;

201 
t_öt32_t_ve˘‹
 
E°M
 = {0,(
öt32_t
)1<<24,0};

203 
uöt32_t
 
LPFAcc
[3];

204 
övG
;

205 
öt16_t
 
accZoff£t
 = 0;

206 
öt32_t
 
accZ_tmp
=0;

207 
uöt16_t
 
¥eviousT
;

208 
uöt16_t
 
cuºítT
 = 
	`mi¸os
();

212 
sˇÀ
 = (
cuºítT
 - 
¥eviousT
Ë* (
GYRO_SCALE
 * 65536);

213 
¥eviousT
 = 
cuºítT
;

216 
axis
 = 0;áxis < 3;áxis++) {

218 
imu
.
accSmoŸh
[
axis
] = 
LPFAcc
[axis]>>
ACC_LPF_FACTOR
;

219 
LPFAcc
[
axis
] +
imu
.
accADC
[axis] - imu.
accSmoŸh
[axis];

221 
accMag
 +
	`mul
(
imu
.
accSmoŸh
[
axis
] , imu.accSmooth[axis]);

224 
dñèGyroAngÀ16
[
axis
] = 
imu
.
gyroADC
[axis] * 
sˇÀ
;

230 
	`rŸ©eV32
(&
E°G
,
dñèGyroAngÀ16
);

231 
	`rŸ©eV32
(&
E°M
,
dñèGyroAngÀ16
);

236 
axis
 = 0;áxis < 3;áxis++) {

237 i‡–(
öt16_t
)(0.85*
ACC_1G
*ACC_1G/256Ë< (öt16_t)(
accMag
>>8) && (int16_t)(accMag>>8) < (int16_t)(1.15*ACC_1G*ACC_1G/256) )

238 
E°G
.
A32
[
axis
] +(
öt32_t
)(
imu
.
accSmoŸh
[axis] - E°G.
A16
[2*axis+1])<<(16-
GYR_CMPF_FACTOR
);

239 
accZ_tmp
 +
	`mul
(
imu
.
accSmoŸh
[
axis
] , 
E°G
.
A16
[2*axis+1]);

240 #i‡
MAG


241 
E°M
.
A32
[
axis
] +(
öt32_t
)(
imu
.
magADC
[axis] - E°M.
A16
[2*axis+1])<<(16-
GYR_CMPFM_FACTOR
);

245 i‡(
E°G
.
V16
.
Z
 > 
ACCZ_25deg
)

246 
f
.
SMALL_ANGLES_25
 = 1;

248 
f
.
SMALL_ANGLES_25
 = 0;

251 
öt32_t
 
sqGX_sqGZ
 = 
	`mul
(
E°G
.
V16
.
X
,E°G.V16.XË+ mul(E°G.V16.
Z
,EstG.V16.Z);

252 
övG
 = 
	`InvSqπ
(
sqGX_sqGZ
 + 
	`mul
(
E°G
.
V16
.
Y
,EstG.V16.Y));

253 
©t
.
™gÀ
[
ROLL
] = 
	`_©™2
(
E°G
.
V16
.
X
 , E°G.V16.
Z
);

254 
©t
.
™gÀ
[
PITCH
] = 
	`_©™2
(
E°G
.
V16
.
Y
 , 
	`InvSqπ
(
sqGX_sqGZ
)*sqGX_sqGZ);

257 
©t
.
hódög
 = 
	`_©™2
(

258 
	`mul
(
E°M
.
V16
.
Z
 , 
E°G
.V16.
X
) - mul(EstM.V16.X , EstG.V16.Z),

259 (
E°M
.
V16
.
Y
 * 
sqGX_sqGZ
 - (
	`mul
(E°M.V16.
X
 , 
E°G
.V16.XË+ mul(E°M.V16.
Z
 , E°G.V16.Z)Ë* E°G.V16.Y)*
övG
 );

260 #i‡
MAG


261 
©t
.
hódög
 +
c⁄f
.
mag_de˛ö©i⁄
;

263 
©t
.
hódög
 /= 10;

265 #i‡
	`deföed
(
THROTTLE_ANGLE_CORRECTION
)

266 
cosZ
 = 
	`mul
(
E°G
.
V16
.
Z
 , 100Ë/ 
ACC_1G
 ;

267 
thrŸéeAngÀC‹ª˘i⁄
 = 
THROTTLE_ANGLE_CORRECTION
 * 
	`c⁄°øö
(100 - 
cosZ
, 0, 100) >>3;

272 
accZ
 = 
accZ_tmp
 * 
övG
;

273 i‡(!
f
.
ARMED
) {

274 
accZoff£t
 -=áccZoffset>>3;

275 
accZoff£t
 +
accZ
;

277 
accZ
 -
accZoff£t
>>3;

278 
	}
}

280 
	#UPDATE_INTERVAL
 25000

281 
	#BARO_TAB_SIZE
 21

	)

283 
	#ACC_Z_DEADBAND
 (
ACC_1G
>>5)

284 

	)

286 
	#≠∂yDódb™d
(
vÆue
, 
dódb™d
) \

287 if(
	`abs
(
vÆue
Ë< 
dódb™d
) { \

288 
vÆue
 = 0; \

289 } if(
vÆue
 > 0){ \

290 
vÆue
 -
dódb™d
; \

291 } if(
vÆue
 < 0){ \

292 
vÆue
 +
dódb™d
; \

293 }

	)

297 #i‡
BARO
 || 
SONAR


298 
öt32_t
 
	gB¨oHome
 = 0;

299 
öt32_t
 
	gœ°S⁄¨A…
 = 0;

301 
uöt8_t
 
	$gëE°im©edA…ôude
(){

302 
öt32_t
 
B¨oA…
;

303 
b¨oGroundTem≥øtuªSˇÀ
,
logB¨oGroundPªssuªSum
;

304 
vñ
 = 0.0f;

305 
uöt16_t
 
¥eviousT
;

306 
uöt16_t
 
cuºítT
 = 
	`mi¸os
();

307 
uöt16_t
 
dTime
;

309 
dTime
 = 
cuºítT
 - 
¥eviousT
;

310 i‡(
dTime
 < 
UPDATE_INTERVAL
)  0;

311 
¥eviousT
 = 
cuºítT
;

313 if(
ˇlibøtögB
 > 0) {

314 
logB¨oGroundPªssuªSum
 = 
	`log
(
b¨oPªssuªSum
);

315 
b¨oGroundTem≥øtuªSˇÀ
 = ((
öt32_t
)
b¨oTem≥øtuª
 + 27315) * (2 * 29.271267f);

316 
ˇlibøtögB
--;

321 
B¨oA…
 = ( 
logB¨oGroundPªssuªSum
 - 
	`log
(
b¨oPªssuªSum
ËË* 
b¨oGroundTem≥øtuªSˇÀ
;

323 #i‚de‡
ArdH©


324 
Æt
.
E°A…
 = (Æt.E°A… * 6 + 
B¨oA…
) >> 3;

327 #i‡
SONAR


328 i‡(
f
.
SONAR_MODE
) {

329 i‡(
ˇlibøtögS
 > 0) {

330 i‡(!
f
.
ARMED
) {

333 
B¨oHome
 = (
Æt
.
E°A…
 * 6 + 
B¨oA…
 * 2) >> 3;

336 
ˇlibøtögS
--;

343 #i‡
BARO
 && !
SONAR


344 
Æt
.
E°A…
 = (Æt.E°A… * 6 + 
B¨oA…
) >> 3;

345 #ñi‡
SONAR
 && !
BARO


346 
Æt
.
E°A…
 =á….E°A… * 
SONAR_BARO_LPF_LC
 + 
s⁄¨A…
 * (1 - SONAR_BARO_LPF_LC);

347 #ñi‡
SONAR
 && 
BARO


369 i‡(
s⁄¨A…
 > 
SONAR_MAX_HOLD
) {

370 
s⁄¨A…
 = 
SONAR_MAX_HOLD
;

373 
Æt
.
E°A…
 =á….E°A… * 
SONAR_BARO_LPF_LC
 + 
s⁄¨A…
 * (1 - SONAR_BARO_LPF_LC);

397 
debug
[0] = 
s⁄¨A…
;

399 
debug
[1] = 
Æt
.
E°A…
;

401 #i‡(
	`deföed
(
VARIOMETER
Ë&& (VARIOMETER !2)Ë|| !deföed(
SUPPRESS_BARO_ALTHOLD
)

403 
öt16_t
 
îr‹16
 = 
	`c⁄°øö
(
A…Hﬁd
 - 
Æt
.
E°A…
, -300, 300);

404 
	`≠∂yDódb™d
(
îr‹16
, 10);

405 
B¨oPID
 = 
	`c⁄°øö
((
c⁄f
.
pid
[
PIDALT
].
P8
 * 
îr‹16
 >>7), -150, +150);

408 
îr‹A…ôudeI
 +
c⁄f
.
pid
[
PIDALT
].
I8
 * 
îr‹16
 >>6;

409 
îr‹A…ôudeI
 = 
	`c⁄°øö
(errorAltitudeI,-30000,30000);

410 
B¨oPID
 +
îr‹A…ôudeI
>>9;

412 
	`≠∂yDódb™d
(
accZ
, 
ACC_Z_DEADBAND
);

414 
öt32_t
 
œ°B¨oA…
;

416 
öt16_t
 
b¨oVñ
 = 
	`mul
((
Æt
.
E°A…
 - 
œ°B¨oA…
Ë, (1000000 / 
UPDATE_INTERVAL
));

418 
œ°B¨oA…
 = 
Æt
.
E°A…
;

420 
b¨oVñ
 = 
	`c⁄°øö
(baroVel, -300, 300);

421 
	`≠∂yDódb™d
(
b¨oVñ
, 10);

424 
vñ
 +
accZ
 * 
ACC_VñSˇÀ
 * 
dTime
;

428 
vñ
 = vñ * 0.985‡+ 
b¨oVñ
 * 0.015f;

431 
Æt
.
v¨io
 = 
vñ
;

432 
	`≠∂yDódb™d
(
Æt
.
v¨io
, 5);

433 
B¨oPID
 -
	`c⁄°øö
(
c⁄f
.
pid
[
PIDALT
].
D8
 * 
Æt
.
v¨io
 >>4, -150, 150);

436 
	}
}

	@IMU.h

1 #i‚de‡
IMU_H_


2 
	#IMU_H_


	)

4 
	#BARO_TAB_SIZE
 21

	)

6 #i‡
BARO


7 
uöt8_t
 
gëE°im©edA…ôude
();

10 
compuãIMU
();

11 
öt32_t
 
mul
(
öt16_t
 
a
, i¡16_à
b
);

	@LCD.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"ty≥s.h
"

5 
	~"Mu…iWii.h
"

6 
	~"Aœrms.h
"

7 
	~"EEPROM.h
"

8 
	~"Ouçut.h
"

9 
	~"RX.h
"

10 
	~"Sîül.h
"

11 
	~"Sís‹s.h
"

12 
	~"LCD.h
"

14 
__u8Inc
(* 
v¨
, 
öt16_t
 
öc
);

15 
__s8Inc
(* 
v¨
, 
öt16_t
 
öc
);

16 
__u16Inc
(* 
v¨
, 
öt16_t
 
öc
);

17 
__s16Inc
(* 
v¨
, 
öt16_t
 
öc
);

18 
__nuŒInc
(* 
v¨
, 
öt16_t
 
öc
);

19 
__u8Fmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

20 
__u16Fmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

21 
__s8BôsFmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

22 
__s16Fmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

23 
__uAuxFmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
, uöt8_à
aux
);

24 
__uAuxFmt1
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

25 
__uAuxFmt2
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

26 
__uAuxFmt3
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

27 
__uAuxFmt4
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

28 
__upMFmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
);

30 
£rvi˚CheckPLog
();

31 
i2c_˛ór_OLED
();

32 
LCD√xéöe
();

33 
i2c_OLED_DIGOLE_£nd_°rög
(c⁄° *
°rög
);

40 #i‡
deföed
(
LCD_CONF
Ë|| deföed(
LCD_TELEMETRY
Ë|| deföed(
HAS_LCD
)

41 
	glöe1
[17],
	glöe2
[17];

42 
	gãm∂©e7
[7] = " .... ";

43 
	gãm∂©e3
[3] = ". ";

46 #ifde‡
DISPLAY_FONT_DSIZE


47 
uöt8_t
 
	glöe_is_vÆid
 = 0;

49 #i‡–
deföed
(
LOG_PERMANENT
Ë&& deföed(
DISPLAY_MULTILINE
) )

50 
uöt8_t
 
	g r
 = 0;

53 
	#LCD_FLUSH
 { 
	`dñay
(30); }

	)

55 
	$digô10000
(
uöt16_t
 
v
Ë{ '0' + v / 10000;
	}
}

56 
	$digô1000
(
uöt16_t
 
v
Ë{ '0' + v / 1000 - (v/10000Ë* 10;
	}
}

57 
	$digô100
(
uöt16_t
 
v
Ë{ '0' + v / 100 - (v/1000Ë* 10;
	}
}

58 
	$digô10
(
uöt16_t
 
v
Ë{ '0' + v / 10 - (v/100Ë* 10;
	}
}

59 
	$digô1
(
uöt16_t
 
v
Ë{ '0' + v - (v/10Ë* 10;
	}
}

61 #i‡
deföed
(
OLED_I2C_128x64
)

65 
	#OLED_addªss
 0x3C

66 
LINE_FILL_STRING
[] = " ";

67 
CHAR_FORMAT
 = 0;

70 
buf„r
;

71 c⁄° 
uöt8_t
 
PROGMEM
 
LOGO
[] = {

72 0x00, 0x00, 0x02, 0xFE, 0xFE, 0x0E, 0xFC, 0xF8, 0xC0, 0x00, 0xC0, 0xF8, 0xFC, 0x0E, 0xFE, 0xFE,

	)

139 c⁄° 
uöt8_t
 
PROGMEM
 
	gmyF⁄t
[][5] = {

271 
	$i2c_OLED_£nd_cmd
(
uöt8_t
 
comm™d
) {

272 
TWBR
 = ((
F_CPU
 / 400000L) - 16) / 2;

273 
	`i2c_wrôeReg
(
OLED_addªss
, 0x80, (
uöt8_t
)
comm™d
);

274 
	}
}

276 
	$i2c_OLED_£nd_byã
(
uöt8_t
 
vÆ
) {

277 
TWBR
 = ((
F_CPU
 / 400000L) - 16) / 2;

278 
	`i2c_wrôeReg
(
OLED_addªss
, 0x40, (
uöt8_t
)
vÆ
);

279 
	}
}

281 
	$i2c_OLED_öô
(){

282 
	`i2c_OLED_£nd_cmd
(0xae);

283 
	`i2c_OLED_£nd_cmd
(0xa4);

285 
	`dñay
(50);

286 
	`i2c_OLED_£nd_cmd
(0x20);

287 
	`i2c_OLED_£nd_cmd
(0x02);

289 
	`i2c_OLED_£nd_cmd
(0xa1);

291 
	`i2c_OLED_£nd_cmd
(0xC8);

292 
	`i2c_OLED_£nd_cmd
(0xa6);

294 
	`i2c_OLED_£nd_cmd
(0x81);

295 
	`i2c_OLED_£nd_cmd
(0xaf);

301 #ifde‡
DISPLAY_FONT_DSIZE


302 
	`i2c_OLED_£nd_cmd
(0xd6);

303 
	`i2c_OLED_£nd_cmd
(0x01);

308 
	`dñay
(20);

309 
	`i2c_OLED_£nd_cmd
(0xaf);

310 
	`dñay
(20);

311 
	}
}

313 
	$i2c_OLED_£nd_ch¨
(
ascii
){

314 
i
;

315 
i
=0;i<5;i++){

316 
buf„r
 = 
	`pgm_ªad_byã
(&(
myF⁄t
[
ascii
 - 32][
i
]));

317 
buf„r
 ^
CHAR_FORMAT
;

318 
	`i2c_OLED_£nd_byã
(
buf„r
);

320 
	`i2c_OLED_£nd_byã
(
CHAR_FORMAT
);

321 
	}
}

323 
	$i2c_OLED_£nd_°rög
(c⁄° *
°rög
){

324 
i
=0;

325 *
°rög
){

326 
i
=0;i<5;i++){

327 
buf„r
 = 
	`pgm_ªad_byã
(&(
myF⁄t
[(*
°rög
)- 32][
i
]));

328 
buf„r
 ^
CHAR_FORMAT
;

329 
	`i2c_OLED_£nd_byã
(()
buf„r
);

331 
	`i2c_OLED_£nd_byã
(
CHAR_FORMAT
);

332 *
°rög
++;

334 
	}
}

336 #i‚de‡
SUPPRESS_OLED_I2C_128x64LOGO


337 
	$i2c_OLED_£nd_logo
(){

338 
i
,
j
;

339 
	`i2c_OLED_£nd_cmd
(0xa6);

340 
	`i2c_OLED_£nd_cmd
(0xae);

341 
	`i2c_OLED_£nd_cmd
(0x20);

342 
	`i2c_OLED_£nd_cmd
(0x00);

343 
	`i2c_OLED_£nd_cmd
(0xb0);

344 
	`i2c_OLED_£nd_cmd
(0X40);

345 
	`i2c_OLED_£nd_cmd
(0);

346 
	`i2c_OLED_£nd_cmd
(0x10);

347 
uöt16_t
 
k
=0; k<1024; k++) {

348 
buf„r
 = 
	`pgm_ªad_byã
(&(
LOGO
[
k
]));

349 
	`i2c_OLED_£nd_byã
(
buf„r
);

351 
	`i2c_OLED_£nd_cmd
(0x81);

352 
	`i2c_OLED_£nd_cmd
(0x0);

353 
	`i2c_OLED_£nd_cmd
(0xaf);

354 
j
=0; j<2; j++){

355 
i
=0x01; i<0xff; i++){

356 
	`i2c_OLED_£nd_cmd
(0x81);

357 
	`i2c_OLED_£nd_cmd
(
i
);

358 
	`dñay
(1);

360 
i
=0xff; i>0x01; i--){

361 
	`i2c_OLED_£nd_cmd
(0x81);

362 
	`i2c_OLED_£nd_cmd
(
i
);

363 
	`dñay
(1);

366 
	`i2c_OLED_öô
();

367 
	`i2c_˛ór_OLED
();

368 
	}
}

369 #i‡
deföed
 (
OLED_I2C_128x64LOGO_PERMANENT
)

370 
	$i2c_OLED_Put_Logo
(){

371 
i
,
j
;

372 
	`i2c_OLED_£nd_cmd
(0xa6);

373 
	`i2c_OLED_£nd_cmd
(0xae);

374 
	`i2c_OLED_£nd_cmd
(0x20);

375 
	`i2c_OLED_£nd_cmd
(0x00);

376 
	`i2c_OLED_£nd_cmd
(0xb0);

377 
	`i2c_OLED_£nd_cmd
(0X40);

378 
	`i2c_OLED_£nd_cmd
(0);

379 
	`i2c_OLED_£nd_cmd
(0x10);

380 
i
=0; i<1024; i++) {

381 
buf„r
 = 
	`pgm_ªad_byã
(&(
LOGO
[
i
]));

382 
	`i2c_OLED_£nd_byã
(
buf„r
);

384 
	`i2c_OLED_£nd_cmd
(0x81);

385 
	`i2c_OLED_£nd_cmd
(250);

386 
	`i2c_OLED_£nd_cmd
(0xaf);

387 
	}
}

392 
	$i2c_OLED_£t_XY
(
byã
 
cﬁ
, byã 
row
) {

393 
	`i2c_OLED_£nd_cmd
(0xb0+
row
);

394 
	`i2c_OLED_£nd_cmd
(0x00+(8*
cﬁ
&0x0f));

395 
	`i2c_OLED_£nd_cmd
(0x10+((8*
cﬁ
>>4)&0x0f));

396 
	}
}

398 
	$i2c_OLED_£t_löe
(
byã
 
row
) {

399 
	`i2c_OLED_£nd_cmd
(0xb0+
row
);

400 
	`i2c_OLED_£nd_cmd
(0);

401 
	`i2c_OLED_£nd_cmd
(0x10);

402 
	}
}

404 
	$i2c_˛ór_OLED
(){

410 
	`i2c_OLED_£nd_cmd
(0xa6);

411 
	`i2c_OLED_£nd_cmd
(0xae);

412 
	`i2c_OLED_£nd_cmd
(0x20);

413 
	`i2c_OLED_£nd_cmd
(0x00);

414 
	`i2c_OLED_£nd_cmd
(0xb0);

415 
	`i2c_OLED_£nd_cmd
(0X40);

416 
	`i2c_OLED_£nd_cmd
(0);

417 
	`i2c_OLED_£nd_cmd
(0x10);

418 
uöt16_t
 
i
=0; i<1024; i++) {

419 
	`i2c_OLED_£nd_byã
(0);

421 
	`i2c_OLED_£nd_cmd
(0x81);

422 
	`i2c_OLED_£nd_cmd
(200);

423 
	`i2c_OLED_£nd_cmd
(0xaf);

424 
	}
}

428 #i‡
deföed
(
LCD_ETPP
)

429 
	#LCD_ETPP_ADDRESS
 0x3B

	)

434 
	$i2c_ETPP_öô
 () {

435 
	`i2c_ªp_°¨t
(
LCD_ETPP_ADDRESS
<<1);

436 
	`i2c_wrôe
(0x00);

437 
	`i2c_wrôe
(0x24);

438 
	`i2c_wrôe
(0x0C);

439 
	`i2c_wrôe
(0x06);

440 
	`LCD˛ór
();

441 
	}
}

442 
	$i2c_ETPP_£nd_cmd
 (
byã
 
c
) {

443 
	`i2c_ªp_°¨t
(
LCD_ETPP_ADDRESS
<<1);

444 
	`i2c_wrôe
(0x00);

445 
	`i2c_wrôe
(
c
);

446 
	}
}

447 
	$i2c_ETPP_£nd_ch¨
 (
c
) {

448 i‡(
c
 > 0x0f) c |= 0x80;

449 
	`i2c_ªp_°¨t
(
LCD_ETPP_ADDRESS
<<1);

450 
	`i2c_wrôe
(0x40);

451 
	`i2c_wrôe
(
c
);

452 
	}
}

454 
	$i2c_ETPP_£t_curs‹
 (
byã
 
addr
) {

455 
	`i2c_ETPP_£nd_cmd
(0x80 | 
addr
);

456 
	}
}

457 
	$i2c_ETPP_£t_curs‹
 (
byã
 
cﬁ
, byã 
row
) {

458 
row
 = 
	`mö
(row,1);

459 
cﬁ
 = 
	`mö
(col,15);

460 
byã
 
addr
 = 
cﬁ
 + 
row
 * 0x40;

461 
	`i2c_ETPP_£t_curs‹
(
addr
);

462 
	}
}

463 
	$i2c_ETPP_¸óã_ch¨
 (
byã
 
idx
, 
uöt8_t
* 
¨øy
) {

464 
	`i2c_ETPP_£nd_cmd
(0x80);

465 
	`i2c_ETPP_£nd_cmd
(0x40 | 
	`byã
(
idx
 * 8));

466 
	`i2c_ªp_°¨t
(
LCD_ETPP_ADDRESS
<<1);

467 
	`i2c_wrôe
(0x40);

468 
byã
 
i
 = 0; i<8; i++Ë{
	`i2c_wrôe
(*
¨øy
);árray++;}

469 
	}
}

471 
boﬁón
 
	gch¨sInôülized
;

472 
	$ETPP_b¨Gøph
(
byã
 
num
, 
vÆ
) {

473 i‡(!
ch¨sInôülized
) {

474 
ch¨sInôülized
 = 
åue
;

476 
byã
 
b¨s
[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15,};

477 
byã
 
Àss
[8] = {0x00, 0x04, 0x0C, 0x1C, 0x0C, 0x04, 0x00, 0x15,};

478 
byã
 
gπ
 [8] = {0x00, 0x04, 0x06, 0x07, 0x06, 0x04, 0x00, 0x15,};

480 
byã
 
∑âîn
 = 0x10;

481 
öt8_t
 
i
 = 0; i <= 5; i++) {

482 
öt8_t
 
j
 = 0; j < 7; j++) {

483 
b¨s
[
j
] = 
∑âîn
;

485 
	`i2c_ETPP_¸óã_ch¨
(
i
, 
b¨s
);

486 
∑âîn
 >>= 1;

488 
	`i2c_ETPP_¸óã_ch¨
(6, 
Àss
);

489 
	`i2c_ETPP_¸óã_ch¨
(7, 
gπ
);

492 
b¨
[16];

493 
öt8_t
 
i
 = 0; i < 
num
; i++Ë{
b¨
[i] = 5;}

495 i‡(
vÆ
 < -100 || vÆ > 100Ë{
b¨
[0] = 6; b¨[
num
] = 7;}

496 i‡(
vÆ
 < 0Ë{
b¨
[0] = 6;}

497 i‡(
vÆ
 >100Ë{
b¨
[3] = 7;}

498 {
b¨
[
vÆ
/(100/
num
)] = (val%(100/num))/5;}

500 
öt8_t
 
i
 = 0; i < 
num
; i++) {

501 
	`i2c_ETPP_£nd_ch¨
(
b¨
[
i
]);

503 
	}
}

506 #i‡
deföed
(
LCD_LCD03
)

507 
	#LCD_LCD03_ADDRESS
 0x63

	)

511 
	$i2c_LCD03_öô
 () {

512 
	`i2c_ªp_°¨t
(
LCD_LCD03_ADDRESS
<<1);

513 
	`i2c_wrôe
(0x00);

514 
	`i2c_wrôe
(04);

515 
	`i2c_wrôe
(12);

516 
	`i2c_wrôe
(19);

517 
	}
}

518 
	$i2c_LCD03_£nd_cmd
 (
byã
 
c
) {

519 
	`i2c_ªp_°¨t
(
LCD_LCD03_ADDRESS
<<1);

520 
	`i2c_wrôe
(0x00);

521 
	`i2c_wrôe
(
c
);

522 
	}
}

523 
	$i2c_LCD03_£nd_ch¨
 (
c
) {

524 
	`i2c_ªp_°¨t
(
LCD_LCD03_ADDRESS
<<1);

525 
	`i2c_wrôe
(0x00);

526 
	`i2c_wrôe
(
c
);

527 
	}
}

528 
	$i2c_LCD03_£t_curs‹
 (
byã
 
cﬁ
, byã 
row
) {

529 
row
 = 
	`mö
(row,1);

530 
cﬁ
 = 
	`mö
(col,15);

531 
	`i2c_LCD03_£nd_cmd
(03);

532 
	`i2c_LCD03_£nd_cmd
(
row
+1);

533 
	`i2c_LCD03_£nd_cmd
(
cﬁ
+1);

534 
	}
}

537 #i‡
deföed
(
LCD_LCD03S
)

541 
	$£rül_LCD03_öô
 () {

542 
	`SîülWrôe
(
LCD_SERIAL_PORT
, 0x00 );

543 
	`SîülWrôe
(
LCD_SERIAL_PORT
, 04 );

544 
	`SîülWrôe
(
LCD_SERIAL_PORT
, 12 );

545 
	`SîülWrôe
(
LCD_SERIAL_PORT
, 19 );

546 
	}
}

547 
	$£rül_LCD03_£nd_cmd
 (
byã
 
c
) {

548 
	`SîülWrôe
(
LCD_SERIAL_PORT
, 0x00 );

549 
	`SîülWrôe
(
LCD_SERIAL_PORT
, 
c
 );

550 
	}
}

551 
	$£rül_LCD03_£nd_ch¨
 (
c
) {

553 
	`SîülWrôe
(
LCD_SERIAL_PORT
, 
c
 );

554 
	}
}

555 
	$£rül_LCD03_£t_curs‹
 (
byã
 
cﬁ
, byã 
row
) {

556 
row
 = 
	`mö
(row,1);

557 
cﬁ
 = 
	`mö
(col,15);

558 
	`£rül_LCD03_£nd_cmd
(03);

559 
	`£rül_LCD03_£nd_ch¨
(
row
+1);

560 
	`£rül_LCD03_£nd_ch¨
(
cﬁ
+1);

561 
	}
}

564 #i‡
deföed
(
OLED_DIGOLE
)

565 
	#OLED_DIGOLE_ADDRESS
 0x27

569 
	`i2c_OLED_DIGOLE_öô
 (Ë{

	)

570 
i2c_OLED_DIGOLE_£nd_°rög
("CL");

574 
i2c_OLED_DIGOLE_£nd_°rög
("CT");

575 
i2c_wrôe
(100);

589 
	$i2c_OLED_DIGOLE_£nd_byã
 (
byã
 
c
) {

590 
	`i2c_ªp_°¨t
(
OLED_DIGOLE_ADDRESS
<<1);

591 
	`i2c_wrôe
(0x00);

592 
	`i2c_wrôe
(
c
);

593 
	}
}

594 
	$i2c_OLED_DIGOLE_£nd_°rög
(c⁄° *
°rög
){

595 
	`i2c_ªp_°¨t
(
OLED_DIGOLE_ADDRESS
<<1);

596 
	`i2c_wrôe
(0x00);

597 *
°rög
){

598 
	`i2c_wrôe
(*
°rög
);

599 *
°rög
++;

602 
	}
}

603 
	$i2c_OLED_DIGOLE_¥ötSåög
(c⁄° *
°rög
){

608 
	`i2c_OLED_DIGOLE_£nd_°rög
("TT");

609 *
°rög
){

610 
	`i2c_wrôe
(*
°rög
);

611 *
°rög
++;

613 
	`i2c_wrôe
(0x00);

615 
	}
}

616 
	$i2c_OLED_DIGOLE_¥ötCh¨
(
c
){

617 
	`i2c_ªp_°¨t
(
OLED_DIGOLE_ADDRESS
<<1);

618 
	`i2c_wrôe
(0x00);

619 
	`i2c_wrôe
('T');

620 
	`i2c_wrôe
('T');

621 
	`i2c_wrôe
(
c
);

622 
	`i2c_wrôe
(0x00);

624 
	}
}

625 
	$i2c_OLED_DIGOLE_˛ór
() {

626 
	`i2c_OLED_DIGOLE_£nd_°rög
("CLSF");

627 #ifde‡
DISPLAY_FONT_DSIZE


628 
	`i2c_wrôe
(0);

630 
	`i2c_wrôe
(10);

632 
	}
}

635 
	$LCD¥öt
(
uöt8_t
 
i
) {

636 #ifde‡
DISPLAY_FONT_DSIZE


637 i‡(! 
löe_is_vÆid
) ;

639 #i‡
	`deföed
(
LCD_SERIAL3W
)

642 
	#BITDELAY
 102

	)

643 
LCDPIN_OFF
;

644 
	`dñayMi¸o£c⁄ds
(
BITDELAY
);

645 
uöt8_t
 
mask
 = 0x01; mask; mask <<= 1) {

646 i‡(
i
 & 
mask
Ë{
LCDPIN_ON
;} {
LCDPIN_OFF
;}

647 
	`dñayMi¸o£c⁄ds
(
BITDELAY
);

649 
LCDPIN_ON


650 
	`dñayMi¸o£c⁄ds
(
BITDELAY
);

651 #ñi‡
	`deföed
(
LCD_TEXTSTAR
Ë|| deföed(
LCD_VT100
Ë|| deföed(
LCD_TTY
)

652 
	`SîülWrôe
(
LCD_SERIAL_PORT
, 
i
 );

653 #ñi‡
	`deföed
(
LCD_ETPP
)

654 
	`i2c_ETPP_£nd_ch¨
(
i
);

655 #ñi‡
	`deföed
(
LCD_LCD03
)

656 
	`i2c_LCD03_£nd_ch¨
(
i
);

657 #ñi‡
	`deföed
(
LCD_LCD03S
)

658 
	`£rül_LCD03_£nd_ch¨
(
i
);

659 #ñi‡
	`deföed
(
OLED_I2C_128x64
)

660 
	`i2c_OLED_£nd_ch¨
(
i
);

661 #ñi‡
	`deföed
(
OLED_DIGOLE
)

662 
	`i2c_OLED_DIGOLE_¥ötCh¨
(
i
);

664 
	}
}

666 
	$LCD¥ötCh¨
(c⁄° *
s
) {

667 #ifde‡
OLED_DIGOLE


668 #ifde‡
DISPLAY_FONT_DSIZE


669 i‡(! 
löe_is_vÆid
) ;

671 
	`i2c_OLED_DIGOLE_¥ötSåög
(
s
);

673 *
s
Ë{
	`LCD¥öt
(*s++);}

675 
	}
}

677 
	$LCD¸lf
() {

678 #i‡–
	`deföed
(
OLED_I2C_128x64
)|| deföed(
LCD_VT100
Ë|| deföed(
OLED_DIGOLE
) )

681 
	`LCD¥ötCh¨
("\r\n");

683 
	}
}

684 
	$LCD˛ór
() {

685 #i‡
	`deföed
(
LCD_SERIAL3W
)

686 
	`LCD¥öt
(0xFE);LCD¥öt(0x01);
	`dñay
(10);LCDprint(0xFE);LCDprint(0x02);delay(10);

687 #ñi‡
	`deföed
(
LCD_TEXTSTAR
)

688 
	`LCD¥öt
(0x0c);

689 #ñi‡
	`deföed
(
LCD_VT100
)

690 
	`LCD¸lf
();

691 
	`LCD¥öt
(0x1B); LCD¥öt(0x5B); 
	`LCD¥ötCh¨
("2J");

692 
	`LCD¸lf
();

693 
	`LCD¥öt
(0x1B); LCD¥öt(0x5B); 
	`LCD¥ötCh¨
("1;1H");

694 #ñi‡
	`deföed
(
LCD_TTY
)

695 
	`LCD¸lf
();

696 #ñi‡
	`deföed
(
LCD_ETPP
)

697 
	`i2c_ETPP_£nd_cmd
(0x01);

698 
byã
 
i
 = 0; i<80; i++Ë
	`i2c_ETPP_£nd_ch¨
(' ');

699 #ñi‡
	`deföed
(
LCD_LCD03
)

700 
	`i2c_LCD03_£nd_cmd
(12);

701 #ñi‡
	`deföed
(
LCD_LCD03S
)

702 
	`£rül_LCD03_£nd_cmd
(12);

703 #ñi‡
	`deföed
(
OLED_I2C_128x64
)

704 
	`i2c_˛ór_OLED
();

705 #ñi‡
	`deföed
(
OLED_DIGOLE
)

706 
	`i2c_OLED_DIGOLE_˛ór
();

708 #i‡–
	`deföed
(
LOG_PERMANENT
Ë&& deföed(
DISPLAY_MULTILINE
) )

709 
 r
 = 0;

711 
	}
}

713 
	$LCD£tLöe
(
byã
 
löe
) {

714 #ifde‡
DISPLAY_FONT_DSIZE


715 i‡(
löe
 >=1 &&Üöê<(
MULTILINE_PRE
+
MULTILINE_POST
)) {

716 
löe_is_vÆid
 = 1;

718 
löe_is_vÆid
 = 0;

722 #i‡
	`deföed
(
LCD_SERIAL3W
)

723 i‡(
löe
==1Ë{
	`LCD¥öt
(0xFE);LCDprint(128);} {LCDprint(0xFE);LCDprint(192);}

724 #ñi‡
	`deföed
(
LCD_TEXTSTAR
)

725 
	`LCD¸lf
(); 
	`LCD¥öt
(0x„);LCD¥öt('L');LCD¥öt(
löe
);

726 #ñi‡
	`deföed
(
LCD_VT100
)

727 #i‚de‡
DEBUG


728 i‡(
löe
<1 ||Üöe>(
MULTILINE_PRE
+
MULTILINE_POST
))Üine = 1;

730 
	`LCD¸lf
();

731 
	`LCD¥öt
(0x1b); LCDprint(0x5b);

732 
	`LCD¥öt
–
	`digô10
(
löe
) );

733 
	`LCD¥öt
–
	`digô1
(
löe
) );

734 
	`LCD¥ötCh¨
(";1H");

735 
	`LCD¥öt
(0x1b); LCD¥öt(0x5b); 
	`LCD¥ötCh¨
("2K");

736 #ñi‡
	`deföed
(
LCD_TTY
)

737 
	`LCD¸lf
();

738 #ñi‡
	`deföed
(
LCD_ETPP
)

739 
	`i2c_ETPP_£t_curs‹
(0,
löe
-1);

740 #ñi‡
	`deföed
(
LCD_LCD03
)

741 
	`i2c_LCD03_£t_curs‹
(0,
löe
-1);

742 #ñi‡
	`deföed
(
LCD_LCD03S
)

743 
	`£rül_LCD03_£t_curs‹
(0,
löe
-1);

744 #ñi‡
	`deföed
(
OLED_I2C_128x64
)

748 
	`i2c_OLED_£t_löe
(
löe
-1);

749 #ñi‡
	`deföed
(
OLED_DIGOLE
)

750 
	`i2c_OLED_DIGOLE_£nd_°rög
("TP"); 
	`i2c_wrôe
(0);i2c_wrôe(
löe
-1);

752 
	}
}

753 #i‡
deföed
(
LCD_VT100
)

754 
	$LCD©åibuãsBﬁd
(Ë{
	`LCD¥öt
(0x1b); LCD¥öt(0x5b); 
	`LCD¥ötCh¨
("1m");
	}
}

755 
	$LCD©åibuãsRevî£
(Ë{
	`LCD¥öt
(0x1b); LCD¥öt(0x5b); 
	`LCD¥ötCh¨
("7m");
	}
}

756 
	$LCD©åibuãsOff
(Ë{
	`LCD¥öt
(0x1b); LCD¥öt(0x5b); 
	`LCD¥ötCh¨
("0m");
	}
}

757 
	$LCDÆ¨mAndRevî£
(Ë{
	`LCD©åibuãsRevî£
(); i‡(
f
.
ARMED
Ë{ 
	`LCD¥öt
(0x07); }; 
	}
}

758 #ñi‡
deföed
(
OLED_I2C_128x64
)

759 
	$LCD©åibuãsBﬁd
(Ë{ 
	}
}

760 
	$LCD©åibuãsRevî£
(Ë{
CHAR_FORMAT
 = 0b01111111; 
	}
}

761 
	$LCD©åibuãsOff
(Ë{
CHAR_FORMAT
 = 0; 
	}
}

762 
	$LCDÆ¨mAndRevî£
(Ë{
	`LCD©åibuãsRevî£
(); 
	}
}

764 
	$LCD©åibuãsBﬁd
(Ë{
	}
}

765 
	$LCD©åibuãsRevî£
(Ë{
	}
}

766 
	$LCD©åibuãsOff
(Ë{
	}
}

767 
	$LCDÆ¨mAndRevî£
(Ë{
	}
}

770 
	$LCD¥ötI¡16
(
öt16_t
 
v
) {

771 
uöt16_t
 
unô
;

772 
löe
[7];

773 i‡(
v
 < 0 ) {

774 
unô
 = -
v
;

775 
löe
[0] = '-';

777 
unô
 = 
v
;

778 
löe
[0] = ' ';

780 
löe
[1] = 
	`digô10000
(
unô
);

781 
löe
[2] = 
	`digô1000
(
unô
);

782 
löe
[3] = 
	`digô100
(
unô
);

783 
löe
[4] = 
	`digô10
(
unô
);

784 
löe
[5] = 
	`digô1
(
unô
);

785 
löe
[6] = 0;

786 
	`LCD¥ötCh¨
(
löe
);

787 
	}
}

788 
	$lcd¥öt_uöt32
(
uöt32_t
 
v
) {

789 
löe
[14] = "-.---.---.---";

791 
löe
[0] = '0' + 
v
 / 1000000000;

792 
löe
[2] = '0' + 
v
 / 100000000 - (v/1000000000) * 10;

793 
löe
[3] = '0' + 
v
 / 10000000 - (v/100000000) * 10;

794 
löe
[4] = '0' + 
v
 / 1000000 - (v/10000000) * 10;

795 
löe
[6] = '0' + 
v
 / 100000 - (v/1000000) * 10;

796 
löe
[7] = '0' + 
v
 / 10000 - (v/100000) * 10;

797 
löe
[8] = '0' + 
v
 / 1000 - (v/10000) * 10;

798 
löe
[10] = '0' + 
v
 / 100 - (v/1000) * 10;

799 
löe
[11] = '0' + 
v
 / 10 - (v/100) * 10;

800 
löe
[12] = '0' + 
v
 - (v/10) * 10;

801 
	`LCD¥ötCh¨
(
löe
);

802 
	}
}

804 
	$öôLCD
() {

805 
	`blökLED
(20,30,1);

806 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_1
);

807 #i‡
	`deföed
(
LCD_SERIAL3W
)

808 
	`SîülEnd
(0);

810 
PINMODE_LCD
;

811 #ñi‡
	`deföed
(
LCD_TEXTSTAR
)

815 
	`LCD¥öt
(0xFE);LCDprint('R');

816 #ñi‡
	`deföed
(
LCD_VT100
)

818 #ñi‡
	`deföed
(
LCD_TTY
)

820 #ñi‡
	`deföed
(
LCD_ETPP
)

822 
	`i2c_ETPP_öô
();

823 #ñi‡
	`deföed
(
LCD_LCD03
)

826 
	`i2c_LCD03_öô
();

827 #ñi‡
	`deföed
(
LCD_LCD03S
)

830 
	`£rül_LCD03_öô
();

831 #ñi‡
	`deföed
(
OLED_I2C_128x64
)

832 
	`i2c_OLED_öô
();

833 #i‚de‡
SUPPRESS_OLED_I2C_128x64LOGO


834 
	`i2c_OLED_£nd_logo
();

835 #i‡
	`deföed
 (
OLED_I2C_128x64LOGO_PERMANENT
)

836 
	`i2c_OLED_Put_Logo
();

839 #ñi‡
	`deföed
(
OLED_DIGOLE
)

840 
	`i2c_OLED_DIGOLE_öô
();

842 #i‚de‡
OLED_I2C_128x64LOGO_PERMANENT


843 
	`LCD˛ór
();

844 
	`°r˝y_P
(
löe1
,
	`PSTR
–
BOARD_NAME
 ));

846 
löe1
[12] = 
	`digô100
(
VERSION
);

847 
löe1
[14] = 
	`digô10
(
VERSION
);

848 
löe1
[15] = 
	`digô1
(
VERSION
);

849 
	`LCD©åibuãsBﬁd
();

850 
	`LCD£tLöe
(1); 
	`LCD¥ötCh¨
(
löe1
);

851 
	`°r˝y_P
(
löe2
,
	`PSTR
(" Unknown Modell"));

852 #i‡
	`deföed
(
TRI
)

853 
	`°r˝y_P
(
löe2
,
	`PSTR
(" TRICopter"));

854 #ñi‡
	`deföed
(
QUADP
)

855 
	`°r˝y_P
(
löe2
,
	`PSTR
(" QUAD-P"));

856 #ñi‡
	`deföed
(
QUADX
)

857 
	`°r˝y_P
(
löe2
,
	`PSTR
(" QUAD-X"));

858 #ñi‡
	`deföed
(
BI
)

859 
	`°r˝y_P
(
löe2
,
	`PSTR
(" BICopter"));

860 #ñi‡
	`deföed
(
Y6
)

861 
	`°r˝y_P
(
löe2
,
	`PSTR
(" Y6"));

862 #ñi‡
	`deföed
(
HEX6
)

863 
	`°r˝y_P
(
löe2
,
	`PSTR
(" HEX6"));

864 #ñi‡
	`deföed
(
FLYING_WING
)

865 
	`°r˝y_P
(
löe2
,
	`PSTR
(" FLYING_WING"));

866 #ñi‡
	`deföed
(
Y4
)

867 
	`°r˝y_P
(
löe2
,
	`PSTR
(" Y4"));

868 #ñi‡
	`deföed
(
HEX6X
)

869 
	`°r˝y_P
(
löe2
,
	`PSTR
(" HEX6-X"));

870 #ñi‡
	`deföed
(
HEX6H
)

871 
	`°r˝y_P
(
löe2
,
	`PSTR
(" HEX6-H"));

872 #ñi‡
	`deföed
(
OCTOX8
)

873 
	`°r˝y_P
(
löe2
,
	`PSTR
(" OCTOX8"));

874 #ñi‡
	`deföed
(
OCTOFLATP
)

875 
	`°r˝y_P
(
löe2
,
	`PSTR
(" OCTOFLAT-P"));

876 #ñi‡
	`deföed
(
OCTOFLATX
)

877 
	`°r˝y_P
(
löe2
,
	`PSTR
(" OCTOFLAT-X"));

878 #ñi‡
	`deföed
 (
AIRPLANE
)

879 
	`°r˝y_P
(
löe2
,
	`PSTR
(" AIRPLANE"));

880 #ñi‡
	`deföed
 (
HELI_120_CCPM
)

881 
	`°r˝y_P
(
löe2
,
	`PSTR
(" HELI_120_CCPM"));

882 #ñi‡
	`deföed
 (
HELI_90_DEG
)

883 
	`°r˝y_P
(
löe2
,
	`PSTR
(" HELI_90_DEG"));

884 #ñi‡
	`deföed
(
VTAIL4
)

885 
	`°r˝y_P
(
löe2
,
	`PSTR
(" VTAIL Quad"));

888 
	`LCD£tLöe
(2); 
	`LCD¥ötCh¨
(
löe2
);

889 
	`LCD©åibuãsOff
();

890 
	`dñay
(2500);

892 #i‡
	`deföed
(
LCD_TEXTSTAR
Ë|| deföed(
LCD_VT100
)

894 
	`LCD˛ór
();

896 #i‡
	`deföed
(
OLED_I2C_128x64
Ë&& !(deföed(
OLED_I2C_128x64LOGO_PERMANENT
)Ë&& deföed(
NEW_OLED_FONT
Ë&& !(deföed(
LCD_TELEMETRY
))

899 
	`LCD£tLöe
(4); 
	`LCD¥ötCh¨
("To ENTER CONFIG ");

900 
	`LCD£tLöe
(5); 
	`LCD¥ötCh¨
("YAW RIGHT & PITCH FWD");

901 
	`LCD£tLöe
(7); 
	`LCD¥ötCh¨
("To SAVE CONFIG ");

902 
	`LCD£tLöe
(8); 
	`LCD¥ötCh¨
("YAW LEFT & PITCH FWD ");

909 #ifde‡
LCD_TELEMETRY_STEP


911 
	`LCD˛ór
();

912 
ãÀmëry
 = 
ãÀmërySãpSequí˚
[
ãÀmërySãpIndex
];

914 
	}
}

919 #ifde‡
LCD_CONF


920 
uöt8_t
 
	gª£t_to_deÁu…s
;

922 (*
	tf‹m©ãr_func_±r
)(*, 
	tuöt8_t
, uint8_t);

923 (*
	töc_func_±r
)(*, 
	töt16_t
);

925  
	slcd_ty≥_desc_t
 {

926 
f‹m©ãr_func_±r
 
fmt
;

927 
öc_func_±r
 
öc
;

930 
lcd_ty≥_desc_t
 
LTU8
 = {&
__u8Fmt
, &
__u8Inc
};

931 
lcd_ty≥_desc_t
 
	gLTS8
 = {&
__s8BôsFmt
, &
__s8Inc
};

932 
lcd_ty≥_desc_t
 
	gLTU16
 = {&
__u16Fmt
, &
__u16Inc
};

933 
lcd_ty≥_desc_t
 
	gLTS16
 = {&
__s16Fmt
, &
__s16Inc
};

934 
lcd_ty≥_desc_t
 
	gLPMM
 = {&
__upMFmt
, &
__nuŒInc
};

936 
lcd_ty≥_desc_t
 
	gLAUX1
 = {&
__uAuxFmt1
, &
__u16Inc
};

937 
lcd_ty≥_desc_t
 
	gLAUX2
 = {&
__uAuxFmt2
, &
__u16Inc
};

938 
lcd_ty≥_desc_t
 
	gLAUX3
 = {&
__uAuxFmt3
, &
__u16Inc
};

939 
lcd_ty≥_desc_t
 
	gLAUX4
 = {&
__uAuxFmt4
, &
__u16Inc
};

941  
	slcd_∑øm_def_t
 {

942 
lcd_ty≥_desc_t
 * 
	mty≥
;

943 
uöt8_t
 
	mdecimÆ
;

944 
uöt8_t
 
	mmu…ùlõr
;

945 
uöt16_t
 
	mö¸emít
;

958 
lcd_∑øm_def_t
 
	g__P
 = {&
LTU8
, 1, 1, 1};

959 
lcd_∑øm_def_t
 
	g__I
 = {&
LTU8
, 3, 1, 1};

960 
lcd_∑øm_def_t
 
	g__D
 = {&
LTU8
, 0, 1, 1};

961 
lcd_∑øm_def_t
 
	g__RC
 = {&
LTU8
, 2, 1, 1};

962 
lcd_∑øm_def_t
 
	g__PM
 = {&
LPMM
, 1, 1, 0};

964 
lcd_∑øm_def_t
 
	g__PT
 = {&
LTU8
, 0, 1, 1};

965 
lcd_∑øm_def_t
 
	g__VB
 = {&
LTU8
, 1, 1, 0};

966 
lcd_∑øm_def_t
 
	g__L
 = {&
LTU8
, 0, 1, 0};

967 
lcd_∑øm_def_t
 
	g__FS
 = {&
LTU8
, 1, 1, 0};

968 
lcd_∑øm_def_t
 
	g__SE
 = {&
LTU16
, 0, 1, 10};

969 
lcd_∑øm_def_t
 
	g__SE1
 = {&
LTU16
, 0, 1, 1};

970 
lcd_∑øm_def_t
 
	g__ST
 = {&
LTS16
, 0, 1, 10};

971 
lcd_∑øm_def_t
 
	g__AUX1
 = {&
LAUX1
, 0, 1, 1};

972 
lcd_∑øm_def_t
 
	g__AUX2
 = {&
LAUX2
, 0, 1, 8};

973 
lcd_∑øm_def_t
 
	g__AUX3
 = {&
LAUX3
, 0, 1, 64};

974 
lcd_∑øm_def_t
 
	g__AUX4
 = {&
LAUX4
, 0, 1, 512};

975 
lcd_∑øm_def_t
 
	g__BITS
 = {&
LTS8
, 0, 1, 1};

979 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt01
 [] = "Pit&Roll P";

980 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt02
 [] = "Roll P";

981 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt03
 [] = "Roll I";

982 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt04
 [] = "Roll D";

983 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt05
 [] = "Pitch P";

984 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt06
 [] = "Pitch I";

985 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt07
 [] = "Pitch D";

986 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt08
 [] = "Yaw P";

987 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt09
 [] = "Yaw I";

988 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt10
 [] = "Yaw D";

989 #i‡ 
BARO
 && (!
deföed
(
SUPPRESS_BARO_ALTHOLD
))

990 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt11
 [] = "Alt P";

991 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt12
 [] = "Alt I";

992 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt13
 [] = "Alt D";

993 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt14
 [] = "Vel P";

994 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt15
 [] = "Vel I";

995 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt16
 [] = "Vel D";

997 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt17
 [] = "Ang/Hor P";

998 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt18
 [] = "Ang/Hor I";

999 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt188
[] = "Ang/Hor D";

1000 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt19
 [] = "Mag P";

1001 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt20
 [] = "RC Rate ";

1002 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt21
 [] = "RC Expo ";

1003 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt20t
 [] = "Thrott Mid";

1004 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt21t
 [] = "ThrottExpo";

1005 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt22
 [] = "P&R Rate ";

1006 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt23
 [] = "Yaw Rate ";

1007 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt24
 [] = "Thrott PID";

1008 #ifde‡
LOG_VALUES


1009 #i‡(
LOG_VALUES
 >= 3)

1010 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt25
 [] = "pmeter m0";

1011 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt26
 [] = "pmeter m1";

1012 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt27
 [] = "pmeter m2";

1013 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt28
 [] = "pmeter m3";

1014 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt29
 [] = "pmeter m4";

1015 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt30
 [] = "pmeter m5";

1016 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt31
 [] = "pmeter m6";

1017 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt32
 [] = "pmeter m7";

1020 #ifde‡
FLYING_WING


1021 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt36
 [] = "SERvTRIM1";

1022 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt37
 [] = "SERvTRIM2";

1024 #ifde‡
TRI


1025 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt38
 [] = "SERvTRIMy";

1026 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt39
 [] = "SERvINVy";

1027 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt152
 [] = "SERvMINy";

1028 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt153
 [] = "SERvMAXy";

1035 #i‡
deföed
(
LCD_CONF_AUX
)

1036 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt41
 [] = "AUXángle ";

1037 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt42
 [] = "AUX horizn";

1038 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt43
 [] = "AUX baro ";

1039 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt44
 [] = "AUX mag ";

1040 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt45
 [] = "AUX camstb";

1041 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt46
 [] = "AUX camtrg";

1042 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt47
 [] = "AUXárm ";

1043 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt48
 [] = "AUX gpshom";

1044 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt49
 [] = "AUX gpshld";

1045 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt50
 [] = "AUXÖassth";

1046 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt51
 [] = "AUX headfr";

1047 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt52
 [] = "AUX buzzer";

1048 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt53
 [] = "AUX vario ";

1049 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt54
 [] = "AUX calib ";

1050 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt55
 [] = "AUX govern";

1051 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt56
 [] = "AUX osd ";

1054 #ifde‡
HELI_120_CCPM


1055 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt73
 [] = "SERvTRIMn";

1056 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt74
 [] = "SERvTRIMl";

1057 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt75
 [] = "SERvTRIMy";

1058 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt76
 [] = "SERvTRIMr";

1059 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt140
 [] = "SERvINVn";

1060 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt141
 [] = "SERvINVl";

1061 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt142
 [] = "SERvINVy";

1062 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt143
 [] = "SERvINVr";

1064 #ifde‡
GYRO_SMOOTHING


1065 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt80
 [] = "GSMOOTH R ";

1066 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt81
 [] = "GSMOOTH P ";

1067 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt82
 [] = "GSMOOTH Y ";

1069 #ifde‡
AIRPLANE


1070 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt83
 [] = "SERVoMID3";

1071 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt84
 [] = "SERVoMID4";

1072 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt85
 [] = "SERVoMID5";

1073 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt86
 [] = "SERVoMID6";

1074 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt87
 [] = "SERVoMID7";

1076 #i‡
GPS


1077 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt91
 [] = "GPS Pos. P";

1078 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt92
 [] = "GPS Pos. I";

1079 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt93
 [] = "Pos Rate P";

1080 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt94
 [] = "Pos Rate I";

1081 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt95
 [] = "Pos Rate D";

1082 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt96
 [] = "NAV Rate P";

1083 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt97
 [] = "NAV Rate I";

1084 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt98
 [] = "NAV Rate D";

1086 #i‡
deföed
 (
FAILSAFE
)

1087 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt101
 [] = "FailThrot";

1089 #ifde‡
VBAT


1090 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt35
 [] = "batt volt ";

1091 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt102
 [] = "VBAT SCALE";

1092 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt103
 [] = "BattWarn 1";

1093 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt104
 [] = "BattWarn 2";

1094 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt106
 [] = "BattW Crit";

1097 #ifde‡
POWERMETER


1098 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt33
 [] = "pmeterSum";

1099 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt34
 [] = "pAlarm /50";

1100 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt111
 [] = "PMsENSOR0";

1101 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt114
 [] = "PM INT2MA ";

1105 #ifde‡
MMGYRO


1106 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt121
 [] = "MMGYRO ";

1108 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt131
 [] = "MINTHROTL";

1109 #i‡
deföed
(
ARMEDTIMEWARNING
)

1110 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt132
 [] = "ArmdTWarn";

1112 #ifde‡
GOVERNOR_P


1113 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt133
 [] = "Govern P";

1114 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt134
 [] = "Govern D";

1115 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt135
 [] = "GovernRpm";

1117 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


1118 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt150
 [] = "writeCset";

1120 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt151
 [] = "Reset (7)";

1121 #ifde‡
YAW_COLL_PRECOMP


1122 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt155
 [] = "yawPrcomp";

1123 c⁄° 
PROGMEM
 
	glcd_∑øm_ãxt156
 [] = "yawPrDead";

1127 
PROGMEM
 c⁄° * c⁄° 
	glcd_∑øm_±r_èbÀ
 [] = {

1128 &
lcd_∑øm_ãxt01
, &
c⁄f
.
pid
[
ROLL
].
P8
, &
__P
,

1129 &
lcd_∑øm_ãxt02
, &
c⁄f
.
pid
[
ROLL
].
P8
, &
__P
,

1130 &
lcd_∑øm_ãxt03
, &
c⁄f
.
pid
[
ROLL
].
I8
, &
__I
,

1131 &
lcd_∑øm_ãxt04
, &
c⁄f
.
pid
[
ROLL
].
D8
, &
__D
,

1132 &
lcd_∑øm_ãxt05
, &
c⁄f
.
pid
[
PITCH
].
P8
, &
__P
,

1133 &
lcd_∑øm_ãxt06
, &
c⁄f
.
pid
[
PITCH
].
I8
, &
__I
,

1134 &
lcd_∑øm_ãxt07
, &
c⁄f
.
pid
[
PITCH
].
D8
, &
__D
,

1135 &
lcd_∑øm_ãxt08
, &
c⁄f
.
pid
[
YAW
].
P8
, &
__P
,

1136 &
lcd_∑øm_ãxt09
, &
c⁄f
.
pid
[
YAW
].
I8
, &
__I
,

1137 #i‡(!(
PID_CONTROLLER
 =1)Ë|| (!
deföed
(
COPTER_WITH_SERVO
))

1138 &
lcd_∑øm_ãxt10
, &
c⁄f
.
pid
[
YAW
].
D8
, &
__D
,

1140 #i‡
BARO
 && (!
deföed
(
SUPPRESS_BARO_ALTHOLD
))

1141 &
lcd_∑øm_ãxt11
, &
c⁄f
.
pid
[
PIDALT
].
P8
, &
__P
,

1142 &
lcd_∑øm_ãxt12
, &
c⁄f
.
pid
[
PIDALT
].
I8
, &
__I
,

1143 &
lcd_∑øm_ãxt13
, &
c⁄f
.
pid
[
PIDALT
].
D8
, &
__D
,

1144 &
lcd_∑øm_ãxt14
, &
c⁄f
.
pid
[
PIDVEL
].
P8
, &
__P
,

1145 &
lcd_∑øm_ãxt15
, &
c⁄f
.
pid
[
PIDVEL
].
I8
, &
__I
,

1146 &
lcd_∑øm_ãxt16
, &
c⁄f
.
pid
[
PIDVEL
].
D8
, &
__D
,

1148 &
lcd_∑øm_ãxt17
, &
c⁄f
.
pid
[
PIDLEVEL
].
P8
, &
__P
,

1149 &
lcd_∑øm_ãxt18
, &
c⁄f
.
pid
[
PIDLEVEL
].
I8
, &
__I
,

1150 &
lcd_∑øm_ãxt188
, &
c⁄f
.
pid
[
PIDLEVEL
].
D8
, &
__D
,

1151 #i‡
MAG


1152 &
lcd_∑øm_ãxt19
, &
c⁄f
.
pid
[
PIDMAG
].
P8
, &
__P
,

1154 &
lcd_∑øm_ãxt20t
, &
c⁄f
.
thrMid8
, &
__RC
,

1155 &
lcd_∑øm_ãxt21t
, &
c⁄f
.
thrExpo8
, &
__RC
,

1156 &
lcd_∑øm_ãxt20
, &
c⁄f
.
rcR©e8
, &
__RC
,

1157 &
lcd_∑øm_ãxt21
, &
c⁄f
.
rcExpo8
, &
__RC
,

1158 &
lcd_∑øm_ãxt22
, &
c⁄f
.
rﬁlPôchR©e
, &
__RC
,

1159 &
lcd_∑øm_ãxt23
, &
c⁄f
.
yawR©e
, &
__RC
,

1160 &
lcd_∑øm_ãxt24
, &
c⁄f
.
dynThrPID
, &
__RC
,

1161 #i‡
GPS


1162 &
lcd_∑øm_ãxt91
, &
c⁄f
.
pid
[
PIDPOS
].
P8
 , &
__RC
,

1163 &
lcd_∑øm_ãxt92
, &
c⁄f
.
pid
[
PIDPOS
].
I8
 , &
__I
,

1164 &
lcd_∑øm_ãxt93
, &
c⁄f
.
pid
[
PIDPOSR
].
P8
, &
__P
,

1165 &
lcd_∑øm_ãxt94
, &
c⁄f
.
pid
[
PIDPOSR
].
I8
, &
__I
,

1166 &
lcd_∑øm_ãxt95
, &
c⁄f
.
pid
[
PIDPOSR
].
D8
, &
__I
,

1167 &
lcd_∑øm_ãxt96
, &
c⁄f
.
pid
[
PIDNAVR
].
P8
, &
__P
,

1168 &
lcd_∑øm_ãxt97
, &
c⁄f
.
pid
[
PIDNAVR
].
I8
, &
__RC
,

1169 &
lcd_∑øm_ãxt98
, &
c⁄f
.
pid
[
PIDNAVR
].
D8
, &
__I
,

1171 #ifde‡
LCD_CONF_AUX


1172 #i‡
ACC


1173 &
lcd_∑øm_ãxt41
, &
c⁄f
.
a˘iv©e
[
BOXANGLE
], &
__AUX1
,

1174 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1175 &
lcd_∑øm_ãxt41
, &
c⁄f
.
a˘iv©e
[
BOXANGLE
], &
__AUX2
,

1177 &
lcd_∑øm_ãxt42
, &
c⁄f
.
a˘iv©e
[
BOXHORIZON
], &
__AUX1
,

1178 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1179 &
lcd_∑øm_ãxt42
, &
c⁄f
.
a˘iv©e
[
BOXHORIZON
], &
__AUX2
,

1181 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1182 &
lcd_∑øm_ãxt41
, &
c⁄f
.
a˘iv©e
[
BOXANGLE
], &
__AUX3
,

1183 &
lcd_∑øm_ãxt41
, &
c⁄f
.
a˘iv©e
[
BOXANGLE
], &
__AUX4
,

1184 &
lcd_∑øm_ãxt42
, &
c⁄f
.
a˘iv©e
[
BOXHORIZON
], &
__AUX3
,

1185 &
lcd_∑øm_ãxt42
, &
c⁄f
.
a˘iv©e
[
BOXHORIZON
], &
__AUX4
,

1188 #i‡
BARO
 && (!
deföed
(
SUPPRESS_BARO_ALTHOLD
))

1189 &
lcd_∑øm_ãxt43
, &
c⁄f
.
a˘iv©e
[
BOXBARO
], &
__AUX1
,

1190 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1191 &
lcd_∑øm_ãxt43
, &
c⁄f
.
a˘iv©e
[
BOXBARO
], &
__AUX2
,

1193 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1194 &
lcd_∑øm_ãxt43
, &
c⁄f
.
a˘iv©e
[
BOXBARO
], &
__AUX3
,

1195 &
lcd_∑øm_ãxt43
, &
c⁄f
.
a˘iv©e
[
BOXBARO
], &
__AUX4
,

1198 &
lcd_∑øm_ãxt44
, &
c⁄f
.
a˘iv©e
[
BOXMAG
], &
__AUX1
,

1199 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1200 &
lcd_∑øm_ãxt44
, &
c⁄f
.
a˘iv©e
[
BOXMAG
], &
__AUX2
,

1202 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1203 &
lcd_∑øm_ãxt44
, &
c⁄f
.
a˘iv©e
[
BOXMAG
], &
__AUX3
,

1204 &
lcd_∑øm_ãxt44
, &
c⁄f
.
a˘iv©e
[
BOXMAG
], &
__AUX4
,

1206 #ifde‡
GIMBAL


1207 &
lcd_∑øm_ãxt45
, &
c⁄f
.
a˘iv©e
[
BOXCAMSTAB
], &
__AUX1
,

1208 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1209 &
lcd_∑øm_ãxt45
, &
c⁄f
.
a˘iv©e
[
BOXCAMSTAB
], &
__AUX2
,

1211 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1212 &
lcd_∑øm_ãxt45
, &
c⁄f
.
a˘iv©e
[
BOXCAMSTAB
], &
__AUX3
,

1213 &
lcd_∑øm_ãxt45
, &
c⁄f
.
a˘iv©e
[
BOXCAMSTAB
], &
__AUX4
,

1215 &
lcd_∑øm_ãxt46
, &
c⁄f
.
a˘iv©e
[
BOXCAMTRIG
], &
__AUX1
,

1216 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1217 &
lcd_∑øm_ãxt46
, &
c⁄f
.
a˘iv©e
[
BOXCAMTRIG
], &
__AUX2
,

1219 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1220 &
lcd_∑øm_ãxt46
, &
c⁄f
.
a˘iv©e
[
BOXCAMTRIG
], &
__AUX3
,

1221 &
lcd_∑øm_ãxt46
, &
c⁄f
.
a˘iv©e
[
BOXCAMTRIG
], &
__AUX4
,

1224 &
lcd_∑øm_ãxt47
, &
c⁄f
.
a˘iv©e
[
BOXARM
], &
__AUX1
,

1225 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1226 &
lcd_∑øm_ãxt47
, &
c⁄f
.
a˘iv©e
[
BOXARM
], &
__AUX2
,

1228 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1229 &
lcd_∑øm_ãxt47
, &
c⁄f
.
a˘iv©e
[
BOXARM
], &
__AUX3
,

1230 &
lcd_∑øm_ãxt47
, &
c⁄f
.
a˘iv©e
[
BOXARM
], &
__AUX4
,

1232 #i‡
GPS


1233 &
lcd_∑øm_ãxt48
, &
c⁄f
.
a˘iv©e
[
BOXGPSHOME
], &
__AUX1
,

1234 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1235 &
lcd_∑øm_ãxt48
, &
c⁄f
.
a˘iv©e
[
BOXGPSHOME
], &
__AUX2
,

1237 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1238 &
lcd_∑øm_ãxt48
, &
c⁄f
.
a˘iv©e
[
BOXGPSHOME
], &
__AUX3
,

1239 &
lcd_∑øm_ãxt48
, &
c⁄f
.
a˘iv©e
[
BOXGPSHOME
], &
__AUX4
,

1241 &
lcd_∑øm_ãxt49
, &
c⁄f
.
a˘iv©e
[
BOXGPSHOLD
], &
__AUX1
,

1242 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1243 &
lcd_∑øm_ãxt49
, &
c⁄f
.
a˘iv©e
[
BOXGPSHOLD
], &
__AUX2
,

1245 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1246 &
lcd_∑øm_ãxt49
, &
c⁄f
.
a˘iv©e
[
BOXGPSHOLD
], &
__AUX3
,

1247 &
lcd_∑øm_ãxt49
, &
c⁄f
.
a˘iv©e
[
BOXGPSHOLD
], &
__AUX4
,

1250 #i‡
deföed
(
FIXEDWING
Ë|| deföed(
HELICOPTER
)

1251 &
lcd_∑øm_ãxt50
, &
c⁄f
.
a˘iv©e
[
BOXPASSTHRU
],&
__AUX1
,

1252 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1253 &
lcd_∑øm_ãxt50
, &
c⁄f
.
a˘iv©e
[
BOXPASSTHRU
],&
__AUX2
,

1255 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1256 &
lcd_∑øm_ãxt50
, &
c⁄f
.
a˘iv©e
[
BOXPASSTHRU
],&
__AUX3
,

1257 &
lcd_∑øm_ãxt50
, &
c⁄f
.
a˘iv©e
[
BOXPASSTHRU
],&
__AUX4
,

1260 #i‡
deföed
(
HEADFREE
)

1261 &
lcd_∑øm_ãxt51
, &
c⁄f
.
a˘iv©e
[
BOXHEADFREE
],&
__AUX1
,

1262 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1263 &
lcd_∑øm_ãxt51
, &
c⁄f
.
a˘iv©e
[
BOXHEADFREE
],&
__AUX2
,

1265 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1266 &
lcd_∑øm_ãxt51
, &
c⁄f
.
a˘iv©e
[
BOXHEADFREE
],&
__AUX3
,

1267 &
lcd_∑øm_ãxt51
, &
c⁄f
.
a˘iv©e
[
BOXHEADFREE
],&
__AUX4
,

1270 #i‡
deföed
(
BUZZER
)

1271 &
lcd_∑øm_ãxt52
, &
c⁄f
.
a˘iv©e
[
BOXBEEPERON
],&
__AUX1
,

1272 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1273 &
lcd_∑øm_ãxt52
, &
c⁄f
.
a˘iv©e
[
BOXBEEPERON
],&
__AUX2
,

1275 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1276 &
lcd_∑øm_ãxt52
, &
c⁄f
.
a˘iv©e
[
BOXBEEPERON
],&
__AUX3
,

1277 &
lcd_∑øm_ãxt52
, &
c⁄f
.
a˘iv©e
[
BOXBEEPERON
],&
__AUX4
,

1280 #ifde‡
VARIOMETER


1281 &
lcd_∑øm_ãxt53
, &
c⁄f
.
a˘iv©e
[
BOXVARIO
],&
__AUX1
,

1282 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1283 &
lcd_∑øm_ãxt53
, &
c⁄f
.
a˘iv©e
[
BOXVARIO
],&
__AUX2
,

1285 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1286 &
lcd_∑øm_ãxt53
, &
c⁄f
.
a˘iv©e
[
BOXVARIO
],&
__AUX3
,

1287 &
lcd_∑øm_ãxt53
, &
c⁄f
.
a˘iv©e
[
BOXVARIO
],&
__AUX4
,

1290 #ifde‡
INFLIGHT_ACC_CALIBRATION


1291 &
lcd_∑øm_ãxt54
, &
c⁄f
.
a˘iv©e
[
BOXCALIB
],&
__AUX1
,

1292 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1293 &
lcd_∑øm_ãxt54
, &
c⁄f
.
a˘iv©e
[
BOXCALIB
],&
__AUX2
,

1295 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1296 &
lcd_∑øm_ãxt54
, &
c⁄f
.
a˘iv©e
[
BOXCALIB
],&
__AUX3
,

1297 &
lcd_∑øm_ãxt54
, &
c⁄f
.
a˘iv©e
[
BOXCALIB
],&
__AUX4
,

1300 #ifde‡
GOVERNOR_P


1301 &
lcd_∑øm_ãxt55
, &
c⁄f
.
a˘iv©e
[
BOXGOV
],&
__AUX1
,

1302 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1303 &
lcd_∑øm_ãxt55
, &
c⁄f
.
a˘iv©e
[
BOXGOV
],&
__AUX2
,

1305 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1306 &
lcd_∑øm_ãxt55
, &
c⁄f
.
a˘iv©e
[
BOXGOV
],&
__AUX3
,

1307 &
lcd_∑øm_ãxt55
, &
c⁄f
.
a˘iv©e
[
BOXGOV
],&
__AUX4
,

1310 #ifde‡
OSD_SWITCH


1311 &
lcd_∑øm_ãxt56
, &
c⁄f
.
a˘iv©e
[
BOXOSD
],&
__AUX1
,

1312 #i‚de‡
SUPPRESS_LCD_CONF_AUX2


1313 &
lcd_∑øm_ãxt56
, &
c⁄f
.
a˘iv©e
[
BOXOSD
],&
__AUX2
,

1315 #i‚de‡
SUPPRESS_LCD_CONF_AUX34


1316 &
lcd_∑øm_ãxt56
, &
c⁄f
.
a˘iv©e
[
BOXOSD
],&
__AUX3
,

1317 &
lcd_∑øm_ãxt56
, &
c⁄f
.
a˘iv©e
[
BOXOSD
],&
__AUX4
,

1322 #ifde‡
LOG_VALUES


1323 #i‡(
LOG_VALUES
 >= 3)

1324 #i‡(
NUMBER_MOTOR
 > 0)

1325 &
lcd_∑øm_ãxt25
, &
pMëî
[0], &
__PM
,

1327 #i‡(
NUMBER_MOTOR
 > 1)

1328 &
lcd_∑øm_ãxt26
, &
pMëî
[1], &
__PM
,

1330 #i‡(
NUMBER_MOTOR
 > 2)

1331 &
lcd_∑øm_ãxt27
, &
pMëî
[2], &
__PM
,

1333 #i‡(
NUMBER_MOTOR
 > 3)

1334 &
lcd_∑øm_ãxt28
, &
pMëî
[3], &
__PM
,

1336 #i‡(
NUMBER_MOTOR
 > 4)

1337 &
lcd_∑øm_ãxt29
, &
pMëî
[4], &
__PM
,

1339 #i‡(
NUMBER_MOTOR
 > 5)

1340 &
lcd_∑øm_ãxt30
, &
pMëî
[5], &
__PM
,

1342 #i‡(
NUMBER_MOTOR
 > 6)

1343 &
lcd_∑øm_ãxt31
, &
pMëî
[6], &
__PM
,

1345 #i‡(
NUMBER_MOTOR
 > 7)

1346 &
lcd_∑øm_ãxt32
, &
pMëî
[7], &
__PM
,

1350 &
lcd_∑øm_ãxt131
, &
c⁄f
.
möthrŸée
, &
__ST
,

1351 #i‡
deföed
 (
FAILSAFE
)

1352 &
lcd_∑øm_ãxt101
, &
c⁄f
.
Áûß„_thrŸée
, &
__ST
,

1354 #ifde‡
FLYING_WING


1355 &
lcd_∑øm_ãxt36
, &
c⁄f
.
£rvoC⁄f
[3].
middÀ
, &
__SE
,

1356 &
lcd_∑øm_ãxt37
, &
c⁄f
.
£rvoC⁄f
[4].
middÀ
, &
__SE
,

1358 #ifde‡
TRI


1359 &
lcd_∑øm_ãxt152
, &
c⁄f
.
£rvoC⁄f
[5].
mö
, &
__SE
,

1360 &
lcd_∑øm_ãxt153
, &
c⁄f
.
£rvoC⁄f
[5].
max
, &
__SE
,

1361 &
lcd_∑øm_ãxt38
, &
c⁄f
.
£rvoC⁄f
[5].
middÀ
, &
__SE
,

1362 &
lcd_∑øm_ãxt39
, &
c⁄f
.
£rvoC⁄f
[5].
øã
, &
__BITS
,

1364 #ifde‡
HELI_120_CCPM


1365 &
lcd_∑øm_ãxt73
, &
c⁄f
.
£rvoC⁄f
[3].
middÀ
, &
__SE
,

1366 &
lcd_∑øm_ãxt74
, &
c⁄f
.
£rvoC⁄f
[4].
middÀ
, &
__SE
,

1367 &
lcd_∑øm_ãxt76
, &
c⁄f
.
£rvoC⁄f
[6].
middÀ
, &
__SE
,

1368 &
lcd_∑øm_ãxt75
, &
c⁄f
.
£rvoC⁄f
[5].
middÀ
, &
__SE
,

1369 &
lcd_∑øm_ãxt140
, &
c⁄f
.
£rvoC⁄f
[3].
øã
, &
__BITS
,

1370 &
lcd_∑øm_ãxt141
, &
c⁄f
.
£rvoC⁄f
[4].
øã
, &
__BITS
,

1371 &
lcd_∑øm_ãxt143
, &
c⁄f
.
£rvoC⁄f
[6].
øã
, &
__BITS
,

1372 &
lcd_∑øm_ãxt142
, &
c⁄f
.
£rvoC⁄f
[5].
øã
, &
__BITS
,

1374 #ifde‡
GOVERNOR_P


1375 &
lcd_∑øm_ãxt133
, &
c⁄f
.
govîn‹P
, &
__D
,

1376 &
lcd_∑øm_ãxt134
, &
c⁄f
.
govîn‹D
, &
__D
,

1378 #ifde‡
YAW_COLL_PRECOMP


1379 &
lcd_∑øm_ãxt155
, &
c⁄f
.
yawCﬁlPªcomp
, &
__PT
,

1380 &
lcd_∑øm_ãxt156
, &
c⁄f
.
yawCﬁlPªcompDódb™d
, &
__SE
,

1382 #ifde‡
GYRO_SMOOTHING


1383 &
lcd_∑øm_ãxt80
, &
c⁄f
.
SmoŸhög
[0], &
__D
,

1384 &
lcd_∑øm_ãxt81
, &
c⁄f
.
SmoŸhög
[1], &
__D
,

1385 &
lcd_∑øm_ãxt82
, &
c⁄f
.
SmoŸhög
[2], &
__D
,

1387 #ifde‡
AIRPLANE


1388 &
lcd_∑øm_ãxt83
, &
c⁄f
.
£rvoC⁄f
[3].
middÀ
, &
__SE
,

1389 &
lcd_∑øm_ãxt84
, &
c⁄f
.
£rvoC⁄f
[4].
middÀ
, &
__SE
,

1390 &
lcd_∑øm_ãxt85
, &
c⁄f
.
£rvoC⁄f
[5].
middÀ
, &
__SE
,

1391 &
lcd_∑øm_ãxt86
, &
c⁄f
.
£rvoC⁄f
[6].
middÀ
, &
__SE
,

1393 #ifde‡
MMGYRO


1394 &
lcd_∑øm_ãxt121
, &
c⁄f
.
mmgyro
, &
__D
,

1396 #ifde‡
VBAT


1398 &
lcd_∑øm_ãxt102
, &
c⁄f
.
vb©sˇÀ
, &
__PT
,

1399 &
lcd_∑øm_ãxt103
, &
c⁄f
.
vb©Àvñ_w¨n1
, &
__P
,

1400 &
lcd_∑øm_ãxt104
, &
c⁄f
.
vb©Àvñ_w¨n2
, &
__P
,

1401 &
lcd_∑øm_ãxt106
, &
c⁄f
.
vb©Àvñ_¸ô
, &
__P
,

1404 #ifde‡
POWERMETER


1406 &
lcd_∑øm_ãxt114
, &
c⁄f
.
pöt2ma
, &
__PT
,

1407 #ifde‡
POWERMETER_HARD


1408 &
lcd_∑øm_ãxt111
, &
c⁄f
.
p£ns‹nuŒ
, &
__SE1
,

1410 &
lcd_∑øm_ãxt34
, &
c⁄f
.
powîTriggî1
, &
__PT
,

1412 #i‡
deföed
(
ARMEDTIMEWARNING
)

1413 &
lcd_∑øm_ãxt132
, &
c⁄f
.
¨medtimew¨nög
, &
__SE
,

1415 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


1416 &
lcd_∑øm_ãxt150
, &
globÆ_c⁄f
.
cuºítSë
, &
__D
,

1418 &
lcd_∑øm_ãxt151
, &
ª£t_to_deÁu…s
, &
__D
,

1425 
	#PARAMMAX
 ((
lcd_∑øm_±r_èbÀ
)/6 - 1)

	)

1428 
	$__u8Inc
(* 
v¨
, 
öt16_t
 
öc
Ë{*(
uöt8_t
*)v¨ +(uöt8_t)öc;
	}
};

1429 
	$__s8Inc
(* 
v¨
, 
öt16_t
 
öc
Ë{*(
öt8_t
*)v¨ +(öt8_t)öc;
	}
};

1430 
	$__u16Inc
(* 
v¨
, 
öt16_t
 
öc
Ë{*(
uöt16_t
*)v¨ +öc;
	}
};

1431 
	$__s16Inc
(* 
v¨
, 
öt16_t
 
öc
Ë{*(öt16_t*)v¨ +öc;
	}
};

1432 
	$__nuŒInc
(* 
v¨
, 
öt16_t
 
öc
Ë{
	}
};

1434 
	$__u8Fmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
) {

1435 
uöt16_t
 
unô
 = *(
uöt8_t
*)
v¨
;

1436 
unô
 *
mul
;

1437 
c1
 = '0'+
unô
/100; 
c2
 = '0'+unô/10-(unô/100)*10; 
c3
 = '0'+unit-(unit/10)*10;

1438 
dec
) {

1439 0: 
löe2
[3] = 
c1
;Üöe2[4] = 
c2
;Üöe2[5] = 
c3
; ;

1440 1: 
löe2
[2] = 
c1
;Üöe2[3] = 
c2
;Üöe2[4] = '.';Üöe2[5] = 
c3
; ;

1441 2: 
löe2
[2] = 
c1
;Üöe2[3] = '.';Üöe2[4] = 
c2
;Üöe2[5] = 
c3
; ;

1442 3: 
löe2
[1] = '0';Üöe2[2] = '.';Üöe2[3] = 
c1
;Üöe2[4] = 
c2
;Üöe2[5] = 
c3
; ;

1444 
	}
}

1446 
	$__u16Fmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
) {

1447 
uöt16_t
 
unô
 = *(uöt16_t*)
v¨
;

1448 
unô
 *
mul
;

1449 
löe2
[2] = 
	`digô10000
(
unô
);

1450 
löe2
[3] = 
	`digô1000
(
unô
);

1451 
löe2
[4] = 
	`digô100
(
unô
);

1452 
löe2
[5] = 
	`digô10
(
unô
);

1453 
löe2
[6] = 
	`digô1
(
unô
);

1454 
	}
}

1455 
	$__s16Fmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
) {

1456 
öt16_t
 
unô
 = *(öt16_t*)
v¨
;

1457 i‡(
unô
 >= 0) {

1458 
löe2
[1] = ' ';

1460 
löe2
[1] = '-';

1461 
unô
 = -unit;

1463 
	`__u16Fmt
(&
unô
, 
mul
, 
dec
);

1464 
	}
}

1465 
	$__uAuxFmt1
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
Ë{ 
	`__uAuxFmt
(v¨, mul, dec, 1); 
	}
}

1466 
	$__uAuxFmt2
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
Ë{ 
	`__uAuxFmt
(v¨, mul, dec, 2); 
	}
}

1467 
	$__uAuxFmt3
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
Ë{ 
	`__uAuxFmt
(v¨, mul, dec, 3); 
	}
}

1468 
	$__uAuxFmt4
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
Ë{ 
	`__uAuxFmt
(v¨, mul, dec, 4); 
	}
}

1471 
	$__uAuxFmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
, uöt8_à
aux
) {

1472 
uöt16_t
 
unô
 = *(uöt16_t*)
v¨
;

1473 
löe2
[1] = 
	`digô1
(
aux
);

1474 
löe2
[3] = ( 
unô
 & 1<<(3*
aux
-3) ? 'L' : '.' );

1475 
löe2
[4] = ( 
unô
 & 1<<(3*
aux
-2) ? 'M' : '.' );

1476 
löe2
[5] = ( 
unô
 & 1<<(3*
aux
-1) ? 'H' : '.' );

1477 
	}
}

1479 
	$__s8BôsFmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
) {

1480 
öt8_t
 
unô
 = *(öt8_t*)
v¨
;

1481 
löe2
[1] = ( 
unô
 & 1<<2 ? 'C' : '.' );

1482 
löe2
[2] = ( 
unô
 & 1<<1 ? 'N' : '.' );

1483 
löe2
[3] = ( 
unô
 & 1<<0 ? 'R' : '.' );

1484 
	}
}

1486 #ifde‡
POWERMETER


1487 
	$__upMFmt
(* 
v¨
, 
uöt8_t
 
mul
, uöt8_à
dec
) {

1488 
uöt32_t
 
unô
 = *(uöt32_t*)
v¨
;

1489 
unô
 /
PLEVELDIV
;

1490 
	`__u16Fmt
(&
unô
, 
mul
, 
dec
);

1491 
	}
}

1504 
uöt8_t
 
	glcdStickSèã
[4];

1505 
	#IsLow
(
x
Ë(
lcdStickSèã
[x] & 0x1)

	)

1506 
	#IsHigh
(
x
Ë(
lcdStickSèã
[x] & 0x2)

	)

1507 
	#IsMid
(
x
Ë(!
lcdStickSèã
[x])

	)

1511 #ifde‡
DISPLAY_2LINES


1512 
	$C⁄figRe‰esh
(
uöt8_t
 
p
) {

1513 
	`blökLED
(10,20,1);

1514 
	`SET_ALARM_BUZZER
(
ALRM_FAC_TOGGLE
, 
ALRM_LVL_TOGGLE_1
);

1515 
	`°r˝y_P
(
löe1
,
	`PSTR
(" "));

1516 
	`°r˝y
(
löe2
,
löe1
);

1517 
	`°r˝y_P
(
löe1
, (*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[
p
 * 3])));

1518 
lcd_∑øm_def_t
* 
de·
 = (lcd_∑øm_def_t*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[(
p
 * 3) + 2]));

1519 
de·
->
ty≥
->
	`fmt
((*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[(
p
 * 3Ë+ 1])), de·->
mu…ùlõr
, de·->
decimÆ
);

1520 
	`LCD˛ór
();

1521 
	`LCD£tLöe
(1);
	`LCD¥ötCh¨
(
löe1
);

1522 
	`LCD£tLöe
(2);
	`LCD¥ötCh¨
(
löe2
);

1523 
	}
}

1526 #ifde‡
DISPLAY_MULTILINE


1528 
	$C⁄figRe‰esh
(
uöt8_t
 
p
) {

1529 
uöt8_t
 
j
, 
l
 = 1;

1530 
öt8_t
 
µ
 = (öt8_t)
p
;

1531 #i‚de‡
OLED_I2C_128x64


1532 
	`blökLED
(2,4,1);

1533 
	`SET_ALARM_BUZZER
(
ALRM_FAC_TOGGLE
, 
ALRM_LVL_TOGGLE_1
);

1534 
	`LCD˛ór
();

1536 
	`dñay
(60);

1538 
öt8_t
 
i
=
µ
 - 
MULTILINE_PRE
; i<µ + 
MULTILINE_POST
; i++) {

1540 
j
 = (
i
<0 ? i + 1 + 
PARAMMAX
 : i);

1541 i‡(
j
 > 
PARAMMAX
) j -= (1 + PARAMMAX);

1542 
	`°r˝y_P
(
löe1
,
	`PSTR
(" "));

1543 
	`°r˝y
(
löe2
,
löe1
);

1544 
	`°r˝y_P
(
löe1
, (*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[
j
 * 3])));

1545 
lcd_∑øm_def_t
* 
de·
 = (lcd_∑øm_def_t*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[(
j
 * 3) + 2]));

1546 
de·
->
ty≥
->
	`fmt
((*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[(
j
 * 3Ë+ 1])), de·->
mu…ùlõr
, de·->
decimÆ
);

1548 
	`LCD£tLöe
(
l
++);

1549 i‡(
j
 =
p
) {

1550 #i‡–!
	`deföed
(
OLED_I2C_128x64
Ë&& !deföed(
OLED_DIGOLE
) )

1551 
	`LCD¥öt
('>');

1553 #i‡–
	`deföed
(
OLED_DIGOLE
) )

1554 
löe2
[0] = '*';

1556 
	`LCD©åibuãsRevî£
();

1558 
	`LCD¥ötCh¨
(
löe1
);

1559 i‡(
j
 =
p
Ë{
	`LCD©åibuãsOff
(); }

1561 
	`LCD¥ötCh¨
(
löe2
);

1562 #i‡–!
	`deföed
(
OLED_I2C_128x64
Ë&& !deföed(
OLED_DIGOLE
) )

1563 i‡(
j
 =
p
Ë{
	`LCD©åibuãsOff
(); 
	`LCD¥öt
('<');}

1565 
LCD_FLUSH
;

1567 
	`LCD¸lf
();

1568 
	}
}

1570 
	$c⁄figuøti⁄Lo›
() {

1571 
uöt8_t
 
i
, 
p
;

1572 
uöt8_t
 
LCD
=1;

1573 
uöt8_t
 
ª‰eshLCD
 = 1;

1574 
uöt8_t
 
key
 = 0;

1575 
uöt8_t
 
Ælow_exô
 = 0;

1576 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


1577 
uöt8_t
 
cuºítSë
 = 
globÆ_c⁄f
.currentSet;

1579 
	`öôLCD
();

1580 #i‡
deföed
 
OLED_I2C_128x64LOGO_PERMANENT


1581 
	`LCD˛ór
();

1583 
ª£t_to_deÁu…s
 = 0;

1584 
p
 = 0;

1585 
LCD
 == 1) {

1586 i‡(
ª‰eshLCD
) {

1587 
	`C⁄figRe‰esh
(
p
);

1588 
ª‰eshLCD
 = 0;

1590 #i‡
	`deföed
(
SERIAL_RX
)

1591 
	`dñay
(10);

1592 i‡(
•ekFømeFœgs
 =0x01Ë
	`ªadSîül_RX
();

1593 
	`dñay
(44);

1595 #i‡
	`deföed
(
LCD_TEXTSTAR
Ë|| deföed(
LCD_VT100
Ë|| deföed(
LCD_TTY
)

1596 
key
 = ( 
	`SîülAvaûabÀ
(
LCD_SERIAL_PORT
Ë? 
	`SîülRód
(LCD_SERIAL_PORT) : 0 );

1598 #ifde‡
LCD_CONF_DEBUG


1599 
	`dñay
(1000);

1600 i‡(
key
 =
LCD_MENU_NEXT
Ëkey=
LCD_VALUE_UP
; key = LCD_MENU_NEXT;

1602 
i
 = 
ROLL
; i <
THROTTLE
; i++Ë{
uöt16_t
 
Tmp
 = 
	`ªadRawRC
(i); 
lcdStickSèã
[i] = (Tm∞< 
MINCHECK
Ë| ((Tm∞> 
MAXCHECK
) << 1);};

1603 i‡(
	`IsMid
(
YAW
Ë&& IsMid(
PITCH
Ë&& IsMid(
ROLL
)Ë
Ælow_exô
 = 1;

1604 i‡(
key
 =
LCD_MENU_SAVE_EXIT
 || (
	`IsLow
(
YAW
Ë&& 
	`IsHigh
(
PITCH
Ë&& 
Ælow_exô
)Ë
LCD
 = 0;

1605 i‡(
key
 =
LCD_MENU_ABORT
 || (
	`IsHigh
(
YAW
Ë&& IsHigh(
PITCH
Ë&& 
Ælow_exô
)Ë
LCD
 = 2;

1606 i‡(
key
 =
LCD_MENU_NEXT
 || (
	`IsLow
(
PITCH
Ë&& 
	`IsMid
(
YAW
))) {

1607 
ª‰eshLCD
 = 1; 
p
++; i‡’>
PARAMMAX
)Ö = 0;

1608 } i‡(
key
 =
LCD_MENU_PREV
 || (
	`IsHigh
(
PITCH
Ë&& 
	`IsMid
(
YAW
))) {

1609 
ª‰eshLCD
 = 1; 
p
--; i‡’ =0xFFË∞
PARAMMAX
;

1610 } i‡(
key
 =
LCD_VALUE_DOWN
 || (
	`IsLow
(
ROLL
))) {

1611 
ª‰eshLCD
 = 1;

1612 
lcd_∑øm_def_t
* 
de·
 = (lcd_∑øm_def_t*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[(
p
 * 3) + 2]));

1613 
de·
->
ty≥
->
	`öc
((*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[(
p
 * 3Ë+ 1])), -(
	`IsHigh
(
THROTTLE
Ë? 10: 1Ë* de·->
ö¸emít
);

1614 i‡(
p
 =0Ë
c⁄f
.
pid
[
PITCH
].
P8
 = c⁄f.pid[
ROLL
].P8;

1615 } i‡(
key
 =
LCD_VALUE_UP
 || (
	`IsHigh
(
ROLL
))) {

1616 
ª‰eshLCD
 = 1;

1617 
lcd_∑øm_def_t
* 
de·
 = (lcd_∑øm_def_t*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[(
p
 * 3) + 2]));

1618 
de·
->
ty≥
->
	`öc
((*)
	`pgm_ªad_w‹d
(&(
lcd_∑øm_±r_èbÀ
[(
p
 * 3Ë+ 1])), +(
	`IsHigh
(
THROTTLE
Ë? 10 : 1Ë* de·->
ö¸emít
);

1619 i‡(
p
 =0Ë
c⁄f
.
pid
[
PITCH
].
P8
 = c⁄f.pid[
ROLL
].P8;

1621 #i‡
	`deföed
(
PRI_SERVO_TO
)

1622 
	#MAX_SERV
 7

	)

1623 #if(
PRI_SERVO_TO
 < 
MAX_SERV
)

1624 #unde‡
MAX_SERV


1625 
	#MAX_SERV
 
PRI_SERVO_TO


	)

1627 
i
=
PRI_SERVO_FROM
-1; i<
MAX_SERV
; i++Ë
£rvo
[i] = 
c⁄f
.
£rvoC⁄f
[i].
middÀ
;

1628 #i‡
	`deföed
(
HELICOPTER
Ë&& 
YAWMOTOR


1629 
£rvo
[5] = 
MINCOMMAND
;

1631 #i‡
	`deföed
(
TRI
Ë&& deföed(
MEGA_HW_PWM_SERVOS
Ë&& deföed(
MEGA
)

1632 
£rvo
[3] = servo[5];

1634 
	`wrôeSîvos
();

1637 
	`blökLED
(20,30,1);

1638 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_1
);

1639 
	`LCD˛ór
();

1640 
	`LCD£tLöe
(1);

1641 i‡(
LCD
 == 0) {

1642 
	`°r˝y_P
(
löe1
,
	`PSTR
("Saving..."));

1643 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


1644 
löe1
[7] = 
	`digô1
(
globÆ_c⁄f
.
cuºítSë
);

1646 
	`LCD¥ötCh¨
(
löe1
);

1647 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


1648 
	`wrôeGlobÆSë
(0);

1650 i‡(
ª£t_to_deÁu…s
 == 7) {

1652 
	`°r˝y_P
(
löe1
,
	`PSTR
("RESET.."));

1654 
	`LCD¥ötCh¨
(
löe1
);

1655 
	`LﬂdDeÁu…s
();

1657 
	`wrôeP¨ams
(1);

1660 
	`°r˝y_P
(
löe1
,
	`PSTR
("Aborting"));

1661 
	`LCD¥ötCh¨
(
löe1
);

1662 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


1663 
globÆ_c⁄f
.
cuºítSë
 = currentSet;

1665 
	`ªadEEPROM
();

1667 
	`LCD£tLöe
(2);

1668 
	`°r˝y_P
(
löe1
,
	`PSTR
("Exit"));

1669 
	`LCD¥ötCh¨
(
löe1
);

1670 #i‡
	`deföed
(
LCD_LCD03
Ë|| deföed(
LCD_LCD03S
)

1671 
	`dñay
(2000);

1672 
	`öôLCD
();

1674 #i‡
	`deföed
(
LCD_SERIAL3W
)

1675 
	`SîülO≥n
(0,115200);

1677 #i‡
	`deföed
(
LCD_TELEMETRY
Ë|| deföed(
OLED_I2C_128x64
)

1678 
	`dñay
(1500);

1680 
cy˛eTime
 = 0;

1681 #i‡
	`deföed
(
OLED_I2C_128x64
)

1682 #i‡
	`deföed
(
OLED_I2C_128x64LOGO_PERMANENT
)

1683 
	`i2c_OLED_Put_Logo
();

1684 #ñi‡!
	`deföed
(
LOG_PERMANENT_SHOW_AFTER_CONFIG
)

1685 
	`LCD˛ór
();

1688 #ifde‡
LOG_PERMANENT_SHOW_AFTER_CONFIG


1689 i‡(!
f
.
ARMED
Ë
	`dumpPLog
(0);

1691 
	}
}

1695 #ifde‡
LCD_TELEMETRY


1698 
	$LCDb¨
(
uöt8_t
 
n
,uöt8_à
v
) {

1699 i‡(
v
 > 200) v = 0;

1700 i‡(
v
 > 100) v = 100;

1701 #i‡
	`deföed
(
LCD_SERIAL3W
)

1702 
uöt8_t
 
i
=0; i< 
n
; i++Ë
	`LCD¥öt
((i<n*
v
/100 ? '=' : '.'));

1703 #ñi‡
	`deföed
(
LCD_TEXTSTAR
)

1704 
	`LCD¥öt
(0xFE);LCD¥öt('b');LCD¥öt(
n
);LCD¥öt(
v
);

1705 #ñi‡
	`deföed
(
LCD_VT100
Ë|| deföed(
LCD_TTY
)

1706 
uöt8_t
 
i
, 
j
 = (
n
*
v
)/100;

1707 
i
=0; i< 
j
; i++Ë
	`LCD¥öt
( '=' );

1708 
i
=
j
; i< 
n
; i++Ë
	`LCD¥öt
( '.' );

1709 #ñi‡
	`deföed
(
LCD_ETPP
)

1710 
	`ETPP_b¨Gøph
(
n
,
v
);

1711 #ñi‡
	`deföed
(
LCD_LCD03
Ë|| deföed(
LCD_LCD03S
)

1712 
uöt8_t
 
i
=0; i< 
n
; i++Ë
	`LCD¥öt
((i<n*
v
/100 ? '=' : '.'));

1713 #ñi‡
	`deföed
(
OLED_I2C_128x64
)

1714 
uöt8_t
 
i
, 
j
 = (
n
*
v
)/100;

1715 
i
=0; i< 
j
; i++Ë
	`LCD¥öt
( 159 );

1716 i‡(
j
<
n
Ë
	`LCD¥öt
(154 + (
v
*n*5/100 - 5*j));

1717 
i
=
j
+1; i< 
n
; i++Ë
	`LCD¥öt
( 154 );

1718 #ñi‡
	`deföed
(
OLED_DIGOLE
)

1719 
uöt8_t
 
i
, 
j
 = (
n
*
v
)/100;

1720 
l
[
n
+1];

1721 
i
=0; i< 
j
; i++Ë
l
[i] = '=';

1722 
i
=
j
; i< 
n
; i++Ë
l
[i] = '.';

1723 
l
[
n
] = 0;

1724 
	`LCD¥ötCh¨
(
l
);

1726 
	}
}

1728 
	$fûl_löe1_deg
() {

1729 
uöt16_t
 
unô
;

1730 
	`°r˝y_P
(
löe1
,
	`PSTR
("Deg ---.- ---.-"));

1732 i‡(
©t
.
™gÀ
[0] < 0 ) {

1733 
unô
 = -
©t
.
™gÀ
[0];

1734 
löe1
[3] = '-';

1736 
unô
 = 
©t
.
™gÀ
[0];

1737 
löe1
[4] = 
	`digô1000
(
unô
);

1738 
löe1
[5] = 
	`digô100
(
unô
);

1739 
löe1
[6] = 
	`digô10
(
unô
);

1740 
löe1
[8] = 
	`digô1
(
unô
);

1741 i‡(
©t
.
™gÀ
[1] < 0 ) {

1742 
unô
 = -
©t
.
™gÀ
[1];

1743 
löe1
[10] = '-';

1745 
unô
 = 
©t
.
™gÀ
[1];

1746 
löe1
[11] = 
	`digô1000
(
unô
);

1747 
löe1
[12] = 
	`digô100
(
unô
);

1748 
löe1
[13] = 
	`digô10
(
unô
);

1749 
löe1
[15] = 
	`digô1
(
unô
);

1750 
	}
}

1751 
	$ouçut_AmaxA
() {

1752 #ifde‡
POWERMETER_HARD


1754 
	`°r˝y_P
(
löe2
,
	`PSTR
("---,-A max---,-A"));

1756 
löe2
[0] = 
	`digô1000
(
™Æog
.
am≥øge
);

1757 
löe2
[1] = 
	`digô100
(
™Æog
.
am≥øge
);

1758 
löe2
[2] = 
	`digô10
(
™Æog
.
am≥øge
);

1759 
löe2
[4] = 
	`digô1
(
™Æog
.
am≥øge
);

1761 
löe2
[10] = 
	`digô1000
(
powîVÆueMaxMAH
);

1762 
löe2
[11] = 
	`digô100
(
powîVÆueMaxMAH
);

1763 
löe2
[12] = 
	`digô10
(
powîVÆueMaxMAH
);

1764 
löe2
[14] = 
	`digô1
(
powîVÆueMaxMAH
);

1765 
	`LCD¥ötCh¨
(
löe2
);

1767 
	}
}

1768 #ifde‡
WATTS


1769 
	$ouçut_WmaxW
() {

1771 
	`°r˝y_P
(
löe2
,
	`PSTR
("----W max----W"));

1772 
löe2
[0] = 
	`digô1000
(
™Æog
.
w©ts
);

1773 
löe2
[1] = 
	`digô100
(
™Æog
.
w©ts
);

1774 
löe2
[2] = 
	`digô10
(
™Æog
.
w©ts
);

1775 
löe2
[3] = 
	`digô1
(
™Æog
.
w©ts
);

1776 
löe2
[11] = 
	`digô1000
(
w©tsMax
);

1777 
löe2
[12] = 
	`digô100
(
w©tsMax
);

1778 
löe2
[13] = 
	`digô10
(
w©tsMax
);

1779 
löe2
[14] = 
	`digô1
(
w©tsMax
);

1780 
	`LCD¥ötCh¨
(
löe2
);

1781 
	}
}

1784 
	$ouçut_V
() {

1785 #ifde‡
VBAT


1786 
	`°r˝y_P
(
löe1
,
	`PSTR
(" --.-V"));

1788 
löe1
[1] = 
	`digô100
(
™Æog
.
vb©
);

1789 
löe1
[2] = 
	`digô10
(
™Æog
.
vb©
);

1790 
löe1
[4] = 
	`digô1
(
™Æog
.
vb©
);

1791 #i‚de‡
OLED_I2C_128x64


1792 i‡(
™Æog
.
vb©
 < 
c⁄f
.
vb©Àvñ_w¨n1
Ë{ 
	`LCD©åibuãsRevî£
(); }

1794 
	`LCDb¨
(
DISPLAY_COLUMNS
-9, (((
™Æog
.
vb©
 - 
c⁄f
.
vb©Àvñ_w¨n1
)*100)/(
VBATNOMINAL
-conf.vbatlevel_warn1)) );

1795 
	`LCD©åibuãsOff
();

1796 
	`LCD¥ötCh¨
(
löe1
);

1798 
	}
}

1800 
	$ouçut_Vmö
() {

1801 #ifde‡
VBAT


1802 
	`°r˝y_P
(
löe1
,
	`PSTR
(" --.-Vmin"));

1804 
löe1
[1] = 
	`digô100
(
vb©Mö
);

1805 
löe1
[2] = 
	`digô10
(
vb©Mö
);

1806 
löe1
[4] = 
	`digô1
(
vb©Mö
);

1807 #i‚de‡
OLED_I2C_128x64


1808 i‡(
vb©Mö
 < 
c⁄f
.
vb©Àvñ_¸ô
Ë{ 
	`LCD©åibuãsRevî£
(); }

1810 
	`LCDb¨
(
DISPLAY_COLUMNS
-9, (
vb©Mö
 > 
c⁄f
.
vb©Àvñ_¸ô
 ? (((vb©Mö - c⁄f.vb©Àvñ_¸ô)*100)/(
VBATNOMINAL
-conf.vbatlevel_crit)) : 0 ));

1811 
	`LCD©åibuãsOff
();

1812 
	`LCD¥ötCh¨
(
löe1
);

1814 
	}
}

1815 
	$ouçut_mAh
() {

1816 #ifde‡
POWERMETER


1817 
uöt16_t
 
mah
 = 
™Æog
.
ötPowîMëîSum
;

1818 i‡(
™Æog
.
ötPowîMëîSum
 < (
uöt16_t
)
c⁄f
.
powîTriggî1
 * 
PLEVELSCALE
)

1819 
mah
 = 
c⁄f
.
powîTriggî1
 * 
PLEVELSCALE
 - 
™Æog
.
ötPowîMëîSum
;

1820 
	`°r˝y_P
(
löe1
,
	`PSTR
(" -----mAh"));

1821 
löe1
[1] = 
	`digô10000
(
mah
);

1822 
löe1
[2] = 
	`digô1000
(
mah
);

1823 
löe1
[3] = 
	`digô100
(
mah
);

1824 
löe1
[4] = 
	`digô10
(
mah
);

1825 
löe1
[5] = 
	`digô1
(
mah
);

1826 i‡(
c⁄f
.
powîTriggî1
) {

1827 
öt8_t
 
v
 = 100 - ( 
™Æog
.
ötPowîMëîSum
/(
uöt16_t
)
c⁄f
.
powîTriggî1
) *2;

1828 #i‚de‡
OLED_I2C_128x64


1829 i‡(
v
 <0Ë{ 
	`LCD©åibuãsRevî£
(); }

1831 
	`LCDb¨
(
DISPLAY_COLUMNS
-9, 
v
);

1832 
	`LCD©åibuãsOff
();

1834 
	`LCD¥ötCh¨
(
löe1
);

1836 
	}
}

1837 
	$ouçut_îr‹s_‹_¨medTime
() {

1838 i‡(
Áûß„Evíts
 || (
i2c_îr‹s_cou¡
>>10)) {

1840 
	`LCDÆ¨mAndRevî£
();

1841 
	`ouçut_Áûs
();

1842 
	`LCD©åibuãsOff
();

1844 
uöt16_t
 
©s
 = 
¨medTime
 / 1000000;

1845 #ifde‡
ARMEDTIMEWARNING


1846 #i‚de‡
OLED_I2C_128x64


1847 i‡(
©s
 > 
c⁄f
.
¨medtimew¨nög
Ë{ 
	`LCD©åibuãsRevî£
(); }

1849 
	`LCDb¨
(
DISPLAY_COLUMNS
-9, (
©s
 < 
c⁄f
.
¨medtimew¨nög
 ? (((conf.armedtimewarning-ats+1)*25)/(conf.armedtimewarning+1)*4) : 0 ));

1850 
	`LCD©åibuãsOff
();

1852 
	`LCD¥öt
(' ');

1853 #ifde‡
ARMEDTIMEWARNING


1854 
	`¥öt_u±ime
–(
c⁄f
.
¨medtimew¨nög
 > 
©s
 ? conf.armedtimewarning -áts :áts) );

1856 
	`¥öt_u±ime
(
©s
);

1859 
	}
}

1860 
	$ouçut_Ætôude
() {

1861 #i‡
BARO


1863 
öt16_t
 
h
 = 
Æt
.
E°A…
 / 100;

1864 
	`LCD¥öt
('A'); 
	`LCD¥ötI¡16
(
h
); LCDprint('m');

1865 
h
 = 
BAROÆtMax
 / 100;

1866 
	`LCD¥ötCh¨
(" ("); 
	`LCD¥ötI¡16
(
h
);

1869 
	}
}

1870 
	$ouçut_u±ime_c£t
() {

1871 
	`°r˝y_P
(
löe1
,
	`PSTR
("U∞")); 
	`LCD¥ötCh¨
÷öe1); 
	`¥öt_u±ime
(
	`mûlis
() / 1000 );

1872 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


1873 
	`°r˝y_P
(
löe1
,
	`PSTR
(" C£à-"));Üöe1[7] = 
	`digô1
(
globÆ_c⁄f
.
cuºítSë
); 
	`LCD¥ötCh¨
(line1);

1875 
	}
}

1876 
	$ouçut_cy˛e
() {

1877 
	`°r˝y_P
(
löe1
,
	`PSTR
("Cycle -----us"));

1880 
löe1
[9] = 
	`digô10000
(
cy˛eTime
);

1881 
löe1
[10] = 
	`digô1000
(
cy˛eTime
);

1882 
löe1
[11] = 
	`digô100
(
cy˛eTime
);

1883 
löe1
[12] = 
	`digô10
(
cy˛eTime
);

1884 
löe1
[13] = 
	`digô1
(
cy˛eTime
);

1885 
	`LCD¥ötCh¨
(
löe1
);

1886 
	}
}

1887 
	$ouçut_cy˛eMöMax
() {

1888 #i‡(
LOG_VALUES
 >= 2)

1889 
	`°r˝y_P
(
löe2
,
	`PSTR
("(-----, -----)us"));

1890 
löe2
[1] = 
	`digô10000
(
cy˛eTimeMö
 );

1891 
löe2
[2] = 
	`digô1000
(
cy˛eTimeMö
 );

1892 
löe2
[3] = 
	`digô100
(
cy˛eTimeMö
 );

1893 
löe2
[4] = 
	`digô10
(
cy˛eTimeMö
 );

1894 
löe2
[5] = 
	`digô1
(
cy˛eTimeMö
 );

1895 
löe2
[8] = 
	`digô10000
(
cy˛eTimeMax
);

1896 
löe2
[9] = 
	`digô1000
(
cy˛eTimeMax
);

1897 
löe2
[10] = 
	`digô100
(
cy˛eTimeMax
);

1898 
löe2
[11] = 
	`digô10
(
cy˛eTimeMax
);

1899 
löe2
[12] = 
	`digô1
(
cy˛eTimeMax
);

1900 
	`LCD¥ötCh¨
(
löe2
);

1902 
	}
}

1903 
	$ouçut_Áûs
() {

1904 
uöt16_t
 
unô
;

1906 
	`°r˝y_P
(
löe2
,
	`PSTR
("-- Fails -- i2c"));

1907 
unô
 = 
Áûß„Evíts
;

1908 
löe2
[0] = 
	`digô10
(
unô
);

1909 
löe2
[1] = 
	`digô1
(
unô
);

1910 
unô
 = 
i2c_îr‹s_cou¡
;

1911 
löe2
[10] = 
	`digô10
(
unô
);

1912 
löe2
[11] = 
	`digô1
(
unô
);

1913 
	`LCD¥ötCh¨
(
löe2
);

1914 
	}
}

1915 
	$ouçut_™√x
() {

1917 
	`°r˝y_P
(
löe2
,
	`PSTR
("annex --"));

1918 
löe2
[6] = 
	`digô10
(
™√x650_ovîrun_cou¡
);

1919 
löe2
[7] = 
	`digô1
(
™√x650_ovîrun_cou¡
);

1920 
	`LCD¥ötCh¨
(
löe2
);

1921 
	}
}

1922 
	gcheckboxôemNames
[][4] = {

1924 #i‡
ACC


1927 #i‡
BARO
 && (!
deföed
(
SUPPRESS_BARO_ALTHOLD
))

1930 #ifde‡
VARIOMETER


1934 #i‡
deföed
(
HEADFREE
)

1938 #i‡
deföed
(
SERVO_TILT
Ë|| deföed(
GIMBAL
)|| deföed(
SERVO_MIX_TILT
)

1941 #i‡
deföed
(
CAMTRIG
)

1944 #i‡
GPS


1948 #i‡
deföed
(
FIXEDWING
Ë|| deföed(
HELICOPTER
)

1951 #i‡
deföed
(
BUZZER
)

1954 #i‡
deföed
(
LED_FLASHER
)

1958 #i‡
deföed
(
LANDING_LIGHTS_DDR
)

1961 #ifde‡
INFLIGHT_ACC_CALIBRATION


1964 #ifde‡
GOVERNOR_P


1967 #ifde‡
OSD_SWITCH


1971 
	$ouçut_checkboxôems
() {

1972 
uöt8_t
 
i
=0; i<
CHECKBOXITEMS
; i++ ) {

1973 i‡(
rcO±i⁄s
[
i
] || ((i==
BOXARM
)&&(
f
.
ARMED
)) ) {

1974 
	`LCD¥ötCh¨
(
checkboxôemNames
[
i
]);

1975 
	`LCD¥öt
(' ');

1978 
	}
}

1979 
	$ouçut_checkbox°©us
() {

1980 #i‡(
	`deföed
(
DISPLAY_COLUMNS
))

1981 
uöt8_t
 
˙tmax
 = 
DISPLAY_COLUMNS
 /4;

1983 
uöt8_t
 
˙tmax
 = 4;

1985 
uöt8_t
 
˙t
 = 0;

1986 #ifde‡
BUZZER


1987 i‡(
	`isBuzzîON
()Ë{ 
	`LCDÆ¨mAndRevî£
(); }

1989 
uöt8_t
 
i
=0; (i<
CHECKBOXITEMS
Ë&& (
˙t
<
˙tmax
); i++ ) {

1990 i‡(
rcO±i⁄s
[
i
] || ((i==
BOXARM
)&&(
f
.
ARMED
)) ) {

1991 
	`LCD¥ötCh¨
(
checkboxôemNames
[
i
]);

1992 
	`LCD¥öt
(' ');

1993 
˙t
++;

1996 
uöt8_t
 
i
=
˙t
; i<
˙tmax
; i++Ë
	`LCD¥ötCh¨
(". ");

1997 
	`LCD©åibuãsOff
();

1998 
	}
}

2000 
	#GYROLIMIT
 60

2001 
	#ACCLIMIT
 60

2002 
	`ouçutSís‹
(
uöt8_t
 
num
, 
öt16_t
 
d©a
, i¡16_à
limô
Ë{

	)

2003 i‡(
	gd©a
 < -
	glimô
Ë{
LCD¥ötCh¨
("<<<<");}

2004 i‡(
	gd©a
 > 
	glimô
Ë{
LCD¥ötCh¨
(">>>>");}

2005 
LCDb¨
(
num
, 
limô
 + 
d©a
 *50/limit);

2007 
	$¥öt_u±ime
(
uöt16_t
 
£c
) {

2008 
uöt16_t
 
m
, 
s
;

2009 
löe
[6] = "--:--";

2010 
m
 = 
£c
 / 60;

2011 
s
 = 
£c
 - (60 * 
m
);

2012 
löe
[0] = 
	`digô10
(
m
);

2013 
löe
[1] = 
	`digô1
(
m
);

2014 
löe
[3] = 
	`digô10
(
s
);

2015 
löe
[4] = 
	`digô1
(
s
);

2016 
	`LCD¥ötCh¨
(
löe
);

2017 
	}
}

2018 #i‡
GPS


2019 
	$fûl_löe1_gps_œt
(
uöt8_t
 
ßt
) {

2020 
öt32_t
 
aGPS_œtôude
 = 
	`abs
(
GPS_co‹d
[
LAT
]);

2021 
	`°r˝y_P
(
löe1
,
	`PSTR
(".---.------- #--"));

2023 
löe1
[0] = 
GPS_co‹d
[
LAT
]<0?'S':'N';

2024 i‡(
ßt
) {

2026 
löe1
[14] = 
	`digô10
(
GPS_numS©
);

2027 
löe1
[15] = 
	`digô1
(
GPS_numS©
);

2029 
löe1
[1] = '0' + 
aGPS_œtôude
 / 1000000000;

2030 
löe1
[2] = '0' + 
aGPS_œtôude
 / 100000000 - (aGPS_latitude/1000000000) * 10;

2031 
löe1
[3] = '0' + 
aGPS_œtôude
 / 10000000 - (aGPS_latitude/100000000) * 10;

2032 
löe1
[5] = '0' + 
aGPS_œtôude
 / 1000000 - (aGPS_latitude/10000000) * 10;

2033 
löe1
[6] = '0' + 
aGPS_œtôude
 / 100000 - (aGPS_latitude/1000000) * 10;

2034 
löe1
[7] = '0' + 
aGPS_œtôude
 / 10000 - (aGPS_latitude/100000) * 10;

2035 
löe1
[8] = '0' + 
aGPS_œtôude
 / 1000 - (aGPS_latitude/10000) * 10;

2036 
löe1
[9] = '0' + 
aGPS_œtôude
 / 100 - (aGPS_latitude/1000) * 10;

2037 
löe1
[10] = '0' + 
aGPS_œtôude
 / 10 - (aGPS_latitude/100) * 10;

2038 
löe1
[11] = '0' + 
aGPS_œtôude
 - (aGPS_latitude/10) * 10;

2039 
	}
}

2040 
	$fûl_löe2_gps_l⁄
(
uöt8_t
 
°©us
) {

2041 
öt32_t
 
aGPS_l⁄gôude
 = 
	`abs
(
GPS_co‹d
[
LON
]);

2042 
	`°r˝y_P
(
löe2
,
	`PSTR
(".---.------- "));

2044 
löe2
[0] = 
GPS_co‹d
[
LON
]<0?'W':'E';

2045 i‡(
°©us
) {

2046 
löe2
[13] = (
GPS_upd©e
 ? 'U' : '.');

2049 
löe2
[1] = '0' + 
aGPS_l⁄gôude
 / 1000000000;

2050 
löe2
[2] = '0' + 
aGPS_l⁄gôude
 / 100000000 - (aGPS_longitude/1000000000) * 10;

2051 
löe2
[3] = '0' + 
aGPS_l⁄gôude
 / 10000000 - (aGPS_longitude/100000000) * 10;

2052 
löe2
[5] = '0' + 
aGPS_l⁄gôude
 / 1000000 - (aGPS_longitude/10000000) * 10;

2053 
löe2
[6] = '0' + 
aGPS_l⁄gôude
 / 100000 - (aGPS_longitude/1000000) * 10;

2054 
löe2
[7] = '0' + 
aGPS_l⁄gôude
 / 10000 - (aGPS_longitude/100000) * 10;

2055 
löe2
[8] = '0' + 
aGPS_l⁄gôude
 / 1000 - (aGPS_longitude/10000) * 10;

2056 
löe2
[9] = '0' + 
aGPS_l⁄gôude
 / 100 - (aGPS_longitude/1000) * 10;

2057 
löe2
[10] = '0' + 
aGPS_l⁄gôude
 / 10 - (aGPS_longitude/100) * 10;

2058 
löe2
[11] = '0' + 
aGPS_l⁄gôude
 - (aGPS_longitude/10) * 10;

2059 
	}
}

2062 
	$ouçut_gyroX
() {

2063 
	`LCD¥ötI¡16
(
imu
.
gyroD©a
[0]); 
	`LCD¥öt
(' ');

2064 
	`ouçutSís‹
(
DISPLAY_COLUMNS
-10, 
imu
.
gyroD©a
[0], 
GYROLIMIT
);

2065 
	}
}

2066 
	$ouçut_gyroY
() {

2067 
	`LCD¥ötI¡16
(
imu
.
gyroD©a
[1]); 
	`LCD¥öt
(' ');

2068 
	`ouçutSís‹
(
DISPLAY_COLUMNS
-10, 
imu
.
gyroD©a
[1], 
GYROLIMIT
);

2069 
	}
}

2070 
	$ouçut_gyroZ
() {

2071 
	`LCD¥ötI¡16
(
imu
.
gyroD©a
[2]); 
	`LCD¥öt
(' ');

2072 
	`ouçutSís‹
(
DISPLAY_COLUMNS
-10, 
imu
.
gyroD©a
[2], 
GYROLIMIT
);

2073 
	}
}

2074 
	$ouçut_accX
() {

2075 
	`LCD¥ötI¡16
(
imu
.
accSmoŸh
[0]); 
	`LCD¥öt
(' ');

2076 
	`ouçutSís‹
(
DISPLAY_COLUMNS
-10, 
imu
.
accSmoŸh
[0], 
ACCLIMIT
);

2077 
	}
}

2078 
	$ouçut_accY
() {

2079 
	`LCD¥ötI¡16
(
imu
.
accSmoŸh
[1]); 
	`LCD¥öt
(' ');

2080 
	`ouçutSís‹
(
DISPLAY_COLUMNS
-10, 
imu
.
accSmoŸh
[1], 
ACCLIMIT
);

2081 
	}
}

2082 
	$ouçut_accZ
() {

2083 
	`LCD¥ötI¡16
(
imu
.
accSmoŸh
[2]); 
	`LCD¥öt
(' ');

2084 
	`ouçutSís‹
(
DISPLAY_COLUMNS
-10, 
imu
.
accSmoŸh
[2] - 
ACC_1G
, 
ACCLIMIT
);

2085 
	}
}

2087 
	$ouçut_debug0
(Ë{ 
	`LCD¥ötCh¨
("D1 "); 
	`LCD¥ötI¡16
(
debug
[0]); 
	}
}

2088 
	$ouçut_debug1
(Ë{ 
	`LCD¥ötCh¨
("D2 "); 
	`LCD¥ötI¡16
(
debug
[1]); 
	}
}

2089 
	$ouçut_debug2
(Ë{ 
	`LCD¥ötCh¨
("D3 "); 
	`LCD¥ötI¡16
(
debug
[2]); 
	}
}

2090 
	$ouçut_debug3
(Ë{ 
	`LCD¥ötCh¨
("D4 "); 
	`LCD¥ötI¡16
(
debug
[3]); 
	}
}

2093 #i‡
deföed
(
DEBUG
Ë|| deföed(
DEBUG_FREE
)

2094 
	#PRINT_FREE_RAM
 { \

2095 
__bss_íd
; \

2097 *
__brkvÆ
; \

2098 
‰ì_mem‹y
; \

2099 if(()
__brkvÆ
 == 0) \

2100 
‰ì_mem‹y
 = (()&‰ì_mem‹yË- (()&
__bss_íd
); \

2102 
‰ì_mem‹y
 = (()&‰ì_mem‹yË- (()
__brkvÆ
); \

2103 
	`°r˝y_P
(
löe1
,
	`PSTR
(" Free ----")); \

2104 
löe1
[6] = 
	`digô1000
–
‰ì_mem‹y
 ); \

2105 
löe1
[7] = 
	`digô100
–
‰ì_mem‹y
 ); \

2106 
löe1
[8] = 
	`digô10
–
‰ì_mem‹y
 ); \

2107 
löe1
[9] = 
	`digô1
–
‰ì_mem‹y
 ); \

2108 
	`LCD£tLöe
(1); 
	`LCD¥ötCh¨
(
löe1
); \

2109 
ãÀmëry
 = 0; \

2110 }

	)

2111 
	#PRINT_FREE_RAM_v2
 { \

2112 c⁄° 
uöt8_t
 *
±r
 = &
_íd
; \

2113 
uöt16_t
 
‰ì_mem‹y
 = 0; \

2114 *
±r
 =0xa5 &&Öå <&
__°ack
) \

2115 { 
±r
++; 
‰ì_mem‹y
++; } \

2116 
	`°r˝y_P
(
löe1
,
	`PSTR
(" Free ----")); \

2117 
löe1
[6] = 
	`digô1000
–
‰ì_mem‹y
 ); \

2118 
löe1
[7] = 
	`digô100
–
‰ì_mem‹y
 ); \

2119 
löe1
[8] = 
	`digô10
–
‰ì_mem‹y
 ); \

2120 
löe1
[9] = 
	`digô1
–
‰ì_mem‹y
 ); \

2121 
	`LCD£tLöe
(1); 
	`LCD¥ötCh¨
(
löe1
); \

2122 
ãÀmëry
 = 0; \

2123 }

	)

2127 #ifde‡
DISPLAY_2LINES


2128 
	$lcd_ãÀmëry
() {

2129 
uöt8_t
 
löír
 = 0;

2130 
ãÀmëry
) {

2131 
uöt16_t
 
unô
;

2132 
uöt8_t
 
i
;

2133 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_1


2136 i‡(
löír
++ % 2) {

2137 
	`fûl_löe1_deg
();

2138 
	`LCD£tLöe
(1);

2139 
	`LCD¥ötCh¨
(
löe1
);

2141 #ifde‡
POWERMETER_HARD


2142 
	`LCD£tLöe
(2);

2143 
	`ouçut_AmaxA
();

2148 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_2


2151 i‡(
löír
++ % 2) {

2152 
	`LCD£tLöe
(1);

2153 
	`ouçut_V
();

2155 
	`LCD£tLöe
(2);

2156 
	`ouçut_mAh
();

2160 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_3


2163 i‡(
löír
++ % 2) {

2164 
	`LCD£tLöe
(1);

2165 
	`ouçut_cy˛e
();

2167 #i‡(
LOG_VALUES
 >= 2)

2168 
	`LCD£tLöe
(2);

2169 
	`ouçut_cy˛eMöMax
());

2174 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_4


2177 i‡(
löír
++ % 2) {

2178 
	`LCD£tLöe
(1);
	`LCD¥ötCh¨
("G ");

2179 
	`ouçutSís‹
(4, 
imu
.
gyroD©a
[0], 
GYROLIMIT
); 
	`LCD¥öt
(' ');

2180 
	`ouçutSís‹
(4, 
imu
.
gyroD©a
[1], 
GYROLIMIT
); 
	`LCD¥öt
(' ');

2181 
	`ouçutSís‹
(4, 
imu
.
gyroD©a
[2], 
GYROLIMIT
);

2183 
	`LCD£tLöe
(2);
	`LCD¥ötCh¨
("A ");

2184 
	`ouçutSís‹
(4, 
imu
.
accSmoŸh
[0], 
ACCLIMIT
); 
	`LCD¥öt
(' ');

2185 
	`ouçutSís‹
(4, 
imu
.
accSmoŸh
[1], 
ACCLIMIT
); 
	`LCD¥öt
(' ');

2186 
	`ouçutSís‹
(4, 
imu
.
accSmoŸh
[2] - 
ACC_1G
, 
ACCLIMIT
);

2190 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_5


2193 i‡(
löír
++ % 2) {

2194 
	`LCD£tLöe
(1);

2195 
	`ouçut_Áûs
();

2197 
	`LCD£tLöe
(2);

2198 
	`ouçut_™√x
();

2202 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_6


2205 i‡(
löír
++ % 2) {

2206 
	`°r˝y_P
(
löe1
,
	`PSTR
("Roll Pitch Throt"));

2207 i‡(
f
.
ARMED
Ë
löe2
[14] = 'A'; line2[14] = 'a';

2208 i‡(
Áûß„C¡
 > 5Ë
löe2
[15] = 'F'; line2[15] = 'f';

2209 
	`LCD£tLöe
(1);
	`LCD¥ötCh¨
(
löe1
);

2212 
	`°r˝y_P
(
löe2
,
	`PSTR
("---- ---- ----xx"));

2213 
löe2
[0] = 
	`digô1000
–
rcD©a
[
ROLL
] );

2214 
löe2
[1] = 
	`digô100
–
rcD©a
[
ROLL
] );

2215 
löe2
[2] = 
	`digô10
–
rcD©a
[
ROLL
] );

2216 
löe2
[3] = 
	`digô1
–
rcD©a
[
ROLL
] );

2217 
löe2
[5] = 
	`digô1000
–
rcD©a
[
PITCH
] );

2218 
löe2
[6] = 
	`digô100
–
rcD©a
[
PITCH
] );

2219 
löe2
[7] = 
	`digô10
–
rcD©a
[
PITCH
] );

2220 
löe2
[8] = 
	`digô1
–
rcD©a
[
PITCH
] );

2221 
löe2
[10] = 
	`digô1000
–
rcD©a
[
THROTTLE
] );

2222 
löe2
[11] = 
	`digô100
–
rcD©a
[
THROTTLE
] );

2223 
löe2
[12] = 
	`digô10
–
rcD©a
[
THROTTLE
] );

2224 
löe2
[13] = 
	`digô1
–
rcD©a
[
THROTTLE
] );

2225 
	`LCD£tLöe
(2);
	`LCD¥ötCh¨
(
löe2
);

2229 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_7


2232 #i‡
GPS


2233 i‡(
löír
++ % 2) {

2234 
	`fûl_löe1_gps_œt
(1);

2235 
	`LCD£tLöe
(1);
	`LCD¥ötCh¨
(
löe1
);

2238 
	`fûl_löe2_gps_l⁄
(1);

2239 
	`LCD£tLöe
(2);
	`LCD¥ötCh¨
(
löe2
);

2244 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_9


2247 
	`LCD£tLöe
(1);

2248 
	`LCD¥ötI¡16
(
debug
[0]); 
	`LCD¥öt
(' ');

2249 
	`LCD¥ötI¡16
(
debug
[1]); 
	`LCD¥öt
(' ');

2250 
	`LCD¥ötI¡16
(
debug
[2]); 
	`LCD¥öt
(' ');

2251 
	`LCD¥ötI¡16
(
debug
[3]); 
	`LCD¥öt
(' ');

2255 #i‡
	`deföed
(
LOG_VALUES
Ë&& deföed(
DEBUG
)

2258 
cy˛eTimeMax
 = 0;

2259 
cy˛eTimeMö
 = 65535;

2260 
ãÀmëry
 = 0;

2263 #i‡
	`deföed
(
DEBUG
Ë|| deföed(
DEBUG_FREE
)

2265 
PRINT_FREE_RAM
;

2270 
	}
}

2274 #ifde‡
DISPLAY_MULTILINE


2275 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_5


2276 
	$ouçutMŸ‹Sîvo
(
uöt8_t
 
i
, 
uöt16_t
 
unô
) {

2277 #ifde‡
HELICOPTER


2278 
ouçutNames
[16][3] = {"M1", " 2"," 3", " 4", " 5", " 6", " 7", " 8",

2281 
ouçutNames
[16][3] = {"M1", " 2"," 3", " 4", " 5", " 6", " 7", " 8",

2284 
	`LCD¥ötCh¨
(
ouçutNames
[
i
]);

2285 
ãm∂©e7
[1] = 
	`digô1000
(
unô
);

2286 
ãm∂©e7
[2] = 
	`digô100
(
unô
);

2287 
ãm∂©e7
[3] = 
	`digô10
(
unô
);

2288 
ãm∂©e7
[4] = 
	`digô1
(
unô
);

2289 
	`LCD¥ötCh¨
(
ãm∂©e7
);

2290 
unô
 = 
	`c⁄°øö
(unit,1000,2000);

2291 
	`LCDb¨
(
DISPLAY_COLUMNS
-8, (
unô
-1000)/10 );

2292 
	`LCD¸lf
();

2293 
	}
}

2295 #ifde‡
LCD_TELEMETRY_PAGE1


2296 (*
	g∑ge1_func_±r
[]Ë(Ë
LCD_TELEMETRY_PAGE1
 ;

2298 (*
	g∑ge1_func_±r
[]) () = {

2299 #ifde‡
VBAT


2300 
ouçut_V
,

2302 #ifde‡
POWERMETER


2303 
ouçut_mAh
,

2305 #ifde‡
VBAT


2306 
ouçut_Vmö
,

2308 
ouçut_îr‹s_‹_¨medTime
,

2309 
ouçut_checkbox°©us
,

2310 #i‡
BARO


2311 
ouçut_Ætôude
,

2313 #ifde‡
POWERMETER_HARD


2314 
ouçut_AmaxA
,

2316 #ifde‡
WATTS


2317 
ouçut_WmaxW
,

2319 
ouçut_u±ime_c£t
,

2322 #ifde‡
LCD_TELEMETRY_PAGE9


2323 (*
	g∑ge9_func_±r
[]Ë(Ë
LCD_TELEMETRY_PAGE9
 ;

2325 (*
	g∑ge9_func_±r
[]) () = {

2326 
ouçut_cy˛e
,

2327 #i‡(
LOG_VALUES
 >= 2)

2328 
ouçut_cy˛eMöMax
,

2330 
ouçut_Áûs
,

2331 
ouçut_™√x
,

2332 #ifde‡
DEBUG


2333 
ouçut_debug0
, 
ouçut_debug1
, 
ouçut_debug2
, 
ouçut_debug3
,

2337 #ifde‡
LCD_TELEMETRY_PAGE2


2338 (*
	g∑ge2_func_±r
[]Ë(Ë
LCD_TELEMETRY_PAGE2
 ;

2340 (*
	g∑ge2_func_±r
[]Ë(Ë{ 
ouçut_gyroX
, 
ouçut_gyroY
, 
ouçut_gyroZ
, 
ouçut_accX
, 
ouçut_accY
, 
ouçut_accZ
, };

2343 
	$lcd_ãÀmëry
() {

2344 
uöt8_t
 
löír
 = 0;

2345 #ifde‡
DISPLAY_FONT_DSIZE


2346 
uöt8_t
 
off£t
 = 0;

2347 
	#POSSIBLE_OFFSET
 
off£t


	)

2349 
	#POSSIBLE_OFFSET
 0

	)

2351 
ãÀmëry
) {

2352 
uöt16_t
 
unô
;

2353 
uöt8_t
 
i
;

2355 
ãÀmëry
 = 0;

2357 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_1


2358 #ifde‡
DISPLAY_FONT_DSIZE


2360 { 
off£t
 = 
MULTILINE_PRE
+
MULTILINE_POST
; }

2366 
löír
++;

2367 
löír
 %
	`mö
(
MULTILINE_PRE
+
MULTILINE_POST
, ((
∑ge1_func_±r
)/2Ë- 
POSSIBLE_OFFSET
);

2368 
	`LCD£tLöe
(
löír
+1);

2369 (*
∑ge1_func_±r
 [
löír
 + 
POSSIBLE_OFFSET
] ) ();

2370 
	`LCD¸lf
();

2374 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_2


2375 #ifde‡
DISPLAY_FONT_DSIZE


2377 { 
off£t
 = 3; }

2382 
£ns‹Names
[6][3] = {"Gx", "Gy", "Gz", "Ax", "Ay", "Az"};

2383 
i
 = 
löír
++ % 
	`mö
(
MULTILINE_PRE
+
MULTILINE_POST
, 6 - 
POSSIBLE_OFFSET
);

2384 
	`LCD£tLöe
(
i
 + 1);

2385 
	`LCD¥ötCh¨
(
£ns‹Names
[
i
+
POSSIBLE_OFFSET
]);

2386 
	`LCD¥öt
(' ');

2387 (*
∑ge2_func_±r
 [
i
+
POSSIBLE_OFFSET
] ) ();

2388 
	`LCD¸lf
();

2391 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_3


2392 #ifde‡
DISPLAY_FONT_DSIZE


2394 { 
off£t
 = 
MULTILINE_PRE
+
MULTILINE_POST
; }

2400 
i
 = 
löír
++ % 
	`mö
(
MULTILINE_PRE
+
MULTILINE_POST
, 
CHECKBOXITEMS
 - 
POSSIBLE_OFFSET
);

2401 
	`LCD£tLöe
(
i
 + 1);

2402 
	`LCD¥ötCh¨
(
checkboxôemNames
[
i
+
POSSIBLE_OFFSET
]);

2404 
	`LCD¥öt
(' ');

2405 
	`LCD¥öt
–
rcO±i⁄s
[
i
+
POSSIBLE_OFFSET
] ? 'X' : '.');

2406 
	`LCD¸lf
();

2410 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_4


2411 #ifde‡
DISPLAY_FONT_DSIZE


2413 { 
off£t
 = 4; }

2419 
ch™√lNames
[8][4] = {"Ail", "Ele", "Yaw", "Thr", "Ax1", "Ax2", "Ax3", "Ax4"};

2420 
i
 = 
löír
++ % 8;

2421 
	`LCD£tLöe
((
i
 - 
POSSIBLE_OFFSET
)%8 + 1);

2424 
ãm∂©e3
[0] = ( '0' + 
i
+1);

2425 
	`LCD¥ötCh¨
(
ãm∂©e3
);

2426 
	`LCD¥ötCh¨
(
ch™√lNames
[
i
]);

2427 
unô
 = 
rcD©a
[
i
];

2428 
ãm∂©e7
[1] = 
	`digô1000
(
unô
);

2429 
ãm∂©e7
[2] = 
	`digô100
(
unô
);

2430 
ãm∂©e7
[3] = 
	`digô10
(
unô
);

2431 
ãm∂©e7
[4] = 
	`digô1
(
unô
);

2432 
	`LCD¥ötCh¨
(
ãm∂©e7
);

2433 
unô
 = 
	`c⁄°øö
(
rcD©a
[
i
],1000,2000);

2434 
	`LCDb¨
(
DISPLAY_COLUMNS
-11, (
unô
-1000)/10 );

2435 
	`LCD¸lf
();

2439 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_5


2440 #ifde‡
DISPLAY_FONT_DSIZE


2442 { 
off£t
 = 
MULTILINE_PRE
+
MULTILINE_POST
; }

2450 
uöt8_t
 
ödex
 = 0;

2451 
i
 = 
ödex
++ % 16;

2452 i‡(
i
 =0Ë
löír
 = 0;

2453 
	`LCD£tLöe
((
löír
 - 
POSSIBLE_OFFSET
)%8 +1);

2454 i‡(
i
 < 8) {

2455 i‡(
i
 < 
NUMBER_MOTOR
) {

2456 
	`ouçutMŸ‹Sîvo
(
i
, 
mŸ‹
[i]);

2457 
löír
++;

2459 
ödex
 = 8;

2462 
uöt8_t
 
j
 = 
i
-7;

2463 #i‡
	`deföed
(
PRI_SERVO_FROM
Ë&& deföed(
SEC_SERVO_FROM
)

2464 i‡((
PRI_SERVO_FROM
 <
j
 && 
PRI_SERVO_TO
 >jË|| (
SEC_SERVO_FROM
 <j && 
SEC_SERVO_TO
 >= j))

2465 #ñi‡
	`deföed
(
PRI_SERVO_FROM
)

2466 i‡(
j
 < 
PRI_SERVO_FROM
Ë
ödex
 = 7 + PRI_SERVO_FROM;

2467 i‡(
j
 > 
PRI_SERVO_TO
Ë
ödex
 = 16;

2470 #i‡
	`deföed
(
PRI_SERVO_FROM
Ë|| deföed(
SEC_SERVO_FROM
)

2472 
	`ouçutMŸ‹Sîvo
(
i
, 
£rvo
[
j
-1]);

2473 
löír
++;

2483 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_6


2484 #i‡
	`deföed
(
VBAT_CELLS
)

2485 #ifde‡
DISPLAY_FONT_DSIZE


2487 { 
off£t
 = 4; }

2493 
i
 = 
löír
++ % 
VBAT_CELLS_NUM
;

2494 
	`LCD£tLöe
((
i
 - 
POSSIBLE_OFFSET
)% 
VBAT_CELLS_NUM
 + 1);

2495 
	`°r˝y_P
(
löe1
,
	`PSTR
("_:-.-V __._V"));

2497 
löe1
[0] = 
	`digô1
(
i
+1);

2498 
uöt16_t
 
v
 = 
™Æog
.
vb©˚Œs
[
i
];

2499 i‡(
i
>0Ë
v
 = (
™Æog
.
vb©˚Œs
[i] >ánalog.vbatcells[i-1] ?ánalog.vbatcells[i] -ánalog.vbatcells[i-1] : 0);

2500 
löe1
[2] = 
	`digô10
(
v
);

2501 
löe1
[4] = 
	`digô1
(
v
);

2502 
löe1
[7] = 
	`digô100
(
™Æog
.
vb©˚Œs
[
i
]);

2503 
löe1
[8] = 
	`digô10
(
™Æog
.
vb©˚Œs
[
i
]);

2504 
löe1
[10] = 
	`digô1
(
™Æog
.
vb©˚Œs
[
i
]);

2508 i‡(
v
 > 
VBATNOMINAL
/
VBAT_CELLS_NUM
) v = VBATNOMINAL/VBAT_CELLS_NUM;

2509 
	`LCDb¨
(
DISPLAY_COLUMNS
-12, (
v
*100*
VBAT_CELLS_NUM
)/
VBATNOMINAL
 );

2511 
	`LCD¥ötCh¨
(
löe1
);

2512 
	`LCD¸lf
();

2518 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_7


2519 #i‡
GPS


2520 #ifde‡
DISPLAY_FONT_DSIZE


2522 { 
off£t
 = 
MULTILINE_PRE
+
MULTILINE_POST
; }

2527 
löír
++;

2528 
löír
 %= 6;

2529 
	`LCD£tLöe
(
löír
+1);

2530 
löír
 + 
POSSIBLE_OFFSET
) {

2532 
	`fûl_löe1_gps_œt
(0);

2533 
	`LCD¥ötCh¨
(
löe1
);

2536 
	`fûl_löe2_gps_l⁄
(0);

2537 
	`LCD¥ötCh¨
(
löe2
);

2540 
	`°r˝y_P
(
löe1
,
	`PSTR
("-- Sats"));

2542 
löe1
[0] = 
	`digô10
(
GPS_numS©
);

2543 
löe1
[1] = 
	`digô1
(
GPS_numS©
);

2544 
	`LCD¥ötCh¨
(
löe1
);

2560 
uöt8_t
 
v
 = (
GPS_•ìd
 * 0.036f);

2561 
	`°r˝y_P
(
löe1
,
	`PSTR
("--km/h max--km/h"));

2563 
löe1
[0] = 
	`digô10
(
v
);

2564 
löe1
[1] = 
	`digô1
(
v
);

2565 
v
 = (
GPS_•ìdMax
 * 0.036f);

2566 
löe1
[10] = 
	`digô10
(
v
);

2567 
löe1
[11] = 
	`digô1
(
v
);

2568 
	`LCD¥ötCh¨
(
löe1
);

2572 
	`ouçut_V
();

2575 
	`LCD¸lf
();

2580 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_8


2581 #ifde‡
DISPLAY_FONT_DSIZE


2583 { 
off£t
 = 5; }

2589 
Æ¨msNames
[][12] = {

2600 
löír
++;

2601 
löír
 %
	`mö
(
MULTILINE_PRE
+
MULTILINE_POST
, 10 - 
POSSIBLE_OFFSET
);

2602 
	`LCD£tLöe
(
löír
+1);

2604 
	`LCD¥ötCh¨
–
Æ¨msNames
[
löír
 + 
POSSIBLE_OFFSET
] );

2605 
	`LCD¥öt
(' ');

2606 
	`LCD¥öt
–
	`digô1
–
Æ¨mAºay
[
löír
 + 
POSSIBLE_OFFSET
] ) );

2607 
	`LCD¸lf
();

2611 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_9


2612 #ifde‡
DISPLAY_FONT_DSIZE


2614 { 
off£t
 = 4; }

2619 
löír
++;

2620 
löír
 %
	`mö
(
MULTILINE_PRE
+
MULTILINE_POST
, ((
∑ge9_func_±r
)/2Ë- 
POSSIBLE_OFFSET
);

2621 
	`LCD£tLöe
(
löír
+1);

2622 (*
∑ge9_func_±r
 [
löír
 + 
POSSIBLE_OFFSET
] ) ();

2623 
	`LCD¸lf
();

2626 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_R


2630 #i‡
	`deföed
(
LOG_VALUES
) && (LOG_VALUES >= 2)

2631 
cy˛eTimeMax
 = 0;

2632 
cy˛eTimeMö
 = 65535;

2634 #i‡
BARO


2635 #i‡
	`deföed
(
LOG_VALUES
)

2636 
BAROÆtMax
 = 0;

2639 #i‡
	`deföed
(
FAILSAFE
)

2640 
Áûß„Evíts
 = 0;

2642 
i2c_îr‹s_cou¡
 = 0;

2643 
f
.
OK_TO_ARM
 = 1;

2644 
ãÀmëry
 = 0;

2648 #i‡
	`deföed
(
DEBUG
Ë|| deföed(
DEBUG_FREE
)

2650 
PRINT_FREE_RAM
;

2655 
	}
}

2659 
	$toggÀ_ãÀmëry
(
uöt8_t
 
t
) {

2660 i‡(
ãÀmëry
 =
t
)Åelemetry = 0;

2662 
ãÀmëry
 = 
t
;

2663 #i‡
	`deföed
–
OLED_I2C_128x64
)

2664 i‡(
ãÀmëry
 !0Ë
	`i2c_OLED_öô
();

2665 #ñi‡
	`deföed
(
OLED_DIGOLE
)

2666 i‡(
ãÀmëry
 !0Ë
	`i2c_OLED_DIGOLE_öô
();

2668 
	`LCD˛ór
();

2670 
	}
}

2673 #ifde‡
LOG_PERMANENT


2674 
	$dumpPLog
(
uöt8_t
 
fuŒ
) {

2675 #ifde‡
HAS_LCD


2676  
	`LCD√xéöe
();

2677 
	`LCD¥ötCh¨
("La°Of‡ "); LCD¥ötCh¨(
∂og
.
ru¬ög
 ? "KO" : "ok"); 
	`LCD√xéöe
();

2678 
	`LCD¥ötCh¨
("#O¿ "); 
	`LCD¥ötI¡16
(
∂og
.
°¨t
); 
	`LCD√xéöe
();

2679 
	`LCD¥ötCh¨
("Li„[mö]"); 
	`LCD¥ötI¡16
(
∂og
.
li„time
/60); 
	`LCD√xéöe
();

2680 i‡(
fuŒ
) {

2681 #ifde‡
DEBUG


2682 
	`LCD¥ötCh¨
("#¨m "); 
	`LCD¥ötI¡16
(
∂og
.
¨m
); 
	`LCD√xéöe
();

2683 
	`LCD¥ötCh¨
("#dißrm"); 
	`LCD¥ötI¡16
(
∂og
.
dißrm
); 
	`LCD√xéöe
();

2684 
	`LCD¥ötCh¨
("œ°[s]"); 
	`LCD¥ötI¡16
(
∂og
.
¨med_time
/1000000); 
	`LCD√xéöe
();

2685 
	`LCD¥ötCh¨
("#Áû@dis"); 
	`LCD¥ötI¡16
(
∂og
.
Áûß„
); 
	`LCD√xéöe
();

2686 
	`LCD¥ötCh¨
("#i2c@di†"); 
	`LCD¥ötI¡16
(
∂og
.
i2c
); 
	`LCD√xéöe
();

2698 
	`dñay
(4000);

2700 #ifde‡
LOG_PERMANENT_SERVICE_LIFETIME


2701 
	`£rvi˚CheckPLog
();

2703 #ifde‡
HAS_LCD


2704 
	`LCD˛ór
();

2706 
	}
}

2708 
	$LCD√xéöe
() {

2709 #i‡–
	`deföed
(
DISPLAY_MULTILINE
) )

2710 
 r
++;

2711 i‡(
 r
 > (
MULTILINE_PRE
+
MULTILINE_POST
)) {

2712 
 r
 = 1;

2713 
	`dñay
(4000);

2714 
	`LCD˛ór
();

2716 
	`LCD£tLöe
(
 r
);

2717 
LCD_FLUSH
;

2718 #ñi‡–
	`deföed
(
DISPLAY_2LINES
))

2719 #i‡(! (
	`deföed
(
LCD_TTY
) ) )

2720 
	`dñay
(600);

2722 #ifde‡
HAS_LCD


2723 
	`LCD¥ötCh¨
("\r\n");

2728 
	}
}

2730 #ifde‡
LOG_PERMANENT_SERVICE_LIFETIME


2731 
	$£rvi˚CheckPLog
() {

2732 i‡–(!
f
.
ARMED
Ë&& (
∂og
.
li„time
 > 
LOG_PERMANENT_SERVICE_LIFETIME
) ){

2733 
uöt8_t
 
i
 = 0; i<
	`max
(1, 
	`mö
(9,(
∂og
.
li„time
-
LOG_PERMANENT_SERVICE_LIFETIME
)>>10 )); i++) {

2734 #ifde‡
HAS_LCD


2735 
	`LCD¥ötCh¨
("SERVICEÜi„time"); 
	`LCD√xéöe
();

2737 
	`blökLED
(5,200,5);

2738 
	`dñay
(5000);

2740 
	`SET_ALARM
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_ELSE
);

2742 
	}
}

	@LCD.h

1 #i‚de‡
LCD_H_


2 
	#LCD_H_


	)

4 
c⁄figuøti⁄Lo›
();

5 
LCD¥öt
(
uöt8_t
 
i
);

6 
lcd_ãÀmëry
();

7 
öôLCD
();

8 
i2c_OLED_DIGOLE_öô
 ();

9 
i2c_OLED_öô
();

10 
LCD˛ór
();

11 
toggÀ_ãÀmëry
(
uöt8_t
 
t
);

12 
dumpPLog
(
uöt8_t
 
fuŒ
);

15 
LCD¥ötI¡16
(
öt16_t
 
v
);

16 
LCD¸lf
();

18 
¥öt_u±ime
(
uöt16_t
 
£c
);

19 
ouçut_checkboxôems
();

22 
ouçut_Áûs
();

23 
ouçut_™√x
();

25 
ouçut_V
();

26 
ouçut_mAh
();

27 
ouçut_AmaxA
();

28 
ouçut_îr‹s_‹_¨medTime
();

29 
ouçut_WmaxW
();

30 
ouçut_u±ime_c£t
();

31 
ouçut_Ætôude
();

32 
ouçut_checkbox°©us
();

33 
ouçut_cy˛eMöMax
();

34 
ouçut_cy˛e
();

35 
ouçut_gyroX
();

36 
ouçut_gyroY
();

37 
ouçut_gyroZ
();

38 
ouçut_accX
();

39 
ouçut_accY
();

40 
ouçut_accZ
();

42 
ouçut_debug0
() ;

43 
ouçut_debug1
() ;

44 
ouçut_debug2
() ;

45 
ouçut_debug3
() ;

	@MultiWii.cpp

11 
	~<avr/io.h
>

13 
	~"Arduöo.h
"

14 
	~"c⁄fig.h
"

15 
	~"def.h
"

16 
	~"ty≥s.h
"

17 
	~"Mu…iWii.h
"

18 
	~"Aœrms.h
"

19 #ifde‡
MWI_SDCARD


20 
	~"SDˇrd.h
"

22 
	~"EEPROM.h
"

23 
	~"IMU.h
"

24 
	~"LCD.h
"

25 
	~"Ouçut.h
"

26 
	~"RX.h
"

27 
	~"Sís‹s.h
"

28 
	~"Sîül.h
"

29 
	~"GPS.h
"

30 
	~"PrŸocﬁ.h
"

31 
	~"PIDC⁄åﬁÀrs.h
"

32 #i‚de‡
ArdH©


33 
	~"Tñemëry.h
"

36 
	~<avr/pgm•a˚.h
>

40 c⁄° 
	gpid«mes
[] 
	gPROGMEM
 =

53 c⁄° 
	gbox«mes
[] 
	gPROGMEM
 =

55 #i‡
ACC


59 #i‡
BARO
 && (!
deföed
(
SUPPRESS_BARO_ALTHOLD
))

62 #ifde‡
VARIOMETER


66 #i‡
deföed
(
HEADFREE
)

70 #i‡
deföed
(
SERVO_TILT
Ë|| deföed(
GIMBAL
)|| deföed(
SERVO_MIX_TILT
)

73 #i‡
deföed
(
CAMTRIG
)

76 #i‡
GPS


80 #i‡
deföed
(
FIXEDWING
Ë|| deföed(
HELICOPTER
)

83 #i‡
deföed
(
BUZZER
)

86 #i‡
deföed
(
LED_FLASHER
)

90 #i‡
deföed
(
LANDING_LIGHTS_DDR
)

93 #ifde‡
INFLIGHT_ACC_CALIBRATION


96 #ifde‡
GOVERNOR_P


99 #ifde‡
OSD_SWITCH


102 #i‡
GPS


105 #i‡
deföed
(
INFLIGHT_PID_TUNING
)

108 #i‡
SONAR


111 #i‡
deföed
(
FIXEDWING
)

116 c⁄° 
uöt8_t
 
	gboxids
[] 
	gPROGMEM
 = {

118 #i‡
ACC


122 #i‡
BARO
 && (!
deföed
(
SUPPRESS_BARO_ALTHOLD
))

125 #ifde‡
VARIOMETER


129 #i‡
deföed
(
HEADFREE
)

133 #i‡
deföed
(
SERVO_TILT
Ë|| deföed(
GIMBAL
)|| deföed(
SERVO_MIX_TILT
)

136 #i‡
deföed
(
CAMTRIG
)

139 #i‡
GPS


143 #i‡
deföed
(
FIXEDWING
Ë|| deföed(
HELICOPTER
)

146 #i‡
deföed
(
BUZZER
)

149 #i‡
deföed
(
LED_FLASHER
)

153 #i‡
deföed
(
LANDING_LIGHTS_DDR
)

156 #ifde‡
INFLIGHT_ACC_CALIBRATION


159 #ifde‡
GOVERNOR_P


162 #ifde‡
OSD_SWITCH


165 #i‡
GPS


167 #i‚de‡
SLIM_WING


170 #i‡
deföed
(
INFLIGHT_PID_TUNING
)

173 #i‡
SONAR


176 #i‡
deföed
(
FIXEDWING
)

185 
	#ROL_LO
 (1<<(2*
ROLL
))

	)

186 
	#ROL_CE
 (3<<(2*
ROLL
))

	)

187 
	#ROL_HI
 (2<<(2*
ROLL
))

	)

188 
	#PIT_LO
 (1<<(2*
PITCH
))

	)

189 
	#PIT_CE
 (3<<(2*
PITCH
))

	)

190 
	#PIT_HI
 (2<<(2*
PITCH
))

	)

191 
	#YAW_LO
 (1<<(2*
YAW
))

	)

192 
	#YAW_CE
 (3<<(2*
YAW
))

	)

193 
	#YAW_HI
 (2<<(2*
YAW
))

	)

194 
	#THR_LO
 (1<<(2*
THROTTLE
))

	)

195 
	#THR_CE
 (3<<(2*
THROTTLE
))

	)

196 
	#THR_HI
 (2<<(2*
THROTTLE
))

	)

198 #i‡
deföed
(
INFLIGHT_PID_TUNING
)

199 
	#AUX2_LO
 (1<<(
AUX2
))

	)

200 
	#AUX2_CE
 (3<<(
AUX2
))

	)

201 
	#AUX2_HI
 (2<<(
AUX2
))

	)

204 
uöt32_t
 
	gcuºítTime
 = 0;

205 
uöt16_t
 
	g¥eviousTime
 = 0;

206 
uöt16_t
 
	gcy˛eTime
 = 0;

207 
uöt16_t
 
	gˇlibøtögA
 = 0;

208 
uöt16_t
 
	gˇlibøtögB
 = 0;

209 
uöt16_t
 
	gˇlibøtögG
;

210 #i‡
SONAR


211 
uöt16_t
 
	gˇlibøtögS
 = 0;

213 
öt16_t
 
	gmagHﬁd
, 
	ghódFªeModeHﬁd
;

214 
uöt8_t
 
	gvb©Mö
 = 
VBATNOMINAL
;

215 
uöt8_t
 
	grcO±i⁄s
[
CHECKBOXITEMS
];

216 
öt32_t
 
	gA…Hﬁd
;

217 
öt16_t
 
	gs⁄¨A…
;

218 
öt16_t
 
	gB¨oPID
 = 0;

219 
öt16_t
 
	gîr‹A…ôudeI
 = 0;

221 #i‡
deföed
(
INFLIGHT_PID_TUNING
)

222 
uöt8_t
 
	gisö_öÊight_ˇlib
 = 0;

223 
uöt16_t
 
	gﬁd_AUX1_vÆ
 = 0;

225 
uöt16_t
 
	g√w_pid
 = 0;

226 
uöt16_t
 
	g√w_i
 = 0;

227 
uöt16_t
 
	gaux_pos
 = 0;

233 
öt16_t
 
	ggyroZîo
[3] = {0,0,0};

235 
imu_t
 
	gimu
;

237 
™Æog_t
 
	g™Æog
;

239 
Æt_t
 
	gÆt
;

241 
©t_t
 
	g©t
;

243 #i‡
deföed
(
ARMEDTIMEWARNING
)

244 
uöt32_t
 
	gArmedTimeW¨nögMi¸oSec⁄ds
 = 0;

247 
öt16_t
 
	gdebug
[4];

249 
Êags_°ru˘_t
 
	gf
;

252 #i‡
deföed
(
LOG_VALUES
Ë|| deföed(
LCD_TELEMETRY
)

253 
uöt16_t
 
	gcy˛eTimeMax
 = 0;

254 
uöt16_t
 
	gcy˛eTimeMö
 = 65535;

255 
öt32_t
 
	gBAROÆtMax
;

256 
uöt16_t
 
	gGPS_•ìdMax
 = 0;

257 #ifde‡
POWERMETER_HARD


258 
uöt16_t
 
	gpowîVÆueMaxMAH
 = 0;

260 #i‡
deföed
(
WATTS
)

261 
uöt16_t
 
	gw©tsMax
 = 0;

264 #i‡
deföed
(
LOG_VALUES
Ë|| deföed(
LCD_TELEMETRY
Ë|| deföed(
ARMEDTIMEWARNING
Ë|| deföed(
LOG_PERMANENT
Ë|| deföed (
TELEMETRY
)

265 
uöt32_t
 
	g¨medTime
 = 0;

268 
öt16_t
 
	gi2c_îr‹s_cou¡
 = 0;

271 #i‡
deföed
(
THROTTLE_ANGLE_CORRECTION
)

272 
öt16_t
 
	gthrŸéeAngÀC‹ª˘i⁄
 = 0;

273 
öt8_t
 
	gcosZ
 = 100;

281 #i‡
deföed
(
INFLIGHT_ACC_CALIBRATION
)

282 
uöt16_t
 
	gInÊightˇlibøtögA
 = 0;

283 
öt16_t
 
	gAccInÊightCÆibøti⁄Armed
;

284 
uöt16_t
 
	gAccInÊightCÆibøti⁄MósuªmítD⁄e
 = 0;

285 
uöt16_t
 
	gAccInÊightCÆibøti⁄SavëoEEProm
 = 0;

286 
uöt16_t
 
	gAccInÊightCÆibøti⁄A˘ive
 = 0;

292 #i‡
deföed
(
POWERMETER
Ë|| ( deföed(
LOG_VALUES
) && (LOG_VALUES >= 3) )

293 
uöt32_t
 
	gpMëî
[
PMOTOR_SUM
 + 1];

294 
uöt8_t
 
	gpMëîV
;

295 
uöt32_t
 
	gpAœrm
;

296 
uöt16_t
 
	gpowîVÆue
 = 0;

298 
uöt16_t
 
	götPowîTriggî1
;

303 #i‡
deföed
(
LCD_TELEMETRY
)

304 
uöt8_t
 
	gãÀmëry
 = 0;

305 
uöt8_t
 
	gãÀmëry_auto
 = 0;

306 
öt16_t
 
	g™√x650_ovîrun_cou¡
 = 0;

308 #ifde‡
LCD_TELEMETRY_STEP


309 
	gãÀmërySãpSequí˚
 [] = 
LCD_TELEMETRY_STEP
;

310 
uöt8_t
 
	gãÀmërySãpIndex
 = 0;

316 
	#ROL_LO
 (1<<(2*
ROLL
))

	)

317 
	#ROL_CE
 (3<<(2*
ROLL
))

	)

318 
	#ROL_HI
 (2<<(2*
ROLL
))

	)

319 
	#PIT_LO
 (1<<(2*
PITCH
))

	)

320 
	#PIT_CE
 (3<<(2*
PITCH
))

	)

321 
	#PIT_HI
 (2<<(2*
PITCH
))

	)

322 
	#YAW_LO
 (1<<(2*
YAW
))

	)

323 
	#YAW_CE
 (3<<(2*
YAW
))

	)

324 
	#YAW_HI
 (2<<(2*
YAW
))

	)

325 
	#THR_LO
 (1<<(2*
THROTTLE
))

	)

326 
	#THR_CE
 (3<<(2*
THROTTLE
))

	)

327 
	#THR_HI
 (2<<(2*
THROTTLE
))

	)

329 
öt16_t
 
	gÁûß„Evíts
 = 0;

330 vﬁ©ûê
öt16_t
 
	gÁûß„C¡
 = 0;

332 
öt16_t
 
	grcD©a
[
RC_CHANS
];

333 
öt8_t
 
	gsu¥ess_d©a_‰om_rx
 = 0;

334 
öt16_t
 
	grcSîül
[8];

335 
öt16_t
 
	grcComm™d
[4];

336 
uöt8_t
 
	grcSîülCou¡
 = 0;

337 
öt16_t
 
	glookupPôchRﬁlRC
[5];

338 
uöt16_t
 
	glookupThrŸéeRC
[11];

340 #i‡
deföed
(
SERIAL_RX
)

341 vﬁ©ûê
uöt8_t
 
	g•ekFømeFœgs
;

342 vﬁ©ûê
uöt32_t
 
	g•ekTimeLa°
;

343 
uöt8_t
 
	g•ekFømeD⁄e
;

346 #i‡
deföed
(
OPENLRSv2MULTI
)

347 
uöt8_t
 
	gpŸ_P
,
	gpŸ_I
;

354 
öt16_t
 
	gaxisPID
[3];

355 
öt16_t
 
	gmŸ‹
[8];

356 
öt16_t
 
	gmŸ‹_dißrmed
[8];

357 
öt16_t
 
	g£rvo
[8] = {1500,1500,1500,1500,1500,1500,1500,1000};

362 
uöt8_t
 
	gdynP8
[2], 
	gdynD8
[2];

364 
globÆ_c⁄f_t
 
	gglobÆ_c⁄f
;

366 
c⁄f_t
 
	gc⁄f
;

368 #ifde‡
LOG_PERMANENT


369 
∂og_t
 
	g∂og
;

375 #i‡
GPS


376 
gps_c⁄f_°ru˘
 
	gGPS_c⁄f
;

378 
öt16_t
 
	gGPS_™gÀ
[2] = { 0, 0};

379 
öt32_t
 
	gGPS_co‹d
[2];

380 
öt32_t
 
	gGPS_home
[2];

381 
öt32_t
 
	gGPS_hﬁd
[2];

382 
öt32_t
 
	gGPS_¥ev
[2];

383 
öt32_t
 
	gGPS_poi
[2];

384 
uöt8_t
 
	gGPS_numS©
;

385 #ifde‡
UBLOX


386 
uöt32_t
 
	gGPS_time
;

388 
uöt16_t
 
	gGPS_di°™˚ToHome
;

389 
öt16_t
 
	gGPS_dúe˘i⁄ToHome
;

390 
öt32_t
 
	gGPS_dúe˘i⁄ToPoi
;

391 
uöt16_t
 
	gGPS_Ætôude
;

392 
uöt16_t
 
	gGPS_•ìd
;

393 
uöt8_t
 
	gGPS_upd©e
 = 0;

394 
uöt16_t
 
	gGPS_ground_cour£
 = 0;

395 
uöt32_t
 
	gGPS_FAIL_timî
;

398 
uöt8_t
 
	gNAV_°©e
 = 0;

399 
uöt8_t
 
	gNAV_îr‹
 = 0;

400 
uöt8_t
 
	g¥v_gps_modes
 = 0;

401 
uöt32_t
 
	g«v_timî_°›
 = 0;

402 
uöt16_t
 
	g«v_hﬁd_time
;

403 
uöt8_t
 
	gNAV_∑u£d_©
 = 0;

405 
uöt8_t
 
	g√xt_°ï
 = 1;

406 
öt16_t
 
	gjump_times
 = -10;

407 #i‡
GPS


408 
missi⁄_°ï_°ru˘
 
	gmissi⁄_°ï
;

413 
öt16_t
 
	g«v
[2];

414 
öt16_t
 
	g«v_øãd
[2];

417 
öt32_t
 
	g‹igöÆ_Ætôude
;

419 
öt32_t
 
	gèrgë_Ætôude
;

421 
öt32_t
 
	gÆt_to_hﬁd
;

423 
uöt32_t
 
	gÆt_ch™ge_timî
;

424 
öt8_t
 
	gÆt_ch™ge_Êag
;

425 
uöt32_t
 
	gÆt_ch™ge
;

427 
uöt8_t
 
	gÆ¨mAºay
[
ALRM_FAC_SIZE
];

429 #i‡
BARO


430 
öt32_t
 
	gb¨oPªssuª
;

431 
öt16_t
 
	gb¨oTem≥øtuª
;

432 
öt32_t
 
	gb¨oPªssuªSum
;

435 #i‡
deföed
(
AIRSPEED
)

436 
	gaúPªssuªRaw
 = 0;

437 
	gaúPªssuªOff£t
 = 0;

438 
uöt16_t
 
	gaú•ìdS≥ed
 = 0;

441 
	$™√xCode
() {

442 
uöt32_t
 
ˇlibøãdAccTime
;

443 
uöt16_t
 
tmp
,
tmp2
;

444 
uöt8_t
 
axis
,
¥›1
,
¥›2
;

447 #ifde‡
HELICOPTER


448 
	#DYN_THR_PID_CHANNEL
 
COLLECTIVE_PITCH


	)

450 
	#DYN_THR_PID_CHANNEL
 
THROTTLE


	)

452 
¥›2
 = 128;

453 i‡(
rcD©a
[
DYN_THR_PID_CHANNEL
]>1500) {

454 i‡(
rcD©a
[
DYN_THR_PID_CHANNEL
]<2000) {

455 
¥›2
 -((
uöt16_t
)
c⁄f
.
dynThrPID
*(
rcD©a
[
DYN_THR_PID_CHANNEL
]-1500)>>9);

457 
¥›2
 -
c⁄f
.
dynThrPID
;

461 
axis
=0;axis<3;axis++) {

462 
tmp
 = 
	`mö
(
	`abs
(
rcD©a
[
axis
]-
MIDRC
),500);

463 #i‡
	`deföed
(
DEADBAND
)

464 i‡(
tmp
>
DEADBAND
) {Åmp -= DEADBAND; }

465 { 
tmp
=0; }

467 if(
axis
!=2) {

468 
tmp2
 = 
tmp
>>7;

469 
rcComm™d
[
axis
] = 
lookupPôchRﬁlRC
[
tmp2
] + ((
tmp
-(tmp2<<7)) * (lookupPitchRollRC[tmp2+1]-lookupPitchRollRC[tmp2])>>7);

470 
¥›1
 = 128-((
uöt16_t
)
c⁄f
.
rﬁlPôchR©e
*
tmp
>>9);

471 
¥›1
 = (
uöt16_t
Ìr›1*
¥›2
>>7;

472 
dynP8
[
axis
] = (
uöt16_t
)
c⁄f
.
pid
[axis].
P8
*
¥›1
>>7;

473 
dynD8
[
axis
] = (
uöt16_t
)
c⁄f
.
pid
[axis].
D8
*
¥›1
>>7;

475 
rcComm™d
[
axis
] = 
tmp
;

477 i‡(
rcD©a
[
axis
]<
MIDRC
Ë
rcComm™d
[axis] = -rcCommand[axis];

479 
tmp
 = 
	`c⁄°øö
(
rcD©a
[
THROTTLE
],
MINCHECK
,2000);

480 
tmp
 = (
uöt32_t
)—mp-
MINCHECK
)*2559/(2000-MINCHECK);

481 
tmp2
 = 
tmp
/256;

482 
rcComm™d
[
THROTTLE
] = 
lookupThrŸéeRC
[
tmp2
] + (
tmp
-tmp2*256) * (lookupThrottleRC[tmp2+1]-lookupThrottleRC[tmp2]) / 256;

483 #i‡
	`deföed
(
HEADFREE
)

484 if(
f
.
HEADFREE_MODE
) {

485 
ødDiff
 = (
©t
.
hódög
 - 
hódFªeModeHﬁd
) * 0.0174533f;

486 
cosDiff
 = 
	`cos
(
ødDiff
);

487 
söDiff
 = 
	`sö
(
ødDiff
);

488 
öt16_t
 
rcComm™d_PITCH
 = 
rcComm™d
[
PITCH
]*
cosDiff
 +ÑcComm™d[
ROLL
]*
söDiff
;

489 
rcComm™d
[
ROLL
] =ÑcComm™d[ROLL]*
cosDiff
 -ÑcComm™d[
PITCH
]*
söDiff
;

490 
rcComm™d
[
PITCH
] = 
rcComm™d_PITCH
;

495 
uöt8_t
 
™ÆogRódî
 =0;

496 
™ÆogRódî
++ % (4+
VBAT_CELLS_NUM
)) {

499 #i‡
	`deföed
(
POWERMETER_HARD
)

500 
uöt32_t
 
œ°Ród
 = 
cuºítTime
;

501 
uöt8_t
 
öd
 = 0;

502 
uöt16_t
 
pvec
[
PSENSOR_SMOOTH
], 
psum
;

503 
uöt16_t
 
p
 = 
	`™ÆogRód
(
PSENSORPIN
);

506 #i‡
PSENSOR_SMOOTH
 != 1

507 
psum
 +
p
;

508 
psum
 -
pvec
[
öd
];

509 
pvec
[
öd
++] = 
p
;

510 
öd
 %
PSENSOR_SMOOTH
;

511 
p
 = 
psum
 / 
PSENSOR_SMOOTH
;

513 
powîVÆue
 = ( 
c⁄f
.
p£ns‹nuŒ
 > 
p
 ? conf.psensornull -Ö :Ö - conf.psensornull);

514 
™Æog
.
am≥øge
 = ((
uöt32_t
)
powîVÆue
 * 
c⁄f
.
pöt2ma
) / 100;

515 
pMëî
[
PMOTOR_SUM
] +((
cuºítTime
-
œ°Ród
Ë* (
uöt32_t
)((uöt32_t)
powîVÆue
*
c⁄f
.
pöt2ma
))/100000;

516 
œ°Ród
 = 
cuºítTime
;

523 #i‡
	`deföed
(
VBAT
Ë&& !deföed(
VBAT_CELLS
)

524 
uöt8_t
 
öd
 = 0;

525 
uöt16_t
 
vvec
[
VBAT_SMOOTH
], 
vsum
;

526 
uöt16_t
 
v
 = 
	`™ÆogRód
(
V_BATPIN
);

527 #i‡
VBAT_SMOOTH
 == 1

528 
™Æog
.
vb©
 = (
v
*
VBAT_PRESCALER
Ë/ 
c⁄f
.
vb©sˇÀ
 + 
VBAT_OFFSET
;

530 
vsum
 +
v
;

531 
vsum
 -
vvec
[
öd
];

532 
vvec
[
öd
++] = 
v
;

533 
öd
 %
VBAT_SMOOTH
;

534 #i‡
VBAT_SMOOTH
 =
VBAT_PRESCALER


535 
™Æog
.
vb©
 = 
vsum
 / 
c⁄f
.
vb©sˇÀ
 + 
VBAT_OFFSET
;

536 #ñi‡
VBAT_SMOOTH
 < 
VBAT_PRESCALER


537 
™Æog
.
vb©
 = (
vsum
 * (
VBAT_PRESCALER
/
VBAT_SMOOTH
)Ë/ 
c⁄f
.
vb©sˇÀ
 + 
VBAT_OFFSET
;

539 
™Æog
.
vb©
 = ((
vsum
 /
VBAT_SMOOTH
Ë* 
VBAT_PRESCALER
Ë/ 
c⁄f
.
vb©sˇÀ
 + 
VBAT_OFFSET
;

547 #i‡
	`deföed
(
RX_RSSI
)

548 
uöt8_t
 
öd
 = 0;

549 
uöt16_t
 
rvec
[
RSSI_SMOOTH
], 
rsum
, 
r
;

552 #i‡
	`deföed
(
RX_RSSI_CHAN
)

553 
uöt16_t
 
rssi_I≈ut
 = 
	`c⁄°øö
(
rcD©a
[
RX_RSSI_CHAN
],1000,2000);

554 
r
 = 
	`m≠
((
uöt16_t
)
rssi_I≈ut
 , 1000, 2000, 0, 1023);

556 
r
 = 
	`™ÆogRód
(
RX_RSSI_PIN
);

559 #i‡
RSSI_SMOOTH
 == 1

560 
™Æog
.
rssi
 = 
r
;

562 
rsum
 +
r
;

563 
rsum
 -
rvec
[
öd
];

564 
rvec
[
öd
++] = 
r
;

565 
öd
 %
RSSI_SMOOTH
;

566 
r
 = 
rsum
 / 
RSSI_SMOOTH
;

567 
™Æog
.
rssi
 = 
r
;

590 #i‡
	`deföed
(
AIRSPEED
)

591 
	`Aú•ìd_upd©e
();

592 
debug
[3](
aú•ìdS≥ed
/100)*3.6;

600 #i‡
	`deföed
(
VBAT
Ë&& deföed(
VBAT_CELLS
)

601 i‡–(
™ÆogRódî
<4Ë|| (™ÆogRódî>4+
VBAT_CELLS_NUM
-1) ) ;

602 
uöt8_t
 
öd
 = 
™ÆogRódî
-4;

603 
uöt16_t
 
vb©˚Œs_pös
[
VBAT_CELLS_NUM
] = 
VBAT_CELLS_PINS
;

604 
uöt8_t
 
vb©˚Œs_off£t
[
VBAT_CELLS_NUM
] = 
VBAT_CELLS_OFFSETS
;

605 
uöt8_t
 
vb©˚Œs_div
[
VBAT_CELLS_NUM
] = 
VBAT_CELLS_DIVS
;

606 
uöt16_t
 
v
 = 
	`™ÆogRód
(
vb©˚Œs_pös
[
öd
]);

607 
™Æog
.
vb©˚Œs
[
öd
] = 
vb©˚Œs_off£t
[öd] + (
v
 << 2Ë/ 
vb©˚Œs_div
[ind];

608 i‡(
öd
 =
VBAT_CELLS_NUM
 -1Ë
™Æog
.
vb©
 =á«log.
vb©˚Œs
[ind];

614 #i‡
	`deföed
–
POWERMETER_HARD
 ) && (deföed(
LOG_VALUES
Ë|| deföed(
LCD_TELEMETRY
))

615 i‡(
™Æog
.
am≥øge
 > 
powîVÆueMaxMAH
)ÖowerValueMaxMAH =ánalog.amperage;

618 #i‡
	`deföed
(
WATTS
)

619 
™Æog
.
w©ts
 = (™Æog.
am≥øge
 *á«log.
vb©
) / 100;

620 #i‡
	`deföed
(
LOG_VALUES
Ë|| deföed(
LCD_TELEMETRY
)

621 i‡(
™Æog
.
w©ts
 > 
w©tsMax
) wattsMax =ánalog.watts;

625 #i‡
	`deföed
(
BUZZER
)

626 
	`Æ¨mH™dÀr
();

630 i‡–(
ˇlibøtögA
>0 && 
ACC
 ) || (
ˇlibøtögG
>0) ) {

631 
LEDPIN_TOGGLE
;

633 i‡(
f
.
ACC_CALIBRATED
Ë{
LEDPIN_OFF
;}

634 i‡(
f
.
ARMED
Ë{
LEDPIN_ON
;}

637 #i‡
	`deföed
(
LED_RING
)

638 
uöt32_t
 
LEDTime
;

639 i‡–
cuºítTime
 > 
LEDTime
 ) {

640 
LEDTime
 = 
cuºítTime
 + 50000;

641 
	`i2CLedRögSèã
();

645 #i‡
	`deföed
(
LED_FLASHER
)

646 
	`auto_swôch_Àd_Êashî
();

649 i‡–
cuºítTime
 > 
ˇlibøãdAccTime
 ) {

650 i‡(! 
f
.
SMALL_ANGLES_25
) {

652 
f
.
ACC_CALIBRATED
 = 0;

653 
LEDPIN_TOGGLE
;

654 
ˇlibøãdAccTime
 = 
cuºítTime
 + 100000;

656 
f
.
ACC_CALIBRATED
 = 1;

662 #i‡
GPS


663 if(!
BARO
Ë
Æt
.
E°A…
 = (
GPS_Ætôude
 - 
GPS_home
[
ALT
])*100;

664 if(!
MAG
 && 
GPS_•ìd
 > 100) {

665 
©t
.
hódög
 = 
GPS_ground_cour£
;

666 #i‚de‡
SIMDEBUG


667 
©t
.
hódög
/=10;

671 i‡(
©t
.
hódög
 <= - 180)átt.heading += 360;

672 i‡(
©t
.
hódög
 >= 180)átt.heading -= 360;

677 #i‡!(
	`deföed
(
SERIAL_RX
Ë&& deföed(
PROMINI
))

678 
	`£rülCom
();

681 #i‡
	`deföed
(
POWERMETER
)

682 
™Æog
.
ötPowîMëîSum
 = (
pMëî
[
PMOTOR_SUM
]/
PLEVELDIV
);

683 
ötPowîTriggî1
 = 
c⁄f
.
powîTriggî1
 * 
PLEVELSCALE
;

686 #ifde‡
LCD_TELEMETRY_AUTO


687 
ãÀmëryAutoSequí˚
 [] = 
LCD_TELEMETRY_AUTO
;

688 
uöt8_t
 
ãÀmëryAutoIndex
 = 0;

689 
uöt16_t
 
ãÀmëryAutoTimî
 = 0;

690 i‡–(
ãÀmëry_auto
Ë&& (! (++
ãÀmëryAutoTimî
 % 
LCD_TELEMETRY_AUTO_FREQ
) ) ){

691 
ãÀmëry
 = 
ãÀmëryAutoSequí˚
[++
ãÀmëryAutoIndex
 % 
	`°æí
(telemetryAutoSequence)];

692 
	`LCD˛ór
();

695 #ifde‡
LCD_TELEMETRY


696 
uöt16_t
 
ãÀmëryTimî
 = 0;

697 i‡(! (++
ãÀmëryTimî
 % 
LCD_TELEMETRY_FREQ
)) {

698 #i‡(
LCD_TELEMETRY_DEBUG
+0 > 0)

699 
ãÀmëry
 = 
LCD_TELEMETRY_DEBUG
;

701 i‡(
ãÀmëry
Ë
	`lcd_ãÀmëry
();

705 #ifde‡
TELEMETRY


706 
	`run_ãÀmëry
();

709 #i‡
GPS
 & 
	`deföed
(
GPS_LED_INDICATOR
)

710 
uöt32_t
 
GPSLEDTime
;

711 
uöt8_t
 
bl˙t
;

712 if(
cuºítTime
 > 
GPSLEDTime
) {

713 if(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 5) {

714 if(++
bl˙t
 > 2*
GPS_numS©
) blcnt = 0;

715 
GPSLEDTime
 = 
cuºítTime
 + 150000;

716 if(
bl˙t
 >10 && ((bl˙t%2Ë=0)Ë{
STABLEPIN_ON
;} {
STABLEPIN_OFF
;}

718 if((
GPS_upd©e
 =1Ë&& !
f
.
GPS_FIX
Ë{
STABLEPIN_ON
;} {
STABLEPIN_OFF
;}

719 
bl˙t
 = 0;

724 #i‡
	`deföed
(
LOG_VALUES
) && (LOG_VALUES >= 2)

725 i‡(
cy˛eTime
 > 
cy˛eTimeMax
) cycleTimeMax = cycleTime;

726 i‡(
cy˛eTime
 < 
cy˛eTimeMö
) cycleTimeMin = cycleTime;

728 i‡(
f
.
ARMED
) {

729 #i‡
	`deföed
(
LCD_TELEMETRY
Ë|| deföed(
ARMEDTIMEWARNING
Ë|| deföed(
LOG_PERMANENT
Ë|| deföed (
TELEMETRY
)

730 
¨medTime
 +(
uöt32_t
)
cy˛eTime
;

732 #i‡
	`deföed
(
VBAT
)

733 i‡–(
™Æog
.
vb©
 > 
NO_VBAT
Ë&& (™Æog.vb© < 
vb©Mö
) ) vbatMin =ánalog.vbat;

735 #ifde‡
LCD_TELEMETRY


736 #i‡
BARO


737 i‡–(
Æt
.
E°A…
 > 
BAROÆtMax
) ) BAROaltMax =ált.EstAlt;

739 #i‡
GPS


740 i‡–(
GPS_•ìd
 > 
GPS_•ìdMax
) ) GPS_speedMax = GPS_speed;

744 
	}
}

746 
	$£tup
() {

747 
	`SîülO≥n
(0,
SERIAL0_COM_SPEED
);

748 #i‡
	`deföed
(
PROMICRO
)

749 
	`SîülO≥n
(1,
SERIAL1_COM_SPEED
);

751 #i‡
	`deföed
(
MEGA
)

752 
	`SîülO≥n
(1,
SERIAL1_COM_SPEED
);

753 
	`SîülO≥n
(2,
SERIAL2_COM_SPEED
);

754 
	`SîülO≥n
(3,
SERIAL3_COM_SPEED
);

756 
LEDPIN_PINMODE
;

757 
POWERPIN_PINMODE
;

758 
BUZZERPIN_PINMODE
;

759 
STABLEPIN_PINMODE
;

760 
POWERPIN_OFF
;

761 
	`öôOuçut
();

762 
	`ªadGlobÆSë
();

763 #i‚de‡
NO_FLASH_CHECK


764 #i‡
	`deföed
(
MEGA
)

765 
uöt16_t
 
i
 = 65000;

767 
uöt16_t
 
i
 = 32000;

769 
uöt16_t
 
Êashsum
 = 0;

770 
uöt8_t
 
pbyt
;

771 
i
--) {

772 
pbyt
 = 
	`pgm_ªad_byã
(
i
);

773 
Êashsum
 +
pbyt
;

774 
Êashsum
 ^(
pbyt
<<8);

777 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


778 
globÆ_c⁄f
.
cuºítSë
=2;

780 
globÆ_c⁄f
.
cuºítSë
=0;

783 #i‚de‡
NO_FLASH_CHECK


784 if(
	`ªadEEPROM
()) {

785 if(
Êashsum
 !
globÆ_c⁄f
.ÊashsumË
	`upd©e_c⁄°™ts
();

788 
	`ªadEEPROM
();

790 if(
globÆ_c⁄f
.
cuºítSë
 == 0) ;

791 
globÆ_c⁄f
.
cuºítSë
--;

793 
	`ªadGlobÆSë
();

794 #i‚de‡
NO_FLASH_CHECK


795 if(
Êashsum
 !
globÆ_c⁄f
.flashsum) {

796 
globÆ_c⁄f
.
Êashsum
 = flashsum;

797 
	`wrôeGlobÆSë
(1);

800 
	`ªadEEPROM
();

801 
	`blökLED
(2,40,
globÆ_c⁄f
.
cuºítSë
+1);

803 #ifde‡
MWI_SDCARD


804 
	`öô_SD
();

807 #i‡
GPS


808 
	`ªˇŒGPSc⁄f
();

811 
	`c⁄figuªRe˚ivî
();

812 #i‡
	`deföed
 (
PILOTLAMP
)

813 
PL_INIT
;

815 #i‡
	`deföed
(
OPENLRSv2MULTI
)

816 
	`öôO≥nLRS
();

818 
	`öôSís‹s
();

819 #i‡
GPS


820 
	`GPS_£t_pids
();

822 
¥eviousTime
 = 
	`mi¸os
();

823 #i‡
	`deföed
(
GIMBAL
)

824 
ˇlibøtögA
 = 512;

826 
ˇlibøtögG
 = 512;

827 
ˇlibøtögB
 = 200;

828 #i‡
SONAR


829 
ˇlibøtögS
 = 10;

831 #i‡
	`deföed
(
POWERMETER
)

832 
uöt8_t
 
j
 = 0; j <
PMOTOR_SUM
; j++Ë
pMëî
[j] = 0;

835 #i‡
GPS


836 #i‡
	`deföed
(
GPS_SERIAL
)

837 
	`GPS_SîülInô
();

839 
GPS_c⁄f
.
max_wp_numbî
 = 
	`gëMaxWPNumbî
();

840 #i‡
	`deföed
 (
FIXEDWING
)

841 
f
.
Fixed_Wög_Nav
=1;

845 #i‡
	`deföed
(
LCD_ETPP
Ë|| deföed(
LCD_LCD03
Ë|| deföed(
LCD_LCD03S
Ë|| deföed(
OLED_I2C_128x64
Ë|| deföed(
OLED_DIGOLE
Ë|| deföed(
LCD_TELEMETRY_STEP
)

846 
	`öôLCD
();

848 #ifde‡
LCD_TELEMETRY_DEBUG


849 
ãÀmëry_auto
 = 1;

851 #ifde‡
LCD_CONF_DEBUG


852 
	`c⁄figuøti⁄Lo›
();

854 #ifde‡
TELEMETRY


855 
	`öô_ãÀmëry
();

857 #ifde‡
LANDING_LIGHTS_DDR


858 
	`öô_œndög_lights
();

860 #ifde‡
FASTER_ANALOG_READS


861 
ADCSRA
 |
	`_BV
(
ADPS2
Ë; ADCSRA &~_BV(
ADPS1
); ADCSRA &~_BV(
ADPS0
);

863 #i‡
	`deföed
(
LED_FLASHER
)

864 
	`öô_Àd_Êashî
();

865 
	`Àd_Êashî_£t_£quí˚
(
LED_FLASHER_SEQUENCE
);

867 
f
.
SMALL_ANGLES_25
=1;

868 #ifde‡
LOG_PERMANENT


870 #i‚de‡
LOG_PERMANENT_SD_ONLY


871 
	`ªadPLog
();

873 #ifde‡
MWI_SDCARD


874 
	`ªadPLogFromSD
();

876 
∂og
.
li„time
 +∂og.
¨med_time
 / 1000000;

877 
∂og
.
°¨t
++;

879 #ifde‡
LOG_PERMANENT_SHOW_AT_STARTUP


880 
	`dumpPLog
(0);

882 
∂og
.
¨med_time
 = 0;

885 #ifde‡
DISARM_AT_STARTUP


886 
	`go_dißrm
();

888 #ifde‡
DEBUGMSG


889 
	`debugmsg_≠≥nd_°r
("initialization completed\n");

891 
	}
}

893 
	$go_¨m
() {

894 if(
ˇlibøtögG
 == 0

895 #i‡
	`deföed
(
ONLYARMWHENFLAT
)

896 && 
f
.
ACC_CALIBRATED


898 #i‡
	`deföed
(
FAILSAFE
)

899 && 
Áûß„C¡
 < 2

901 #i‡
GPS
 && 
	`deföed
(
ONLY_ALLOW_ARM_WITH_GPS_3DFIX
)

902 && (
f
.
GPS_FIX
 && 
GPS_numS©
 >= 5)

905 if(!
f
.
ARMED
 && !f.
BARO_MODE
) {

906 
f
.
ARMED
 = 1;

907 #i‡
	`deföed
(
HEADFREE
)

908 
hódFªeModeHﬁd
 = 
©t
.
hódög
;

910 
magHﬁd
 = 
©t
.
hódög
;

911 #i‡
	`deföed
(
VBAT
)

912 i‡(
™Æog
.
vb©
 > 
NO_VBAT
Ë
vb©Mö
 =ánalog.vbat;

914 #ifde‡
ALTITUDE_RESET_ON_ARM


915 #i‡
BARO


916 
ˇlibøtögB
 = 10;

918 #i‡
SONAR


919 
ˇlibøtögS
 = 10;

922 #ifde‡
LCD_TELEMETRY


923 #i‡
BARO


924 
BAROÆtMax
 = 
Æt
.
E°A…
;

926 #i‡
GPS


927 
GPS_•ìdMax
 = 0;

929 #i‡
	`deföed
–
POWERMETER_HARD
 ) && (deföed(
LOG_VALUES
Ë|| deföed(
LCD_TELEMETRY
))

930 
powîVÆueMaxMAH
 = 0;

932 #ifde‡
WATTS


933 
w©tsMax
 = 0;

936 #ifde‡
LOG_PERMANENT


937 
∂og
.
¨m
++;

938 
∂og
.
ru¬ög
 = 1;

940 #i‚de‡
LOG_PERMANENT_SD_ONLY


941 
	`wrôePLog
();

943 #ifde‡
MWI_SDCARD


944 
	`wrôePLogToSD
();

948 } if(!
f
.
ARMED
) {

949 #i‡!
	`deföed
(
FIXEDWING
)

950 
	`blökLED
(2,255,1);

951 
	`SET_ALARM
(
ALRM_FAC_ACC
, 
ALRM_LVL_ON
);

954 
	}
}

955 
	$go_dißrm
() {

956 i‡(
f
.
ARMED
) {

957 
f
.
ARMED
 = 0;

958 #ifde‡
LOG_PERMANENT


959 
∂og
.
dißrm
++;

960 
∂og
.
¨med_time
 = 
¨medTime
 ;

961 i‡(
Áûß„Evíts
Ë
∂og
.
Áûß„
++;

962 i‡(
i2c_îr‹s_cou¡
 > 10Ë
∂og
.
i2c
++;

963 
∂og
.
ru¬ög
 = 0;

965 #i‚de‡
LOG_PERMANENT_SD_ONLY


966 
	`wrôePLog
();

968 #ifde‡
MWI_SDCARD


969 
	`wrôePLogToSD
();

973 
	}
}

975 #i‡
deföed
(
INFLIGHT_PID_TUNING
)

979 
	$go_öÊight_pid_tunög
() {

980 i‡(
f
.
PIDTUNE_MODE
)

983 i‡(
f
.
ARMED
)

989 
uöt16_t
 
pŸauxvÆ
 = 
rcD©a
[
AUX3
];

990 
uöt16_t
 
pid£l
 = 
rcD©a
[
AUX2
];

993 
isö_öÊight_ˇlib
 = 1;

997 i‡(
ﬁd_AUX1_vÆ
 =0Ëﬁd_AUX1_vÆ = 
pŸauxvÆ
;

999 
√w_pid
 = 0;

1000 
√w_i
 = 0;

1001 
aux_pos
 = 0;

1003 i‡(
pŸauxvÆ
 < 
ﬁd_AUX1_vÆ
) {

1004 
√w_i
 = 0;

1008 
√w_i
 = (
pŸauxvÆ
 - 
ﬁd_AUX1_vÆ
);

1016 i‡(
√w_i
 < 0) {

1017 
√w_i
 = 0;

1019 i‡(
√w_i
 > 1000) {

1020 
√w_i
 = 1000;

1026 
aux_pos
 >>= 2;

1027 i‡(
pid£l
 > 
MINCHECK
Ë
aux_pos
 |= 0x20;

1028 i‡(
pid£l
 < 
MAXCHECK
Ë
aux_pos
 |= 0x40;

1030 
√w_pid
 = 
√w_i
;

1032 i‡(
aux_pos
 =
AUX2_LO
)

1034 
√w_pid
 =Çew_pid / 5;

1035 i‡(
√w_pid
 > 200)Çew_pid = 200;

1037 
INFLIGHT_PID_TUNING_TYPE
) {

1039 
c⁄f
.
pid
[
ROLL
].
P8
 = 
√w_pid
 + 1;

1040 
c⁄f
.
pid
[
PITCH
].
P8
 = 
√w_pid
 + 1;

1043 
c⁄f
.
pid
[
PITCH
].
P8
 = 
√w_pid
 + 1;

1046 
c⁄f
.
pid
[
ROLL
].
P8
 = 
√w_pid
 + 1;

1049 
c⁄f
.
pid
[
PIDALT
].
P8
 = 
√w_pid
 + 1;

1053 i‡(
aux_pos
 =
AUX2_CE
)

1055 
√w_pid
 =Çew_pid / 4;

1056 i‡(
√w_pid
 > 250)Çew_pid = 250;

1057 
INFLIGHT_PID_TUNING_TYPE
) {

1059 
c⁄f
.
pid
[
ROLL
].
I8
 = 
√w_pid
 + 1;

1060 
c⁄f
.
pid
[
PITCH
].
I8
 = 
√w_pid
 + 1;

1063 
c⁄f
.
pid
[
PITCH
].
I8
 = 
√w_pid
 + 1;

1066 
c⁄f
.
pid
[
ROLL
].
I8
 = 
√w_pid
 + 1;

1069 
c⁄f
.
pid
[
PIDALT
].
I8
 = 
√w_pid
 + 1;

1073 i‡(
aux_pos
 =
AUX2_HI
)

1075 
√w_pid
 =Çew_pid / 10;

1076 i‡(
√w_pid
 > 100)Çew_pid = 100;

1078 
INFLIGHT_PID_TUNING_TYPE
) {

1080 
c⁄f
.
pid
[
ROLL
].
D8
 = 
√w_pid
 + 1;

1081 
c⁄f
.
pid
[
PITCH
].
D8
 = 
√w_pid
 + 1;

1084 
c⁄f
.
pid
[
PITCH
].
D8
 = 
√w_pid
 + 1;

1087 
c⁄f
.
pid
[
ROLL
].
D8
 = 
√w_pid
 + 1;

1090 
c⁄f
.
pid
[
PIDALT
].
D8
 = 
√w_pid
 + 1;

1093 
c⁄f
.
rﬁlPôchR©e
 = 
√w_pid
 + 1;

1100 i‡(!
f
.
ARMED
 && !f.
PIDTUNE_MODE
) {

1101 i‡(
isö_öÊight_ˇlib
 == 1) {

1102 
isö_öÊight_ˇlib
 = 0;

1103 
ﬁd_AUX1_vÆ
 = 0;

1104 
	`wrôeP¨ams
(1);

1107 
	}
}

1111 
	$lo›
 () {

1112 
uöt8_t
 
rcDñayComm™d
;

1113 
uöt8_t
 
rcSticks
;

1114 
uöt8_t
 
axis
,
i
;

1115 
öt16_t
 
îr‹
,
îr‹AngÀ
;

1116 
öt16_t
 
dñè
;

1117 
öt16_t
 
PTîm
 = 0,
ITîm
 = 0,
DTîm
, 
PTîmACC
, 
ITîmACC
;

1118 
öt16_t
 
œ°Gyro
[2] = {0,0};

1119 
öt16_t
 
îr‹AngÀI
[2] = {0,0};

1120 #i‡
	`deföed
(
LOG_GPS_POSITION
)

1121 
uöt32_t
 
logGpsTime
 = 0;

1123 #i‡
PID_CONTROLLER
 == 1

1124 
öt32_t
 
îr‹GyroI_YAW
;

1125 
öt16_t
 
dñè1
[2],
dñè2
[2];

1126 
öt16_t
 
îr‹GyroI
[2] = {0,0};

1127 #ñi‡
PID_CONTROLLER
 == 2

1128 
öt16_t
 
dñè1
[3],
dñè2
[3];

1129 
öt32_t
 
îr‹GyroI
[3] = {0,0,0};

1130 
öt16_t
 
œ°Eº‹
[3] = {0,0,0};

1131 
öt16_t
 
dñèSum
;

1132 
öt16_t
 
AngÀR©eTmp
, 
R©eEº‹
;

1134 
uöt16_t
 
rcTime
 = 0;

1135 
öt16_t
 
öôülThrŸéeHﬁd
;

1136 
öt16_t
 
rc
;

1137 
öt32_t
 
¥›
 = 0;

1139 #i‡
	`deföed
(
SERIAL_RX
)

1140 i‡(
•ekFømeFœgs
 =0x01Ë
	`ªadSîül_RX
();

1142 #i‡
	`deföed
(
OPENLRSv2MULTI
)

1143 
	`Ród_O≥nLRS_RC
();

1146 #i‡
	`deföed
(
SERIAL_RX
)

1147 i‡((
•ekFømeD⁄e
 =0x01Ë|| ((
öt16_t
)(
cuºítTime
-
rcTime
) >0 )) {

1148 
•ekFømeD⁄e
 = 0x00;

1150 i‡((
öt16_t
)(
cuºítTime
-
rcTime
) >0 ) {

1152 
rcTime
 = 
cuºítTime
 + 20000;

1153 
	`compuãRC
();

1155 #i‡
	`deföed
(
FAILSAFE
)

1156 i‡–
Áûß„C¡
 > (5*
FAILSAFE_DELAY
Ë&& (!
rcO±i⁄s
[
BOXGPSNAV
] && 
FAILSAFE_MISSION
)) {

1157 
f
.
FS_MODE
 = 
åue
;

1159 i‡(
f
.
ARMED
) {

1161 
i
=0; i<3; i++Ë
rcD©a
[i] = 
MIDRC
;

1162 
rcD©a
[
THROTTLE
] = 
c⁄f
.
Áûß„_thrŸée
;

1163 i‡((
Áûß„C¡
 > 5*(
FAILSAFE_DELAY
+
FAILSAFE_OFF_DELAY
)Ë&& !
f
.
FAILSAFE_RTH_ENABLE
) {

1164 
	`go_dißrm
();

1165 
f
.
OK_TO_ARM
 = 0;

1168 
	`go_dißrm
();

1169 
f
.
OK_TO_ARM
 = 0;

1171 #i‡
	`deföed
(
FIXEDWING
)

1172 #i‡
GPS


1173 if(!
f
.
GPS_FIX
 || 
GPS_numS©
 <= 5 ) {

1174 
rcD©a
[
ROLL
]=
MIDRC
-50;

1175 
f
.
FAILSAFE_RTH_ENABLE
 = 0;

1176 
f
.
GPS_BARO_MODE
 = 
Ál£
;

1178 if(
f
.
GPS_mode
 !
GPS_MODE_NONE
Ë
¥v_gps_modes
 = 0xff;

1180 
rcD©a
[
ROLL
]=
MIDRC
-50;

1183 
Áûß„Evíts
++;

1185 #ifde‡
ArdH©


1186 i‡–
Áûß„C¡
 > (5*
FAILSAFE_DELAY
Ë&& !
f
.
ARMED
) {

1187 
	`go_dißrm
();

1188 
f
.
OK_TO_ARM
 = 0;

1192 
f
.
FS_MODE
 = 
Ál£
;

1195 
Áûß„C¡
++;

1201 
uöt8_t
 
°Tmp
 = 0;

1202 
i
=0;i<4;i++) {

1203 
°Tmp
 >>= 2;

1204 if(
rcD©a
[
i
] > 
MINCHECK
Ë
°Tmp
 |= 0x80;

1205 if(
rcD©a
[
i
] < 
MAXCHECK
Ë
°Tmp
 |= 0x40;

1207 if(
°Tmp
 =
rcSticks
) {

1208 if(
rcDñayComm™d
<250)ÑcDelayCommand++;

1209 } 
rcDñayComm™d
 = 0;

1210 
rcSticks
 = 
°Tmp
;

1213 i‡(
rcD©a
[
THROTTLE
] <
MINCHECK
) {

1214 #i‡!
	`deföed
(
FIXEDWING
)

1215 
îr‹GyroI
[
ROLL
] = 0;Éº‹GyroI[
PITCH
] = 0;

1216 #i‡
PID_CONTROLLER
 == 1

1217 
îr‹GyroI_YAW
 = 0;

1218 #ñi‡
PID_CONTROLLER
 == 2

1219 
îr‹GyroI
[
YAW
] = 0;

1221 
îr‹AngÀI
[
ROLL
] = 0;Éº‹AngÀI[
PITCH
] = 0;

1223 i‡(
c⁄f
.
a˘iv©e
[
BOXARM
] > 0) {

1224 i‡–
rcO±i⁄s
[
BOXARM
] && 
f
.
OK_TO_ARM
 ) 
	`go_¨m
(); i‡(f.
ARMED
Ë
	`go_dißrm
();

1227 if(
rcDñayComm™d
 == 20) {

1228 if(
f
.
ARMED
) {

1229 #ifde‡
ALLOW_ARM_DISARM_VIA_TX_YAW


1230 i‡(
c⁄f
.
a˘iv©e
[
BOXARM
] =0 && 
rcSticks
 =
THR_LO
 + 
YAW_LO
 + 
PIT_CE
 + 
ROL_CE
Ë
	`go_dißrm
();

1232 #ifde‡
ALLOW_ARM_DISARM_VIA_TX_ROLL


1233 i‡(
c⁄f
.
a˘iv©e
[
BOXARM
] =0 && 
rcSticks
 =
THR_LO
 + 
YAW_CE
 + 
PIT_CE
 + 
ROL_LO
Ë
	`go_dißrm
();

1236 
i
=0;

1238 #ifde‡
ALLOW_ARM_DISARM_VIA_TX_YAW


1239 i‡(
c⁄f
.
a˘iv©e
[
BOXARM
] =0 && 
rcSticks
 =
THR_LO
 + 
YAW_HI
 + 
PIT_CE
 + 
ROL_CE
Ë
	`go_¨m
();

1241 #ifde‡
ALLOW_ARM_DISARM_VIA_TX_ROLL


1242 i‡(
c⁄f
.
a˘iv©e
[
BOXARM
] =0 && 
rcSticks
 =
THR_LO
 + 
YAW_CE
 + 
PIT_CE
 + 
ROL_HI
Ë
	`go_¨m
();

1247 i‡(
rcSticks
 =
THR_LO
 + 
YAW_LO
 + 
PIT_LO
 + 
ROL_CE
) {

1248 
ˇlibøtögG
=512;

1249 #i‡
GPS


1250 
	`GPS_ª£t_home_posôi⁄
();

1252 #i‡
BARO


1253 
ˇlibøtögB
=10;

1255 #i‡
SONAR


1256 
ˇlibøtögS
 = 10;

1259 #i‡
ACC


1260 i‡(
rcSticks
 =
THR_HI
 + 
YAW_LO
 + 
PIT_LO
 + 
ROL_CE
Ë
ˇlibøtögA
 = 512;

1262 #i‡
MAG


1263 i‡(
rcSticks
 =
THR_HI
 + 
YAW_HI
 + 
PIT_LO
 + 
ROL_CE
Ë
f
.
CALIBRATE_MAG
 = 1;

1265 #i‡
	`deföed
(
INFLIGHT_ACC_CALIBRATION
)

1266 i‡(
rcSticks
 =
THR_LO
 + 
YAW_LO
 + 
PIT_HI
 + 
ROL_HI
) {

1267 i‡(
AccInÊightCÆibøti⁄MósuªmítD⁄e
){

1268 
AccInÊightCÆibøti⁄MósuªmítD⁄e
 = 0;

1269 
AccInÊightCÆibøti⁄SavëoEEProm
 = 1;

1271 
AccInÊightCÆibøti⁄Armed
 = !AccInflightCalibrationArmed;

1272 #i‡
	`deföed
(
BUZZER
)

1273 i‡(
AccInÊightCÆibøti⁄Armed
Ë
	`SET_ALARM_BUZZER
(
ALRM_FAC_TOGGLE
, 
ALRM_LVL_TOGGLE_2
);

1274 
	`SET_ALARM_BUZZER
(
ALRM_FAC_TOGGLE
, 
ALRM_LVL_TOGGLE_ELSE
);

1280 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


1281 i‡(
rcSticks
 =
THR_LO
 + 
YAW_LO
 + 
PIT_CE
 + 
ROL_LO
Ë
i
=1;

1282 i‡(
rcSticks
 =
THR_LO
 + 
YAW_LO
 + 
PIT_HI
 + 
ROL_CE
Ë
i
=2;

1283 i‡(
rcSticks
 =
THR_LO
 + 
YAW_LO
 + 
PIT_CE
 + 
ROL_HI
Ë
i
=3;

1284 if(
i
) {

1285 
globÆ_c⁄f
.
cuºítSë
 = 
i
-1;

1286 
	`wrôeGlobÆSë
(0);

1287 
	`ªadEEPROM
();

1288 
	`blökLED
(2,40,
i
);

1289 
	`SET_ALARM
(
ALRM_FAC_TOGGLE
, 
i
);

1293 i‡(
rcSticks
 =
THR_LO
 + 
YAW_HI
 + 
PIT_HI
 + 
ROL_CE
) {

1294 #i‡
	`deföed
(
LCD_CONF
)

1295 
	`c⁄figuøti⁄Lo›
();

1297 
¥eviousTime
 = 
	`mi¸os
();

1299 #ifde‡
ALLOW_ARM_DISARM_VIA_TX_YAW


1300 i‡(
c⁄f
.
a˘iv©e
[
BOXARM
] =0 && 
rcSticks
 =
THR_LO
 + 
YAW_HI
 + 
PIT_CE
 + 
ROL_CE
Ë
	`go_¨m
();

1302 #ifde‡
ALLOW_ARM_DISARM_VIA_TX_ROLL


1303 i‡(
c⁄f
.
a˘iv©e
[
BOXARM
] =0 && 
rcSticks
 =
THR_LO
 + 
YAW_CE
 + 
PIT_CE
 + 
ROL_HI
Ë
	`go_¨m
();

1305 #ifde‡
LCD_TELEMETRY_AUTO


1306 i‡(
rcSticks
 =
THR_LO
 + 
YAW_CE
 + 
PIT_HI
 + 
ROL_LO
) {

1307 i‡(
ãÀmëry_auto
) {

1308 
ãÀmëry_auto
 = 0;

1309 
ãÀmëry
 = 0;

1311 
ãÀmëry_auto
 = 1;

1314 #ifde‡
LCD_TELEMETRY_STEP


1315 i‡(
rcSticks
 =
THR_LO
 + 
YAW_CE
 + 
PIT_HI
 + 
ROL_HI
) {

1316 
ãÀmëry
 = 
ãÀmërySãpSequí˚
[++
ãÀmërySãpIndex
 % 
	`°æí
(telemetryStepSequence)];

1317 #i‡
	`deföed
–
OLED_I2C_128x64
)

1318 i‡(
ãÀmëry
 !0Ë
	`i2c_OLED_öô
();

1319 #ñi‡
	`deföed
(
OLED_DIGOLE
)

1320 i‡(
ãÀmëry
 !0Ë
	`i2c_OLED_DIGOLE_öô
();

1322 
	`LCD˛ór
();

1328 #i‡
ACC


1329 i‡(
rcSticks
 =
THR_HI
 + 
YAW_LO
 + 
PIT_LO
 + 
ROL_CE
Ë
ˇlibøtögA
=512;

1331 #i‡
MAG


1332 i‡(
rcSticks
 =
THR_HI
 + 
YAW_HI
 + 
PIT_LO
 + 
ROL_CE
Ë
f
.
CALIBRATE_MAG
 = 1;

1334 
i
=0;

1335 i‡(
rcSticks
 =
THR_HI
 + 
YAW_CE
 + 
PIT_HI
 + 
ROL_CE
Ë{
c⁄f
.
™gÀTrim
[
PITCH
]+=2; 
i
=1;}

1336 i‡(
rcSticks
 =
THR_HI
 + 
YAW_CE
 + 
PIT_LO
 + 
ROL_CE
Ë{
c⁄f
.
™gÀTrim
[
PITCH
]-=2; 
i
=1;}

1337 i‡(
rcSticks
 =
THR_HI
 + 
YAW_CE
 + 
PIT_CE
 + 
ROL_HI
Ë{
c⁄f
.
™gÀTrim
[
ROLL
] +=2; 
i
=1;}

1338 i‡(
rcSticks
 =
THR_HI
 + 
YAW_CE
 + 
PIT_CE
 + 
ROL_LO
Ë{
c⁄f
.
™gÀTrim
[
ROLL
] -=2; 
i
=1;}

1349 
uöt8_t
 
PID_INC
 = 1;

1353 i‡(
rcSticks
 =
THR_CE
 + 
YAW_LO
 + 
PIT_HI
 + 
ROL_LO
)

1355 
c⁄f
.
pid
[
ROLL
].
P8
 +
PID_INC
;

1356 
	`blökLED
(2, 40, 1);

1357 
i
 = 1;

1359 i‡(
rcSticks
 =
THR_CE
 + 
YAW_LO
 + 
PIT_LO
 + 
ROL_LO
)

1361 
c⁄f
.
pid
[
ROLL
].
P8
 -
PID_INC
;

1362 
	`blökLED
(2, 40, 1);

1363 
i
 = 1;

1366 i‡(
rcSticks
 =
THR_CE
 + 
YAW_LO
 + 
PIT_HI
 + 
ROL_CE
)

1368 
c⁄f
.
pid
[
ROLL
].
I8
 +
PID_INC
;

1369 
	`blökLED
(2, 40, 1);

1370 
i
 = 1;

1372 i‡(
rcSticks
 =
THR_CE
 + 
YAW_LO
 + 
PIT_LO
 + 
ROL_CE
)

1374 
c⁄f
.
pid
[
ROLL
].
I8
 -
PID_INC
;

1375 
	`blökLED
(2, 40, 1);

1376 
i
 = 1;

1379 i‡(
rcSticks
 =
THR_CE
 + 
YAW_LO
 + 
PIT_HI
 + 
ROL_HI
)

1381 
c⁄f
.
pid
[
ROLL
].
D8
 +
PID_INC
;

1382 
	`blökLED
(2, 40, 1);

1383 
i
 = 1;

1385 i‡(
rcSticks
 =
THR_CE
 + 
YAW_LO
 + 
PIT_LO
 + 
ROL_HI
)

1387 
c⁄f
.
pid
[
ROLL
].
D8
 -
PID_INC
;

1388 
	`blökLED
(2, 40, 1);

1389 
i
 = 1;

1394 i‡(
rcSticks
 =
THR_CE
 + 
YAW_HI
 + 
PIT_HI
 + 
ROL_LO
)

1396 
c⁄f
.
pid
[
PITCH
].
P8
 +
PID_INC
;

1397 
	`blökLED
(2, 40, 1);

1398 
i
 = 1;

1400 i‡(
rcSticks
 =
THR_CE
 + 
YAW_HI
 + 
PIT_LO
 + 
ROL_LO
)

1402 
c⁄f
.
pid
[
PITCH
].
P8
 -
PID_INC
;

1403 
	`blökLED
(2, 40, 1);

1404 
i
 = 1;

1407 i‡(
rcSticks
 =
THR_CE
 + 
YAW_HI
 + 
PIT_HI
 + 
ROL_CE
)

1409 
c⁄f
.
pid
[
PITCH
].
I8
 +
PID_INC
;

1410 
	`blökLED
(2, 40, 1);

1411 
i
 = 1;

1413 i‡(
rcSticks
 =
THR_CE
 + 
YAW_HI
 + 
PIT_LO
 + 
ROL_CE
)

1415 
c⁄f
.
pid
[
PITCH
].
I8
 -
PID_INC
;

1416 
	`blökLED
(2, 40, 1);

1417 
i
 = 1;

1420 i‡(
rcSticks
 =
THR_CE
 + 
YAW_HI
 + 
PIT_HI
 + 
ROL_HI
)

1422 
c⁄f
.
pid
[
PITCH
].
D8
 +
PID_INC
;

1423 
	`blökLED
(2, 40, 1);

1424 
i
 = 1;

1426 i‡(
rcSticks
 =
THR_CE
 + 
YAW_HI
 + 
PIT_LO
 + 
ROL_HI
)

1428 
c⁄f
.
pid
[
PITCH
].
D8
 -
PID_INC
;

1429 
	`blökLED
(2, 40, 1);

1430 
i
 = 1;

1435 i‡(
i
) {

1436 
	`wrôeP¨ams
(1);

1437 
rcDñayComm™d
 = 0;

1438 #i‡
	`deföed
(
LED_RING
)

1439 
	`blökLedRög
();

1446 #i‡
	`deföed
(
LED_FLASHER
)

1447 
	`Àd_Êashî_auto£À˘_£quí˚
();

1450 #i‡
	`deföed
(
INFLIGHT_ACC_CALIBRATION
)

1451 i‡(
AccInÊightCÆibøti⁄Armed
 && 
f
.
ARMED
 && 
rcD©a
[
THROTTLE
] > 
MINCHECK
 && !
rcO±i⁄s
[
BOXARM
]) {

1452 
InÊightˇlibøtögA
 = 50;

1453 
AccInÊightCÆibøti⁄Armed
 = 0;

1455 i‡(
rcO±i⁄s
[
BOXCALIB
]) {

1456 i‡(!
AccInÊightCÆibøti⁄A˘ive
 && !
AccInÊightCÆibøti⁄MósuªmítD⁄e
) {

1457 
InÊightˇlibøtögA
 = 50;

1460 i‡(
AccInÊightCÆibøti⁄MósuªmítD⁄e
 && !
f
.
ARMED
) {

1461 
AccInÊightCÆibøti⁄MósuªmítD⁄e
 = 0;

1462 
AccInÊightCÆibøti⁄SavëoEEProm
 = 1;

1466 #i‡
	`deföed
(
EXTENDED_AUX_STATES
)

1467 
uöt32_t
 
auxSèã
 = 0;

1468 
i
=0;i<4;i++)

1469 
auxSèã
 |=

1470 (
uöt32_t
)(
rcD©a
[
AUX1
+
i
]<1230)<<(6*i) |

1471 (
uöt32_t
)(1231<
rcD©a
[
AUX1
+
i
] &&ÑcData[AUX1+i]<1360)<<(6*i+1) |

1472 (
uöt32_t
)(1361<
rcD©a
[
AUX1
+
i
] &&ÑcData[AUX1+i]<1490)<<(6*i+2) |

1473 (
uöt32_t
)(1491<
rcD©a
[
AUX1
+
i
] &&ÑcData[AUX1+i]<1620)<<(6*i+3) |

1474 (
uöt32_t
)(1621<
rcD©a
[
AUX1
+
i
] &&ÑcData[AUX1+i]<1749)<<(6*i+4) |

1475 (
uöt32_t
)(
rcD©a
[
AUX1
+
i
]>1750)<<(6*i+5);

1477 
uöt16_t
 
auxSèã
 = 0;

1478 
i
=0;i<4;i++)

1479 
auxSèã
 |(
rcD©a
[
AUX1
+
i
]<1300)<<(3*i) | (1300<rcData[AUX1+i] &&ÑcData[AUX1+i]<1700)<<(3*i+1) | (rcData[AUX1+i]>1700)<<(3*i+2);

1482 
i
=0;i<
CHECKBOXITEMS
;i++)

1483 
rcO±i⁄s
[
i
] = (
auxSèã
 & 
c⁄f
.
a˘iv©e
[i])>0;

1486 #i‡
ACC


1487 #ifde‡
ArdH©


1488 i‡–
rcO±i⁄s
[
BOXANGLE
] || (
Áûß„C¡
 > 5*
FAILSAFE_DELAY
) ) {

1490 i‡–
rcO±i⁄s
[
BOXANGLE
] || 
f
.
FS_MODE
 ) {

1494 i‡(!
f
.
ANGLE_MODE
) {

1495 
îr‹AngÀI
[
ROLL
] = 0;Éº‹AngÀI[
PITCH
] = 0;

1496 
f
.
ANGLE_MODE
 = 1;

1498 #i‡
FAILSAFE_RTH


1499 i‡(
f
.
FS_MODE
 && f.
GPS_FIX
 && !f.
FAILSAFE_RTH_ENABLE
 )

1501 
f
.
FAILSAFE_RTH_ENABLE
 = 1;

1502 
rcO±i⁄s
[
BOXANGLE
]=
åue
;

1503 if(
f
.
GPS_FIX
 && 
GPS_numS©
 >5 && f.
GPS_FIX_HOME
){

1504 
rcO±i⁄s
[
BOXGPSHOME
]=
åue
;

1505 
	`öô_RTH
();

1511 if(
f
.
ANGLE_MODE
){

1512 
îr‹GyroI
[
ROLL
] = 0;Éº‹GyroI[
PITCH
] = 0;

1514 
f
.
ANGLE_MODE
 = 0;

1515 
f
.
FAILSAFE_RTH_ENABLE
 = 0;

1517 i‡–
rcO±i⁄s
[
BOXHORIZON
] ) {

1518 
f
.
ANGLE_MODE
 = 0;

1519 i‡(!
f
.
HORIZON_MODE
) {

1520 
îr‹AngÀI
[
ROLL
] = 0;Éº‹AngÀI[
PITCH
] = 0;

1521 
f
.
HORIZON_MODE
 = 1;

1524 if(
f
.
HORIZON_MODE
){

1525 
îr‹GyroI
[
ROLL
] = 0;îr‹GyroI[
PITCH
] = 0;

1527 
f
.
HORIZON_MODE
 = 0;

1531 #i‡
	`deföed
(
INFLIGHT_PID_TUNING
)

1532 i‡(
rcO±i⁄s
[
BOXPIDTUNE
]) {

1533 
f
.
PIDTUNE_MODE
 = 1;

1536 
f
.
PIDTUNE_MODE
 = 0;

1540 #i‡
SONAR


1541 i‡(
rcO±i⁄s
[
BOXSONAR
]) {

1542 i‡(
f
.
SONAR_MODE
 == 0) {

1543 
f
.
SONAR_MODE
 = 1;

1545 
A…Hﬁd
 = 
Æt
.
E°A…
;

1547 #i‡
	`deföed
(
ALT_HOLD_THROTTLE_MIDPOINT
)

1548 
öôülThrŸéeHﬁd
 = 
ALT_HOLD_THROTTLE_MIDPOINT
;

1550 
öôülThrŸéeHﬁd
 = 
rcComm™d
[
THROTTLE
];

1553 
îr‹A…ôudeI
 = 0;

1554 
B¨oPID
 = 0;

1555 
f
.
THROTTLE_IGNORED
 = 0;

1559 
f
.
SONAR_MODE
 = 0;

1562 i‡(
rcO±i⁄s
[
BOXARM
] =0Ë
f
.
OK_TO_ARM
 = 1;

1563 #i‡!
	`deföed
(
GPS_LED_INDICATOR
)

1564 i‡(
f
.
ANGLE_MODE
 || f.
HORIZON_MODE
Ë{
STABLEPIN_ON
;} {
STABLEPIN_OFF
;}

1567 #i‡
BARO


1568 #i‡(!
	`deföed
(
SUPPRESS_BARO_ALTHOLD
))

1569 #i‡
GPS


1570 i‡(
GPS_c⁄f
.
èkeovî_b¨o
Ë
rcO±i⁄s
[
BOXBARO
] = (rcO±i⁄s[BOXBARO] || 
f
.
GPS_BARO_MODE
);

1572 i‡(
rcO±i⁄s
[
BOXBARO
]) {

1573 i‡(!
f
.
BARO_MODE
) {

1574 
f
.
BARO_MODE
 = 1;

1575 
A…Hﬁd
 = 
Æt
.
E°A…
;

1576 #i‡
	`deföed
(
ALT_HOLD_THROTTLE_MIDPOINT
)

1577 
öôülThrŸéeHﬁd
 = 
ALT_HOLD_THROTTLE_MIDPOINT
;

1579 
öôülThrŸéeHﬁd
 = 
rcComm™d
[
THROTTLE
];

1581 
îr‹A…ôudeI
 = 0;

1582 
B¨oPID
=0;

1583 
f
.
THROTTLE_IGNORED
 = 0;

1586 
f
.
BARO_MODE
 = 0;

1589 #ifde‡
VARIOMETER


1590 i‡(
rcO±i⁄s
[
BOXVARIO
]) {

1591 i‡(!
f
.
VARIO_MODE
) {

1592 
f
.
VARIO_MODE
 = 1;

1595 
f
.
VARIO_MODE
 = 0;

1599 i‡(
rcO±i⁄s
[
BOXMAG
]) {

1600 i‡(!
f
.
MAG_MODE
) {

1601 
f
.
MAG_MODE
 = 1;

1602 
magHﬁd
 = 
©t
.
hódög
;

1605 
f
.
MAG_MODE
 = 0;

1607 #i‡
	`deföed
(
HEADFREE
)

1608 i‡(
rcO±i⁄s
[
BOXHEADFREE
]) {

1609 i‡(!
f
.
HEADFREE_MODE
) {

1610 
f
.
HEADFREE_MODE
 = 1;

1612 #i‡
	`deföed
(
ADVANCED_HEADFREE
)

1613 i‡((
f
.
GPS_FIX
 && 
GPS_numS©
 >5Ë&& (
GPS_di°™˚ToHome
 > 
ADV_HEADFREE_RANGE
) ) {

1614 i‡(
GPS_dúe˘i⁄ToHome
 < 180Ë{
hódFªeModeHﬁd
 = GPS_directionToHome + 180;} {headFreeModeHold = GPS_directionToHome - 180;}

1618 
f
.
HEADFREE_MODE
 = 0;

1620 i‡(
rcO±i⁄s
[
BOXHEADADJ
]) {

1621 
hódFªeModeHﬁd
 = 
©t
.
hódög
;

1625 #i‡
GPS


1629 #i‡
	`deföed
(
FIXEDWING
)

1630 
f
.
CRUISE_MODE
 = 
rcO±i⁄s
[
BOXCRUISE
];

1631 if(
f
.
CRUISE_MODE
Ë
rcO±i⁄s
[
BOXGPSHOLD
]=
åue
;

1635 
uöt8_t
 
gps_modes_check
 = (
rcO±i⁄s
[
BOXLAND
]<< 3Ë+ (rcO±i⁄s[
BOXGPSHOME
]<< 2Ë+ (rcO±i⁄s[
BOXGPSHOLD
]<<1Ë+ (rcO±i⁄s[
BOXGPSNAV
]);

1637 i‡(
f
.
ARMED
 || f.
Fixed_Wög_Nav
) {

1639 i‡(
f
.
GPS_FIX
) {

1640 i‡(
GPS_numS©
 >5 ) {

1641 #i‡
	`deföed
(
AP_MODE
)

1642 i‡(
f
.
GPS_mode
 =
GPS_MODE_HOLD
 && (
	`abs
(
rcComm™d
[
ROLL
]Ë> 
AP_MODE
 ||ábs‘cComm™d[
PITCH
]) > AP_MODE))

1643 
	`GPS_£t_√xt_wp
(&
GPS_co‹d
[
LAT
], &GPS_co‹d[
LON
],&GPS_coord[LAT], & GPS_coord[LON]);

1645 if(
f
.
Fixed_Wög_Nav
 && (f.
GPS_mode
 !
GPS_MODE_NONE
 &&(!f.
HORIZON_MODE
 && !f.
ANGLE_MODE
))Ëf.ANGLE_MODE = 
åue
;

1646 i‡(
¥v_gps_modes
 !
gps_modes_check
) {

1647 
NAV_îr‹
 = 
NAV_ERROR_NONE
;

1648 i‡(
rcO±i⁄s
[
BOXGPSHOME
] || 
f
.
FAILSAFE_RTH_ENABLE
 ) {

1649 
	`öô_RTH
();

1650 } i‡(
rcO±i⁄s
[
BOXGPSHOLD
]) {

1651 i‡(
f
.
GPS_mode
 =
GPS_MODE_NAV
)

1652 
NAV_∑u£d_©
 = 
missi⁄_°ï
.
numbî
;

1653 
f
.
GPS_mode
 = 
GPS_MODE_HOLD
;

1654 
f
.
GPS_BARO_MODE
 = 
Ál£
;

1655 
	`GPS_£t_√xt_wp
(&
GPS_co‹d
[
LAT
], &GPS_co‹d[
LON
],&GPS_coord[LAT], & GPS_coord[LON]);

1656 
	`£t_√w_Ætôude
(
Æt
.
E°A…
);

1657 
NAV_°©e
 = 
NAV_STATE_HOLD_INFINIT
;

1658 
GPS_hﬁd
[
ALT
] = 
GPS_Ætôude
;

1659 
f
.
CLIMBOUT_FW
 = 0 ;

1661 #i‚de‡
SLIM_WING


1662 i‡(
rcO±i⁄s
[
BOXLAND
]) {

1663 
f
.
GPS_mode
 = 
GPS_MODE_HOLD
;

1664 
f
.
GPS_BARO_MODE
 = 
åue
;

1665 
	`GPS_£t_√xt_wp
(&
GPS_co‹d
[
LAT
], &GPS_co‹d[
LON
],&GPS_coord[LAT], & GPS_coord[LON]);

1666 
	`£t_√w_Ætôude
(
Æt
.
E°A…
);

1667 
NAV_°©e
 = 
NAV_STATE_LAND_START
;

1670 i‡(
rcO±i⁄s
[
BOXGPSNAV
]) {

1671 
f
.
GPS_mode
 = 
GPS_MODE_NAV
;

1672 
f
.
GPS_BARO_MODE
 = 
åue
;

1673 
GPS_¥ev
[
LAT
] = 
GPS_co‹d
[LAT];

1674 
GPS_¥ev
[
LON
] = 
GPS_co‹d
[LON];

1675 i‡(
NAV_∑u£d_©
 != 0) {

1676 
√xt_°ï
 = 
NAV_∑u£d_©
;

1677 
NAV_∑u£d_©
 = 0;

1679 
√xt_°ï
 = 1;

1680 
jump_times
 = -10;

1682 
NAV_°©e
 = 
NAV_STATE_PROCESS_NEXT
;

1684 
f
.
GPS_mode
 = 
GPS_MODE_NONE
;

1685 
f
.
GPS_BARO_MODE
 = 
Ál£
;

1686 
f
.
THROTTLE_IGNORED
 = 
Ál£
;

1687 
f
.
LAND_IN_PROGRESS
 = 0;

1688 
f
.
THROTTLE_IGNORED
 = 0;

1689 
NAV_°©e
 = 
NAV_STATE_NONE
;

1690 
	`GPS_ª£t_«v
();

1691 
f
.
CLIMBOUT_FW
 = 0 ;

1693 
¥v_gps_modes
 = 
gps_modes_check
;

1697 i‡(
f
.
GPS_mode
 =
GPS_MODE_NAV
) {

1698 
NAV_∑u£d_©
 = 
missi⁄_°ï
.
numbî
;

1699 
f
.
GPS_mode
 = 
GPS_MODE_NONE
;

1700 
	`£t_√w_Ætôude
(
Æt
.
E°A…
);

1701 
NAV_°©e
 = 
NAV_STATE_NONE
;

1702 
NAV_îr‹
 = 
NAV_ERROR_SPOILED_GPS
;

1703 
¥v_gps_modes
 = 0xff;

1705 i‡(
f
.
GPS_mode
 =
GPS_MODE_HOLD
 || f.GPS_modê=
GPS_MODE_RTH
) {

1706 
f
.
GPS_mode
 = 
GPS_MODE_NONE
;

1707 
NAV_°©e
 = 
NAV_STATE_NONE
;

1708 
NAV_îr‹
 = 
NAV_ERROR_SPOILED_GPS
;

1709 
f
.
GPS_BARO_MODE
 = 
Ál£
;

1710 
¥v_gps_modes
 = 0xff;

1712 
«v
[0] = 0;Çav[1] = 0;

1716 
f
.
GPS_mode
 = 
GPS_MODE_NONE
;

1717 
NAV_°©e
 = 
NAV_STATE_NONE
;

1718 
NAV_∑u£d_©
 = 0;

1719 
NAV_îr‹
 = 
NAV_ERROR_GPS_FIX_LOST
;

1720 
	`GPS_ª£t_«v
();

1721 
¥v_gps_modes
 = 0xff;

1725 
f
.
GPS_mode
 = 
GPS_MODE_NONE
;

1726 
f
.
GPS_BARO_MODE
 = 
Ál£
;

1727 
f
.
THROTTLE_IGNORED
 = 
Ál£
;

1728 
NAV_°©e
 = 
NAV_STATE_NONE
;

1729 
NAV_∑u£d_©
 = 0;

1730 
NAV_îr‹
 = 
NAV_ERROR_DISARMED
;

1731 
	`GPS_ª£t_«v
();

1736 #i‡
	`deföed
(
INFLIGHT_PID_TUNING
)

1738 
	`go_öÊight_pid_tunög
();

1740 #i‡
	`deföed
(
FIXEDWING
Ë|| deföed(
HELICOPTER
)

1741 i‡(
rcO±i⁄s
[
BOXPASSTHRU
] && !
f
.
FS_MODE
Ë{f.
PASSTHRU_MODE
 = 1;}

1742 {
f
.
PASSTHRU_MODE
 = 0;}

1746 
uöt8_t
 
èskOrdî
=0;

1747 
èskOrdî
) {

1749 
èskOrdî
++;

1750 #i‡
MAG


1751 i‡(
	`Mag_gëADC
() != 0) ;

1754 
èskOrdî
++;

1755 #i‡
BARO


1756 i‡(
	`B¨o_upd©e
() != 0) ;

1759 
èskOrdî
++;

1760 #i‡
BARO


1761 i‡(
	`gëE°im©edA…ôude
() != 0) ;

1764 
èskOrdî
++;

1765 #i‡
GPS


1766 if(
	`mûlis
(Ë- 
GPS_FAIL_timî
 > 2000Ë
f
.
GPS_FIX
 =0;

1767 i‡(
	`GPS_Compuã
() != 0) ;

1768 #i‡
	`deföed
(
I2C_GPS
)

1769 i‡(
	`GPS_NewD©a
() != 0) ;

1773 
èskOrdî
=0;

1774 #i‡
SONAR


1775 
	`S⁄¨_upd©e
();

1777 #ifde‡
LANDING_LIGHTS_DDR


1778 
	`auto_swôch_œndög_lights
();

1780 #ifde‡
VARIOMETER


1781 i‡(
f
.
VARIO_MODE
Ë
	`v¨io_sig«lög
();

1788 
cuºítTime
 = 
	`mi¸os
();

1789 
cy˛eTime
 = 
cuºítTime
 - 
¥eviousTime
;

1790 #i‡
	`deföed
(
LOOP_TIME
)

1791 i‡(
cy˛eTime
 >
LOOP_TIME
) ;

1796 
¥eviousTime
 = 
cuºítTime
;

1798 #i‡
	`deföed
(
LOG_GPS_POSITION
)

1799 i‡(
cuºítTime
 > 
logGpsTime
 && 
f
.
ARMED
 =1 && f.
GPS_FIX
 == 1) {

1800 
logGpsTime
 = 
cuºítTime
 + (
LOG_GPS_POSITION
 * 1000000);

1801 
	`wrôeGPSLog
(

1802 #ifde‡
UBLOX


1803 
GPS_time
,

1805 
GPS_co‹d
[
LAT
], GPS_co‹d[
LON
],

1806 #i‡
BARO


1807 
Æt
.
E°A…


1815 
	`compuãIMU
();

1820 #i‡
	`deföed
(
ACROTRAINER_MODE
)

1821 if(
f
.
ANGLE_MODE
){

1822 i‡(
	`abs
(
rcComm™d
[
ROLL
]Ë+ábs‘cComm™d[
PITCH
]Ë>
ACROTRAINER_MODE
 ) {

1823 
f
.
ANGLE_MODE
=0;

1824 
f
.
HORIZON_MODE
=0;

1825 
f
.
MAG_MODE
=0;

1826 
f
.
BARO_MODE
=0;

1827 
f
.
GPS_mode
 = 
GPS_MODE_NONE
;

1834 #i‡
GPS


1835 i‡(
GPS_c⁄f
.
ign‹e_thrŸée
 == 1) {

1836 i‡(
f
.
GPS_mode
 =
GPS_MODE_NAV
 || f.GPS_modê=
GPS_MODE_RTH
) {

1840 
f
.
THROTTLE_IGNORED
 = 1;

1842 
f
.
THROTTLE_IGNORED
 = 0;

1848 i‡(
	`abs
(
rcComm™d
[
YAW
]Ë<70 && 
f
.
MAG_MODE
) {

1849 
öt16_t
 
dif
 = 
©t
.
hódög
 - 
magHﬁd
;

1850 i‡(
dif
 <= - 180) dif += 360;

1851 i‡(
dif
 >= + 180) dif -= 360;

1852 #i‡!
	`deföed
(
FIXEDWING
)

1853 i‡(
f
.
SMALL_ANGLES_25
 || (f.
GPS_mode
 !0)Ë
rcComm™d
[
YAW
] -
dif
*
c⁄f
.
pid
[
PIDMAG
].
P8
 >> 5;

1855 } 
magHﬁd
 = 
©t
.
hódög
;

1857 #i‡(
BARO
 || 
SONAR
Ë&& (!
	`deföed
(
SUPPRESS_BARO_ALTHOLD
))

1861 #i‡
SONAR


1862 i‡(
f
.
BARO_MODE
 || f.
SONAR_MODE
) {

1864 i‡(
f
.
BARO_MODE
) {

1866 
uöt8_t
 
isA…HﬁdCh™ged
 = 0;

1867 
öt16_t
 
A…HﬁdC‹r
 = 0;

1869 #i‡
GPS


1870 i‡(
f
.
LAND_IN_PROGRESS
) {

1871 
A…HﬁdC‹r
 -
GPS_c⁄f
.
œnd_•ìd
;

1872 if(
	`abs
(
A…HﬁdC‹r
) > 512) {

1873 
A…Hﬁd
 +
A…HﬁdC‹r
/512;

1874 
A…HﬁdC‹r
 %= 512;

1879 i‡–(
	`abs
(
rcComm™d
[
THROTTLE
]-
öôülThrŸéeHﬁd
)>
ALT_HOLD_THROTTLE_NEUTRAL_ZONE
Ë&& !
f
.
THROTTLE_IGNORED
) {

1881 
A…HﬁdC‹r
+
rcComm™d
[
THROTTLE
] - 
öôülThrŸéeHﬁd
;

1882 if(
	`abs
(
A…HﬁdC‹r
) > 512) {

1883 
A…Hﬁd
 +
A…HﬁdC‹r
/512;

1884 
A…HﬁdC‹r
 %= 512;

1886 
isA…HﬁdCh™ged
 = 1;

1887 } i‡(
isA…HﬁdCh™ged
) {

1888 
A…Hﬁd
 = 
Æt
.
E°A…
;

1889 
isA…HﬁdCh™ged
 = 0;

1891 i‡((
	`abs
(
rcComm™d
[
THROTTLE
] - 
öôülThrŸéeHﬁd
Ë< 
ALT_HOLD_THROTTLE_NEUTRAL_ZONE
Ë&& !
f
.
THROTTLE_IGNORED
){

1892 
B¨oPID
 = 0;

1894 #i‡!
	`deföed
(
FIXEDWING
)

1895 
rcComm™d
[
THROTTLE
] = 
öôülThrŸéeHﬁd
 + 
B¨oPID
;

1905 #i‡
	`deföed
(
THROTTLE_ANGLE_CORRECTION
)

1906 if(
f
.
ANGLE_MODE
 || f.
HORIZON_MODE
) {

1907 
rcComm™d
[
THROTTLE
]+
thrŸéeAngÀC‹ª˘i⁄
;

1911 #i‡
GPS


1913 i‡(–
f
.
GPS_mode
 !
GPS_MODE_NONE
 ) && f.
GPS_FIX_HOME
 ) {

1914 
sö_yaw_y
 = 
	`sö
(
©t
.
hódög
*0.0174532925f);

1915 
cos_yaw_x
 = 
	`cos
(
©t
.
hódög
*0.0174532925f);

1916 #i‡!
	`deföed
(
FIXEDWING
)

1917 
GPS_™gÀ
[
ROLL
] = (
«v
[
LON
]*
cos_yaw_x
 -Çav[
LAT
]*
sö_yaw_y
) /10;

1918 
GPS_™gÀ
[
PITCH
] = (
«v
[
LON
]*
sö_yaw_y
 +Çav[
LAT
]*
cos_yaw_x
) /10;

1923 
	`FW_NAV
();

1928 
GPS_™gÀ
[
ROLL
] = 0;

1929 
GPS_™gÀ
[
PITCH
] = 0;

1930 
GPS_™gÀ
[
YAW
] = 0;

1934 #i‡
	`deföed
(
GPS_SIMULATOR
)

1935 
	`SîülWrôe
(2,0xa5);

1936 
	`SîülWrôe16
(2,
«v
[
LAT
]+
rcComm™d
[
PITCH
]);

1937 
	`SîülWrôe16
(2,
«v
[
LON
]+
rcComm™d
[
ROLL
]);

1938 
	`SîülWrôe16
(2,(
«v
[
LAT
]+
rcComm™d
[
PITCH
])-“av[
LON
]+rcComm™d[
ROLL
]));

1944 #i‡
PID_CONTROLLER
 == 1

1945 i‡–
f
.
HORIZON_MODE
 ) 
¥›
 = 
	`mö
(
	`max
(
	`abs
(
rcComm™d
[
PITCH
]),abs‘cComm™d[
ROLL
])),512);

1948 
axis
=0;axis<2;axis++) {

1949 
rc
 = 
rcComm™d
[
axis
]<<1;

1950 
îr‹
 = 
rc
 - 
imu
.
gyroD©a
[
axis
];

1951 
îr‹GyroI
[
axis
] = 
	`c⁄°øö
”º‹GyroI[axis]+
îr‹
,-16000,+16000);

1952 i‡(
	`abs
(
imu
.
gyroD©a
[
axis
])>640Ë
îr‹GyroI
[axis] = 0;

1954 
ITîm
 = (
îr‹GyroI
[
axis
]>>7)*
c⁄f
.
pid
[axis].
I8
>>6;

1956 
PTîm
 = 
	`mul
(
rc
,
c⁄f
.
pid
[
axis
].
P8
)>>6;

1958 i‡(
f
.
ANGLE_MODE
 || f.
HORIZON_MODE
) {

1960 
îr‹AngÀ
 = 
	`c⁄°øö
(
rc
 + 
GPS_™gÀ
[
axis
],-500,+500Ë- 
©t
.
™gÀ
[axis] + 
c⁄f
.
™gÀTrim
[axis];

1961 
îr‹AngÀI
[
axis
] = 
	`c⁄°øö
”º‹AngÀI[axis]+
îr‹AngÀ
,-10000,+10000);

1963 
PTîmACC
 = 
	`mul
(
îr‹AngÀ
,
c⁄f
.
pid
[
PIDLEVEL
].
P8
)>>7;

1965 
öt16_t
 
limô
 = 
c⁄f
.
pid
[
PIDLEVEL
].
D8
*5;

1966 
PTîmACC
 = 
	`c⁄°øö
(PTîmACC,-
limô
,+limit);

1968 
ITîmACC
 = 
	`mul
(
îr‹AngÀI
[
axis
],
c⁄f
.
pid
[
PIDLEVEL
].
I8
)>>12;

1970 
ITîm
 = 
ITîmACC
 + ((ITîm-ITîmACC)*
¥›
>>9);

1971 
PTîm
 = 
PTîmACC
 + ((PTîm-PTîmACC)*
¥›
>>9);

1974 
PTîm
 -
	`mul
(
imu
.
gyroD©a
[
axis
],
dynP8
[axis])>>6;

1976 
dñè
 = 
imu
.
gyroD©a
[
axis
] - 
œ°Gyro
[axis];

1977 
œ°Gyro
[
axis
] = 
imu
.
gyroD©a
[axis];

1978 
DTîm
 = 
dñè1
[
axis
]+
dñè2
[axis]+
dñè
;

1979 
dñè2
[
axis
] = 
dñè1
[axis];

1980 
dñè1
[
axis
] = 
dñè
;

1982 
DTîm
 = 
	`mul
(DTîm,
dynD8
[
axis
])>>5;

1984 
axisPID
[
axis
] = 
PTîm
 + 
ITîm
 - 
DTîm
;

1988 
	#GYRO_P_MAX
 300

	)

1989 
	#GYRO_I_MAX
 250

	)

1991 
rc
 = 
	`mul
(
rcComm™d
[
YAW
] , (2*
c⁄f
.
yawR©e
 + 30)) >> 5;

1993 
îr‹
 = 
rc
 - 
imu
.
gyroD©a
[
YAW
];

1994 
îr‹GyroI_YAW
 +
	`mul
(
îr‹
,
c⁄f
.
pid
[
YAW
].
I8
);

1995 
îr‹GyroI_YAW
 = 
	`c⁄°øö
”º‹GyroI_YAW, 2-((
öt32_t
)1<<28), -2+((int32_t)1<<28));

1996 i‡(
	`abs
(
rc
Ë> 50Ë
îr‹GyroI_YAW
 = 0;

1998 
PTîm
 = 
	`mul
(
îr‹
,
c⁄f
.
pid
[
YAW
].
P8
)>>6;

1999 #i‚de‡
COPTER_WITH_SERVO


2000 
öt16_t
 
limô
 = 
GYRO_P_MAX
-
c⁄f
.
pid
[
YAW
].
D8
;

2001 
PTîm
 = 
	`c⁄°øö
(PTîm,-
limô
,+limit);

2004 
ITîm
 = 
	`c⁄°øö
((
öt16_t
)(
îr‹GyroI_YAW
>>13),-
GYRO_I_MAX
,+GYRO_I_MAX);

2006 
axisPID
[
YAW
] = 
PTîm
 + 
ITîm
;

2008 #ñi‡
PID_CONTROLLER
 == 2

2009 
	#GYRO_I_MAX
 256

	)

2010 
	#ACC_I_MAX
 256

	)

2011 
¥›
 = 
	`mö
(
	`max
(
	`abs
(
rcComm™d
[
PITCH
]),abs‘cComm™d[
ROLL
])),500);

2014 
axis
=0;axis<3;axis++) {

2016 i‡((
f
.
ANGLE_MODE
 || f.
HORIZON_MODE
Ë&& 
axis
<2 ) {

2018 
îr‹AngÀ
 = 
	`c⁄°øö
((
rcComm™d
[
axis
]<<1Ë+ 
GPS_™gÀ
[axis],-500,+500Ë- 
©t
.
™gÀ
[axis] + 
c⁄f
.
™gÀTrim
[axis];

2020 i‡(
axis
 == 2) {

2021 
AngÀR©eTmp
 = (((
öt32_t
Ë(
c⁄f
.
yawR©e
 + 27Ë* 
rcComm™d
[2]) >> 5);

2023 i‡(!
f
.
ANGLE_MODE
) {

2024 
AngÀR©eTmp
 = ((
öt32_t
Ë(
c⁄f
.
rﬁlPôchR©e
 + 27Ë* 
rcComm™d
[
axis
]) >> 4;

2025 i‡(
f
.
HORIZON_MODE
) {

2027 
AngÀR©eTmp
 +((
öt32_t
Ë
îr‹AngÀ
 * 
c⁄f
.
pid
[
PIDLEVEL
].
I8
)>>8;

2030 
AngÀR©eTmp
 = ((
öt32_t
Ë
îr‹AngÀ
 * 
c⁄f
.
pid
[
PIDLEVEL
].
P8
)>>4;

2038 
R©eEº‹
 = 
AngÀR©eTmp
 - 
imu
.
gyroD©a
[
axis
];

2041 
PTîm
 = ((
öt32_t
Ë
R©eEº‹
 * 
c⁄f
.
pid
[
axis
].
P8
)>>7;

2048 
îr‹GyroI
[
axis
] +(((
öt32_t
Ë
R©eEº‹
 * 
cy˛eTime
)>>11Ë* 
c⁄f
.
pid
[axis].
I8
;

2051 
îr‹GyroI
[
axis
] = 
	`c⁄°øö
”º‹GyroI[axis], (
öt32_t
Ë-
GYRO_I_MAX
<<13, (int32_t) +GYRO_I_MAX<<13);

2052 
ITîm
 = 
îr‹GyroI
[
axis
]>>13;

2055 
dñè
 = 
R©eEº‹
 - 
œ°Eº‹
[
axis
];

2056 
œ°Eº‹
[
axis
] = 
R©eEº‹
;

2060 
dñè
 = ((
öt32_t
Ëdñè * ((
uöt16_t
)0xFFFF / (
cy˛eTime
>>4)))>>6;

2062 
dñèSum
 = 
dñè1
[
axis
]+
dñè2
[axis]+
dñè
;

2063 
dñè2
[
axis
] = 
dñè1
[axis];

2064 
dñè1
[
axis
] = 
dñè
;

2068 
DTîm
 = ((
öt32_t
)
dñèSum
*
c⁄f
.
pid
[
axis
].
D8
)>>8;

2070 
axisPID
[
axis
] = 
PTîm
 + 
ITîm
 + 
DTîm
;

2075 
	`mixTabÀ
();

2077 #i‡
	`deföed
(
DISABLE_SERVOS_WHEN_UNARMED
)

2078 i‡(
f
.
ARMED
Ë
	`wrôeSîvos
();

2080 i‡–(
f
.
ARMED
Ë|| ((!
ˇlibøtögG
Ë&& (!
ˇlibøtögA
)ËË
	`wrôeSîvos
();

2082 
	`wrôeMŸ‹s
();

2083 
	}
}

	@MultiWii.h

1 #i‚de‡
MULTIWII_H_


2 
	#MULTIWII_H_


	)

4 
	#VERSION
 240

	)

5 
	#NAVI_VERSION
 7

6 
	~"ty≥s.h
"

	)

7 
	~"Aœrms.h
"

9 
	#MINCHECK
 1100

10 
	#MAXCHECK
 1900

11 

	)

12 vﬁ©ûê
timî0_ovîÊow_cou¡
;

14 c⁄° 
pid«mes
[];

15 c⁄° 
box«mes
[];

16 c⁄° 
uöt8_t
 
boxids
[];

18 
uöt32_t
 
cuºítTime
;

19 
uöt16_t
 
¥eviousTime
;

20 
uöt16_t
 
cy˛eTime
;

21 
uöt16_t
 
ˇlibøtögA
;

22 
uöt16_t
 
ˇlibøtögB
;

23 
uöt16_t
 
ˇlibøtögG
;

24 #i‡
SONAR


25 
uöt16_t
 
ˇlibøtögS
;

27 
öt16_t
 
magHﬁd
,
hódFªeModeHﬁd
;

28 
uöt8_t
 
vb©Mö
;

29 
uöt8_t
 
rcO±i⁄s
[
CHECKBOXITEMS
];

30 
öt32_t
 
A…Hﬁd
;

31 
öt16_t
 
s⁄¨A…
;

32 
öt16_t
 
B¨oPID
;

33 
öt16_t
 
îr‹A…ôudeI
;

35 
öt16_t
 
i2c_îr‹s_cou¡
;

36 
uöt8_t
 
Æ¨mAºay
[
ALRM_FAC_SIZE
];

37 
globÆ_c⁄f_t
 
globÆ_c⁄f
;

39 
imu_t
 
imu
;

40 
™Æog_t
 
™Æog
;

41 
Æt_t
 
Æt
;

42 
©t_t
 
©t
;

43 #ifde‡
LOG_PERMANENT


44 
∂og_t
 
∂og
;

47 
öt16_t
 
debug
[4];

49 
c⁄f_t
 
c⁄f
;

50 
öt16_t
 
™√x650_ovîrun_cou¡
;

51 
Êags_°ru˘_t
 
f
;

52 
uöt16_t
 
ötPowîTriggî1
;

54 
öt16_t
 
gyroZîo
[3];

55 
öt16_t
 
™gÀ
[2];

58 #i‡
BARO


59 
öt32_t
 
b¨oPªssuª
;

60 
öt16_t
 
b¨oTem≥øtuª
;

61 
öt32_t
 
b¨oPªssuªSum
;

64 #i‡
deföed
(
AIRSPEED
)

65 
aúPªssuªRaw
;

66 
aúPªssuªOff£t
;

67 
uöt16_t
 
aú•ìdS≥ed
;

70 
öt16_t
 
axisPID
[3];

71 
öt16_t
 
mŸ‹
[8];

72 
öt16_t
 
mŸ‹_dißrmed
[8];

73 
öt16_t
 
£rvo
[8];

75 
öt16_t
 
Áûß„Evíts
;

76 vﬁ©ûê
öt16_t
 
Áûß„C¡
;

78 
öt16_t
 
rcD©a
[
RC_CHANS
];

79 
öt8_t
 
su¥ess_d©a_‰om_rx
;

80 
öt16_t
 
rcSîül
[8];

81 
öt16_t
 
rcComm™d
[4];

82 
uöt8_t
 
rcSîülCou¡
;

83 
öt16_t
 
lookupPôchRﬁlRC
[5];

84 
uöt16_t
 
lookupThrŸéeRC
[11];

86 #i‡
deföed
(
POWERMETER
Ë|| ( deföed(
LOG_VALUES
) && (LOG_VALUES >= 3) )

87 
	#PMOTOR_SUM
 8

88 
uöt32_t
 
pMëî
[
PMOTOR_SUM
 + 1];

89 
uöt8_t
 
pMëîV
;

90 
uöt32_t
 
pAœrm
;

91 
uöt16_t
 
powîVÆue
;

93 

	)

94 #i‡
deföed
(
LCD_TELEMETRY
)

95 
uöt8_t
 
ãÀmëry
;

96 
uöt8_t
 
ãÀmëry_auto
;

98 #ifde‡
LCD_TELEMETRY_STEP


99 
ãÀmërySãpSequí˚
[];

100 
uöt8_t
 
ãÀmërySãpIndex
;

103 #i‡
deföed
(
LOG_VALUES
Ë|| deföed(
LCD_TELEMETRY
)

104 
uöt16_t
 
cy˛eTimeMax
;

105 
uöt16_t
 
cy˛eTimeMö
;

106 
öt32_t
 
BAROÆtMax
;

107 
uöt16_t
 
GPS_•ìdMax
;

108 
uöt16_t
 
powîVÆueMaxMAH
;

109 
uöt16_t
 
w©tsMax
;

111 #i‡
deföed
(
LOG_VALUES
Ë|| deföed(
LCD_TELEMETRY
Ë|| deföed(
ARMEDTIMEWARNING
Ë|| deföed(
LOG_PERMANENT
)

112 
uöt32_t
 
¨medTime
;

115 #i‡
GPS


118 
gps_c⁄f_°ru˘
 
GPS_c⁄f
;

120 
öt16_t
 
GPS_™gÀ
[3];

121 
öt32_t
 
GPS_co‹d
[2];

122 
öt32_t
 
GPS_home
[3];

123 
öt32_t
 
GPS_hﬁd
[3];

124 
öt32_t
 
GPS_¥ev
[2];

125 
öt32_t
 
GPS_poi
[2];

126 
öt32_t
 
GPS_dúe˘i⁄ToPoi
;

127 
uöt8_t
 
GPS_numS©
;

128 
uöt16_t
 
GPS_di°™˚ToHome
;

129 
öt16_t
 
GPS_dúe˘i⁄ToHome
;

130 
uöt16_t
 
GPS_Ætôude
;

131 
uöt16_t
 
GPS_•ìd
;

132 
uöt8_t
 
GPS_upd©e
;

133 
uöt16_t
 
GPS_ground_cour£
;

134 
uöt32_t
 
GPS_time
;

135 
uöt32_t
 
GPS_FAIL_timî
;

137 
uöt8_t
 
GPS_mode
;

140 
öt16_t
 
GPS_FwT¨gë
;

141 
öt16_t
 
GPS_A…Eº
;

142 
öt16_t
 
NAV_Thro
;

144 
uöt8_t
 
NAV_îr‹
;

145 
uöt8_t
 
NAV_°©e
;

146 
uöt8_t
 
GPS_ßved_missi⁄_°©e
;

147 
uöt8_t
 
¥v_gps_modes
;

148 
uöt32_t
 
«v_timî_°›
;

149 
uöt16_t
 
«v_hﬁd_time
;

150 
uöt8_t
 
NAV_∑u£d_©
;

151 
uöt8_t
 
√xt_°ï
;

154 
	#ASCENDING
 1

	)

155 
	#DESCENDING
 -1

	)

156 
	#REACHED_ALT
 0

	)

159 
öt32_t
 
‹igöÆ_Ætôude
;

161 
öt32_t
 
èrgë_Ætôude
;

163 
öt32_t
 
Æt_to_hﬁd
;

165 
uöt32_t
 
Æt_ch™ge_timî
;

166 
öt8_t
 
Æt_ch™ge_Êag
;

167 
uöt32_t
 
Æt_ch™ge
;

168 
öt16_t
 
jump_times
;

169 
uöt8_t
 
œnd_dëe˘
;

175 
missi⁄_°ï_°ru˘
 
missi⁄_°ï
;

178 
	#MISSION_WAYPOINT
 1

179 
	#MISSION_HOLD_UNLIM
 2

180 
	#MISSION_HOLD_TIME
 3

181 
	#MISSION_RTH
 4

182 
	#MISSION_SET_POI
 5

183 
	#MISSION_JUMP
 6

184 
	#MISSION_SET_HEADING
 7

185 
	#MISSION_LAND
 8

186 

	)

188 
	#MISSION_FLAG_END
 0xA5

189 
	#MISSION_FLAG_CRC_ERROR
 0xFE

190 
	#MISSION_FLAG_HOME
 0x01

191 
	#MISSION_FLAG_HOLD
 0x02

192 
	#MISSION_FLAG_DO_LAND
 0x20

193 
	#MISSION_FLAG_NAV_IN_PROG
 0xff

194 

	)

195 
	#LAT
 0

	)

196 
	#LON
 1

	)

197 
	#ALT
 2

	)

199 
öt16_t
 
«v
[2];

205 
	#POSHOLD_P
 .15

	)

206 
	#POSHOLD_I
 0.0

	)

207 
	#POSHOLD_IMAX
 20

208 

	)

209 
	#POSHOLD_RATE_P
 3.4

	)

210 
	#POSHOLD_RATE_I
 0.14

211 
	#POSHOLD_RATE_D
 0.053

212 
	#POSHOLD_RATE_IMAX
 20

213 

	)

215 
	#NAV_P
 2.5

	)

216 
	#NAV_I
 0.33

217 
	#NAV_D
 0.083

218 
	#NAV_IMAX
 20

219 

	)

223 vﬁ©ûê
uöt8_t
 
•ekFømeFœgs
;

224 vﬁ©ûê
uöt32_t
 
•ekTimeLa°
;

225 
uöt8_t
 
•ekFømeD⁄e
;

227 #i‡
deföed
(
OPENLRSv2MULTI
)

228 
uöt8_t
 
pŸ_P
,
pŸ_I
;

234 #i‡
deföed
(
INFLIGHT_ACC_CALIBRATION
)

235 
uöt16_t
 
InÊightˇlibøtögA
;

236 
öt16_t
 
AccInÊightCÆibøti⁄Armed
;

237 
uöt16_t
 
AccInÊightCÆibøti⁄MósuªmítD⁄e
;

238 
uöt16_t
 
AccInÊightCÆibøti⁄SavëoEEProm
;

239 
uöt16_t
 
AccInÊightCÆibøti⁄A˘ive
;

242 #i‡
deföed
(
ARMEDTIMEWARNING
)

243 
uöt32_t
 
ArmedTimeW¨nögMi¸oSec⁄ds
;

246 #i‡
deföed
(
THROTTLE_ANGLE_CORRECTION
)

247 
öt16_t
 
thrŸéeAngÀC‹ª˘i⁄
;

248 
öt8_t
 
cosZ
;

251 
™√xCode
();

252 
go_dißrm
();

	@Output.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"ty≥s.h
"

5 
	~"Mu…iWii.h
"

6 
	~"Aœrms.h
"

8 
öôülizeSo·PWM
();

10 #i‡
deföed
(
SERVO
)

11 
öôülizeSîvo
();

19 #i‡
deföed
(
PROMINI
)

20 
uöt8_t
 
	gPWM_PIN
[8] = {9,10,11,3,6,5,
A2
,12};

22 #i‡
deföed
(
PROMICRO
)

23 #i‡!
deföed
(
HWPWM6
)

24 #i‡
deföed
(
TEENSY20
)

25 
uöt8_t
 
	gPWM_PIN
[8] = {14,15,9,12,22,18,16,17};

26 #ñi‡
deföed
(
A32U4_4_HW_PWM_SERVOS
)

27 
uöt8_t
 
	gPWM_PIN
[8] = {6,9,10,11,5,13,
SW_PWM_P3
,
SW_PWM_P4
};

29 
uöt8_t
 
	gPWM_PIN
[8] = {9,10,5,6,4,
A2
,
SW_PWM_P3
,
SW_PWM_P4
};

32 #i‡
deföed
(
TEENSY20
)

33 
uöt8_t
 
	gPWM_PIN
[8] = {14,15,9,12,4,10,16,17};

34 #ñi‡
deföed
(
A32U4_4_HW_PWM_SERVOS
)

35 
uöt8_t
 
	gPWM_PIN
[8] = {6,9,10,11,5,13,
SW_PWM_P3
,
SW_PWM_P4
};

37 
uöt8_t
 
	gPWM_PIN
[8] = {9,10,5,6,11,13,
SW_PWM_P3
,
SW_PWM_P4
};

41 #i‡
deföed
(
MEGA
)

42 
uöt8_t
 
	gPWM_PIN
[8] = {3,5,6,2,7,8,9,10};

48 #i‡
deföed
(
PROMINI
Ë|| (deföed(
PROMICRO
Ë&& deföed(
HWPWM6
)Ë|| (deföed(
MEGA
Ë&& deföed(
MEGA_HW_PWM_SERVOS
))

49 #i‡(
NUMBER_MOTOR
 > 4)

51 vﬁ©ûê
uöt8_t
 
	g©omicPWM_PIN5_lowSèã
;

52 vﬁ©ûê
uöt8_t
 
	g©omicPWM_PIN5_highSèã
;

53 vﬁ©ûê
uöt8_t
 
	g©omicPWM_PIN6_lowSèã
;

54 vﬁ©ûê
uöt8_t
 
	g©omicPWM_PIN6_highSèã
;

56 #i‡(
NUMBER_MOTOR
 > 6)

58 vﬁ©ûê
uöt8_t
 
	g©omicPWM_PINA2_lowSèã
;

59 vﬁ©ûê
uöt8_t
 
	g©omicPWM_PINA2_highSèã
;

60 vﬁ©ûê
uöt8_t
 
	g©omicPWM_PIN12_lowSèã
;

61 vﬁ©ûê
uöt8_t
 
	g©omicPWM_PIN12_highSèã
;

64 #i‡(
NUMBER_MOTOR
 > 4)

66 vﬁ©ûê
uöt16_t
 
	g©omicPWM_PIN5_lowSèã
;

67 vﬁ©ûê
uöt16_t
 
	g©omicPWM_PIN5_highSèã
;

68 vﬁ©ûê
uöt16_t
 
	g©omicPWM_PIN6_lowSèã
;

69 vﬁ©ûê
uöt16_t
 
	g©omicPWM_PIN6_highSèã
;

71 #i‡(
NUMBER_MOTOR
 > 6)

73 vﬁ©ûê
uöt16_t
 
	g©omicPWM_PINA2_lowSèã
;

74 vﬁ©ûê
uöt16_t
 
	g©omicPWM_PINA2_highSèã
;

75 vﬁ©ûê
uöt16_t
 
	g©omicPWM_PIN12_lowSèã
;

76 vﬁ©ûê
uöt16_t
 
	g©omicPWM_PIN12_highSèã
;

80 #i‡
deföed
(
SERVO
)

81 #i‡
deföed
(
HW_PWM_SERVOS
)

83 #ñi‡
deföed
(
PROMINI
Ë|| (deföed(
PROMICRO
Ë&& deföed(
HWPWM6
))

84 #i‡
deföed
(
AIRPLANE
Ë|| deföed(
HELICOPTER
)

86 vﬁ©ûê
uöt8_t
 
	g©omicSîvo
[8] = {125,125,125,125,125,125,125,5};

88 vﬁ©ûê
uöt8_t
 
	g©omicSîvo
[8] = {125,125,125,125,125,125,125,125};

91 #i‡
deföed
(
AIRPLANE
)|| deföed(
HELICOPTER
)

93 vﬁ©ûê
uöt16_t
 
	g©omicSîvo
[8] = {8000,8000,8000,8000,8000,8000,8000,320};

95 vﬁ©ûê
uöt16_t
 
	g©omicSîvo
[8] = {8000,8000,8000,8000,8000,8000,8000,8000};

103 #i‡
deföed
(
SERVO
)

104 #i‡
deföed
(
PRI_SERVO_FROM
Ë&& deföed(
SEC_SERVO_FROM
)

105 #i‡
PRI_SERVO_FROM
 < 
SEC_SERVO_FROM


106 
	#SERVO_START
 
PRI_SERVO_FROM


	)

108 
	#SERVO_START
 
SEC_SERVO_FROM


	)

111 #i‡
deföed
(
PRI_SERVO_FROM
)

112 
	#SERVO_START
 
PRI_SERVO_FROM


	)

114 #i‡
deföed
(
SEC_SERVO_FROM
)

115 
	#SERVO_START
 
SEC_SERVO_FROM


	)

118 #i‡
deföed
(
PRI_SERVO_TO
Ë&& deföed(
SEC_SERVO_TO
)

119 #i‡
PRI_SERVO_TO
 > 
SEC_SERVO_TO


120 
	#SERVO_END
 
PRI_SERVO_TO


	)

122 
	#SERVO_END
 
SEC_SERVO_TO


	)

125 #i‡
deföed
(
PRI_SERVO_TO
)

126 
	#SERVO_END
 
PRI_SERVO_TO


	)

128 #i‡
deföed
(
SEC_SERVO_TO
)

129 
	#SERVO_END
 
SEC_SERVO_TO


	)

139 
	$wrôeSîvos
() {

140 #i‡
	`deföed
(
SERVO
)

141 #i‡
	`deföed
(
PRI_SERVO_FROM
Ë&& !deföed(
HW_PWM_SERVOS
)

142 
uöt8_t
 
i
 = (
PRI_SERVO_FROM
-1); i < 
PRI_SERVO_TO
; i++){

143 #i‡
	`deföed
(
PROMINI
Ë|| (deföed(
PROMICRO
Ë&& deföed(
HWPWM6
)Ë|| (deföed(
MEGA
Ë&& deföed(
MEGA_HW_PWM_SERVOS
))

144 
©omicSîvo
[
i
] = (
£rvo
[i]-1000)>>2;

146 
©omicSîvo
[
i
] = (
£rvo
[i]-1000)<<4;

150 #i‡
	`deföed
(
SEC_SERVO_FROM
Ë&& !deföed(
HW_PWM_SERVOS
)

151 #i‡(
	`deföed
(
SERVO_TILT
)|| deföed(
SERVO_MIX_TILT
)Ë&& deföed(
MMSERVOGIMBAL
)

153 
öt16_t
 
medüMobûeSîvoGimbÆADC
[3][
MMSERVOGIMBALVECTORLENGHT
];

154 
öt32_t
 
medüMobûeSîvoGimbÆADCSum
[3];

155 
uöt8_t
 
medüMobûeSîvoGimbÆIDX
;

156 
uöt8_t
 
axis
;

158 
medüMobûeSîvoGimbÆIDX
 = ++medüMobûeSîvoGimbÆIDX % 
MMSERVOGIMBALVECTORLENGHT
;

159 
axis
=(
SEC_SERVO_FROM
-1);áxi†< 
SEC_SERVO_TO
;áxis++) {

160 
medüMobûeSîvoGimbÆADCSum
[
axis
] -
medüMobûeSîvoGimbÆADC
[axis][
medüMobûeSîvoGimbÆIDX
];

161 
medüMobûeSîvoGimbÆADC
[
axis
][
medüMobûeSîvoGimbÆIDX
] = 
£rvo
[axis];

162 
medüMobûeSîvoGimbÆADCSum
[
axis
] +
medüMobûeSîvoGimbÆADC
[axis][
medüMobûeSîvoGimbÆIDX
];

163 #i‡
	`deföed
(
PROMINI
Ë|| (deföed(
PROMICRO
Ë&& deföed(
HWPWM6
))

164 
©omicSîvo
[
axis
] = (
medüMobûeSîvoGimbÆADCSum
[axis] / 
MMSERVOGIMBALVECTORLENGHT
 - 1000)>>2;

166 
©omicSîvo
[
axis
] = (
medüMobûeSîvoGimbÆADCSum
[axis] / 
MMSERVOGIMBALVECTORLENGHT
 - 1000)<<4;

170 
uöt8_t
 
i
 = (
SEC_SERVO_FROM
-1); i < 
SEC_SERVO_TO
; i++){

171 #i‡
	`deföed
(
PROMINI
Ë|| (deföed(
PROMICRO
Ë&& deföed(
HWPWM6
)Ë|| (deföed(
MEGA
Ë&& deföed(
MEGA_HW_PWM_SERVOS
))

172 
©omicSîvo
[
i
] = (
£rvo
[i]-1000)>>2;

174 
©omicSîvo
[
i
] = (
£rvo
[i]-1000)<<4;

180 #i‡
	`deföed
(
MEGA
Ë&& deföed(
MEGA_HW_PWM_SERVOS
)

181 #i‡(
PRI_SERVO_FROM
 =1 || 
SEC_SERVO_FROM
 == 1)

182 
OCR5C
 = 
£rvo
[0];

184 #i‡(
PRI_SERVO_FROM
 <2 && 
PRI_SERVO_TO
 >2Ë|| (
SEC_SERVO_FROM
 <2 && 
SEC_SERVO_TO
 >= 2)

185 
OCR5B
 = 
£rvo
[1];

187 #i‡(
PRI_SERVO_FROM
 <3 && 
PRI_SERVO_TO
 >3Ë|| (
SEC_SERVO_FROM
 <3 && 
SEC_SERVO_TO
 >= 3)

188 
OCR5A
 = 
£rvo
[2];

190 #i‡(
PRI_SERVO_FROM
 <4 && 
PRI_SERVO_TO
 >4Ë|| (
SEC_SERVO_FROM
 <4 && 
SEC_SERVO_TO
 >= 4)

191 
OCR1A
 = 
£rvo
[3];

193 #i‡(
PRI_SERVO_FROM
 <5 && 
PRI_SERVO_TO
 >5Ë|| (
SEC_SERVO_FROM
 <5 && 
SEC_SERVO_TO
 >= 5)

194 
OCR1B
 = 
£rvo
[4];

196 #i‡(
PRI_SERVO_FROM
 <6 && 
PRI_SERVO_TO
 >6Ë|| (
SEC_SERVO_FROM
 <6 && 
SEC_SERVO_TO
 >= 6)

197 
OCR4A
 = 
£rvo
[5];

199 #i‡(
PRI_SERVO_FROM
 <7 && 
PRI_SERVO_TO
 >7Ë|| (
SEC_SERVO_FROM
 <7 && 
SEC_SERVO_TO
 >= 7)

200 
OCR4B
 = 
£rvo
[6];

202 #i‡(
PRI_SERVO_FROM
 <8 && 
PRI_SERVO_TO
 >8Ë|| (
SEC_SERVO_FROM
 <8 && 
SEC_SERVO_TO
 >= 8)

203 
OCR4C
 = 
£rvo
[7];

207 #i‡
	`deföed
(
PROMICRO
Ë&& deföed(
A32U4_4_HW_PWM_SERVOS
)

208 #i‡(
PRI_SERVO_FROM
 <7 && 
PRI_SERVO_TO
 >= 7)

209 
OCR1A
 = 
£rvo
[6];

211 #i‡(
PRI_SERVO_FROM
 <5 && 
PRI_SERVO_TO
 >= 5)

212 
OCR1B
 = 
£rvo
[4];

214 #i‡(
PRI_SERVO_FROM
 <6 && 
PRI_SERVO_TO
 >= 6)

215 
OCR3A
 = 
£rvo
[5];

217 #i‡(
PRI_SERVO_FROM
 <4 && 
PRI_SERVO_TO
 >= 4)

218 
OCR1C
 = 
£rvo
[3];

222 
	}
}

227 
	$wrôeMŸ‹s
() {

229 #i‡
	`deföed
(
MEGA
)

230 #i‡(
NUMBER_MOTOR
 > 0)

231 #i‚de‡
EXT_MOTOR_RANGE


232 
OCR3C
 = 
mŸ‹
[0]<<3;

234 
OCR3C
 = ((
mŸ‹
[0]<<4) - 16000);

237 #i‡(
NUMBER_MOTOR
 > 1)

238 #i‚de‡
EXT_MOTOR_RANGE


239 
OCR3A
 = 
mŸ‹
[1]<<3;

241 
OCR3A
 = ((
mŸ‹
[1]<<4) - 16000);

244 #i‡(
NUMBER_MOTOR
 > 2)

245 #i‚de‡
EXT_MOTOR_RANGE


246 
OCR4A
 = 
mŸ‹
[2]<<3;

248 
OCR4A
 = ((
mŸ‹
[2]<<4) - 16000);

251 #i‡(
NUMBER_MOTOR
 > 3)

252 #i‚de‡
EXT_MOTOR_RANGE


253 
OCR3B
 = 
mŸ‹
[3]<<3;

255 
OCR3B
 = ((
mŸ‹
[3]<<4) - 16000);

258 #i‡(
NUMBER_MOTOR
 > 4)

259 #i‚de‡
EXT_MOTOR_RANGE


260 
OCR4B
 = 
mŸ‹
[4]<<3;

261 
OCR4C
 = 
mŸ‹
[5]<<3;

263 
OCR4B
 = ((
mŸ‹
[4]<<4) - 16000);

264 
OCR4C
 = ((
mŸ‹
[5]<<4) - 16000);

267 #i‡(
NUMBER_MOTOR
 > 6)

268 #i‚de‡
EXT_MOTOR_RANGE


269 
OCR2B
 = 
mŸ‹
[6]>>3;

270 
OCR2A
 = 
mŸ‹
[7]>>3;

272 
OCR2B
 = (
mŸ‹
[6]>>2) - 250;

273 
OCR2A
 = (
mŸ‹
[7]>>2) - 250;

279 #i‡
	`deföed
(
PROMICRO
)

280 
uöt16_t
 
Temp2
;

281 
Temp2
 = 
mŸ‹
[3] - 1000;

282 #i‡(
NUMBER_MOTOR
 > 0)

283 #i‡
	`deföed
(
A32U4_4_HW_PWM_SERVOS
)

286 #i‚de‡
EXT_MOTOR_RANGE


287 
TC4H
 = 
mŸ‹
[0]>>8; 
OCR4D
 = (motor[0]&0xFF);

289 
TC4H
 = (((
mŸ‹
[0]-1000)<<1)+16)>>8; 
OCR4D
 = ((((motor[0]-1000)<<1)+16)&0xFF);

293 #ifde‡
EXT_MOTOR_RANGE


294 
OCR1A
 = ((
mŸ‹
[0]<<4) - 16000) + 128;

295 #ñi‡
	`deföed
(
EXT_MOTOR_64KHZ
)

296 
OCR1A
 = (
mŸ‹
[0] - 1000) >> 2;

297 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

298 
OCR1A
 = (
mŸ‹
[0] - 1000) >> 1;

299 #ñi‡
	`deföed
(
EXT_MOTOR_16KHZ
)

300 
OCR1A
 = 
mŸ‹
[0] - 1000;

301 #ñi‡
	`deföed
(
EXT_MOTOR_8KHZ
)

302 
OCR1A
 = (
mŸ‹
[0]-1000) << 1;

304 
OCR1A
 = 
mŸ‹
[0]<<3;

308 #i‡(
NUMBER_MOTOR
 > 1)

309 #ifde‡
EXT_MOTOR_RANGE


310 
OCR1B
 = ((
mŸ‹
[1]<<4) - 16000) + 128;

311 #ñi‡
	`deföed
(
EXT_MOTOR_64KHZ
)

312 
OCR1B
 = (
mŸ‹
[1] - 1000) >> 2;

313 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

314 
OCR1B
 = (
mŸ‹
[1] - 1000) >> 1;

315 #ñi‡
	`deföed
(
EXT_MOTOR_16KHZ
)

316 
OCR1B
 = 
mŸ‹
[1] - 1000;

317 #ñi‡
	`deföed
(
EXT_MOTOR_8KHZ
)

318 
OCR1B
 = (
mŸ‹
[1]-1000) << 1;

320 
OCR1B
 = 
mŸ‹
[1]<<3;

323 #i‡(
NUMBER_MOTOR
 > 2)

324 #i‡!
	`deföed
(
HWPWM6
)

326 #i‚de‡
EXT_MOTOR_RANGE


327 
TC4H
 = (2047-
mŸ‹
[2])>>8; 
OCR4A
 = ((2047-motor[2])&0xFF);

329 
TC4H
 = 2047-(((
mŸ‹
[2]-1000)<<1)+16)>>8; 
OCR4A
 = (2047-(((motor[2]-1000)<<1)+16)&0xFF);

332 #ifde‡
EXT_MOTOR_RANGE


333 
OCR3A
 = ((
mŸ‹
[2]<<4) - 16000) + 128;

334 #ñi‡
	`deföed
(
EXT_MOTOR_64KHZ
)

335 
OCR3A
 = (
mŸ‹
[2] - 1000) >> 2;

336 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

337 
OCR3A
 = (
mŸ‹
[2] - 1000) >> 1;

338 #ñi‡
	`deföed
(
EXT_MOTOR_16KHZ
)

339 
OCR3A
 = 
mŸ‹
[2] - 1000;

340 #ñi‡
	`deföed
(
EXT_MOTOR_8KHZ
)

341 
OCR3A
 = (
mŸ‹
[2]-1000) << 1;

343 
OCR3A
 = 
mŸ‹
[2]<<3;

347 #i‡(
NUMBER_MOTOR
 > 3)

348 #ifde‡
EXT_MOTOR_RANGE


349 
TC4H
 = (((
mŸ‹
[3]-1000)<<1)+16)>>8; 
OCR4D
 = ((((motor[3]-1000)<<1)+16)&0xFF);

350 #ñi‡
	`deföed
(
EXT_MOTOR_64KHZ
)

351 
Temp2
 = Temp2 >> 2;

352 
TC4H
 = 
Temp2
 >> 8;

353 
OCR4D
 = 
Temp2
 & 0xFF;

354 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

355 
Temp2
 = Temp2 >> 1;

356 
TC4H
 = 
Temp2
 >> 8;

357 
OCR4D
 = 
Temp2
 & 0xFF;

358 #ñi‡
	`deföed
(
EXT_MOTOR_16KHZ
)

359 
TC4H
 = 
Temp2
 >> 8;

360 
OCR4D
 = 
Temp2
 & 0xFF;

361 #ñi‡
	`deföed
(
EXT_MOTOR_8KHZ
)

362 
TC4H
 = 
Temp2
 >> 8;

363 
OCR4D
 = 
Temp2
 & 0xFF;

365 
TC4H
 = 
mŸ‹
[3]>>8; 
OCR4D
 = (motor[3]&0xFF);

368 #i‡(
NUMBER_MOTOR
 > 4)

369 #i‡!
	`deföed
(
HWPWM6
)

370 #i‡(
NUMBER_MOTOR
 =6Ë&& !
	`deföed
(
SERVO
)

371 
©omicPWM_PIN5_highSèã
 = 
mŸ‹
[4]<<3;

372 
©omicPWM_PIN5_lowSèã
 = 16383-
©omicPWM_PIN5_highSèã
;

373 
©omicPWM_PIN6_highSèã
 = 
mŸ‹
[5]<<3;

374 
©omicPWM_PIN6_lowSèã
 = 16383-
©omicPWM_PIN6_highSèã
;

376 
©omicPWM_PIN5_highSèã
 = ((
mŸ‹
[4]-1000)<<4)+320;

377 
©omicPWM_PIN5_lowSèã
 = 15743-
©omicPWM_PIN5_highSèã
;

378 
©omicPWM_PIN6_highSèã
 = ((
mŸ‹
[5]-1000)<<4)+320;

379 
©omicPWM_PIN6_lowSèã
 = 15743-
©omicPWM_PIN6_highSèã
;

382 #i‚de‡
EXT_MOTOR_RANGE


383 
OCR1C
 = 
mŸ‹
[4]<<3;

384 
TC4H
 = 
mŸ‹
[5]>>8; 
OCR4A
 = (motor[5]&0xFF);

386 
OCR1C
 = ((
mŸ‹
[4]<<4) - 16000) + 128;

387 
TC4H
 = (((
mŸ‹
[5]-1000)<<1)+16)>>8; 
OCR4A
 = ((((motor[5]-1000)<<1)+16)&0xFF);

391 #i‡(
NUMBER_MOTOR
 > 6)

392 #i‡!
	`deföed
(
HWPWM6
)

393 
©omicPWM_PINA2_highSèã
 = ((
mŸ‹
[6]-1000)<<4)+320;

394 
©omicPWM_PINA2_lowSèã
 = 15743-
©omicPWM_PINA2_highSèã
;

395 
©omicPWM_PIN12_highSèã
 = ((
mŸ‹
[7]-1000)<<4)+320;

396 
©omicPWM_PIN12_lowSèã
 = 15743-
©omicPWM_PIN12_highSèã
;

398 
©omicPWM_PINA2_highSèã
 = ((
mŸ‹
[6]-1000)>>2)+5;

399 
©omicPWM_PINA2_lowSèã
 = 245-
©omicPWM_PINA2_highSèã
;

400 
©omicPWM_PIN12_highSèã
 = ((
mŸ‹
[7]-1000)>>2)+5;

401 
©omicPWM_PIN12_lowSèã
 = 245-
©omicPWM_PIN12_highSèã
;

407 #i‡
	`deföed
(
PROMINI
)

408 #i‡(
NUMBER_MOTOR
 > 0)

409 #ifde‡
EXT_MOTOR_RANGE


410 
OCR1A
 = ((
mŸ‹
[0]>>2) - 250);

411 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

412 
OCR1A
 = (
mŸ‹
[0] - 1000) >> 2;

413 #ñi‡
	`deföed
(
EXT_MOTOR_4KHZ
)

414 
OCR1A
 = (
mŸ‹
[0] - 1000) << 1;

415 #ñi‡
	`deföed
(
EXT_MOTOR_1KHZ
)

416 
OCR1A
 = (
mŸ‹
[0] - 1000) << 3;

418 
OCR1A
 = 
mŸ‹
[0]>>3;

421 #i‡(
NUMBER_MOTOR
 > 1)

422 #ifde‡
EXT_MOTOR_RANGE


423 
OCR1B
 = ((
mŸ‹
[1]>>2) - 250);

424 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

425 
OCR1B
 = (
mŸ‹
[1] - 1000) >> 2;

426 #ñi‡
	`deföed
(
EXT_MOTOR_4KHZ
)

427 
OCR1B
 = (
mŸ‹
[1] - 1000) << 1;

428 #ñi‡
	`deföed
(
EXT_MOTOR_1KHZ
)

429 
OCR1B
 = (
mŸ‹
[1] - 1000) << 3;

431 
OCR1B
 = 
mŸ‹
[1]>>3;

434 #i‡(
NUMBER_MOTOR
 > 2)

435 #ifde‡
EXT_MOTOR_RANGE


436 
OCR2A
 = ((
mŸ‹
[2]>>2) - 250);

437 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

438 
OCR2A
 = (
mŸ‹
[2] - 1000) >> 2;

439 #ñi‡
	`deföed
(
EXT_MOTOR_4KHZ
)

440 
OCR2A
 = (
mŸ‹
[2] - 1000) >> 2;

441 #ñi‡
	`deföed
(
EXT_MOTOR_1KHZ
)

442 
OCR2A
 = (
mŸ‹
[2] - 1000) >> 2;

444 
OCR2A
 = 
mŸ‹
[2]>>3;

447 #i‡(
NUMBER_MOTOR
 > 3)

448 #ifde‡
EXT_MOTOR_RANGE


449 
OCR2B
 = ((
mŸ‹
[3]>>2) - 250);

450 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

451 
OCR2B
 = (
mŸ‹
[3] - 1000) >> 2;

452 #ñi‡
	`deföed
(
EXT_MOTOR_4KHZ
)

453 
OCR2B
 = (
mŸ‹
[3] - 1000) >> 2;

454 #ñi‡
	`deföed
(
EXT_MOTOR_1KHZ
)

455 
OCR2B
 = (
mŸ‹
[3] - 1000) >> 2;

457 
OCR2B
 = 
mŸ‹
[3]>>3;

460 #i‡(
NUMBER_MOTOR
 > 4)

461 #i‡(
NUMBER_MOTOR
 =6Ë&& !
	`deföed
(
SERVO
)

462 #i‚de‡
EXT_MOTOR_RANGE


463 
©omicPWM_PIN6_highSèã
 = 
mŸ‹
[4]>>3;

464 
©omicPWM_PIN5_highSèã
 = 
mŸ‹
[5]>>3;

466 
©omicPWM_PIN6_highSèã
 = (
mŸ‹
[4]>>2) - 250;

467 
©omicPWM_PIN5_highSèã
 = (
mŸ‹
[5]>>2) - 250;

469 
©omicPWM_PIN6_lowSèã
 = 255-
©omicPWM_PIN6_highSèã
;

470 
©omicPWM_PIN5_lowSèã
 = 255-
©omicPWM_PIN5_highSèã
;

472 
©omicPWM_PIN6_highSèã
 = ((
mŸ‹
[4]-1000)>>2)+5;

473 
©omicPWM_PIN6_lowSèã
 = 245-
©omicPWM_PIN6_highSèã
;

474 
©omicPWM_PIN5_highSèã
 = ((
mŸ‹
[5]-1000)>>2)+5;

475 
©omicPWM_PIN5_lowSèã
 = 245-
©omicPWM_PIN5_highSèã
;

478 #i‡(
NUMBER_MOTOR
 > 6)

479 
©omicPWM_PINA2_highSèã
 = ((
mŸ‹
[6]-1000)>>2)+5;

480 
©omicPWM_PINA2_lowSèã
 = 245-
©omicPWM_PINA2_highSèã
;

481 
©omicPWM_PIN12_highSèã
 = ((
mŸ‹
[7]-1000)>>2)+5;

482 
©omicPWM_PIN12_lowSèã
 = 245-
©omicPWM_PIN12_highSèã
;

485 
	}
}

490 
	$wrôeAŒMŸ‹s
(
öt16_t
 
mc
) {

491 
uöt8_t
 
i
 =0;i<
NUMBER_MOTOR
;i++) {

492 
mŸ‹
[
i
] = 
mc
;

493 
mŸ‹_dißrmed
[
i
] = 
mc
;

495 
	`wrôeMŸ‹s
();

496 
	}
}

501 
	$öôOuçut
() {

503 
uöt8_t
 
i
=0;i<
NUMBER_MOTOR
;i++) {

504 
	`pöMode
(
PWM_PIN
[
i
],
OUTPUT
);

508 #i‡
	`deföed
(
MEGA
)

509 #i‡(
NUMBER_MOTOR
 > 0)

511 
TCCR3A
 |(1<<
WGM31
);

512 
TCCR3A
 &~(1<<
WGM30
);

513 
TCCR3B
 |(1<<
WGM33
);

514 
TCCR3B
 &~(1<<
CS31
);

515 
ICR3
 |= 0x3FFF;

517 
TCCR3A
 |
	`_BV
(
COM3C1
);

519 #i‡(
NUMBER_MOTOR
 > 1)

520 
TCCR3A
 |
	`_BV
(
COM3A1
);

522 #i‡(
NUMBER_MOTOR
 > 2)

524 
TCCR4A
 |(1<<
WGM41
);

525 
TCCR4A
 &~(1<<
WGM40
);

526 
TCCR4B
 |(1<<
WGM43
);

527 
TCCR4B
 &~(1<<
CS41
);

528 
ICR4
 |= 0x3FFF;

530 
TCCR4A
 |
	`_BV
(
COM4A1
);

532 #i‡(
NUMBER_MOTOR
 > 3)

533 
TCCR3A
 |
	`_BV
(
COM3B1
);

535 #i‡(
NUMBER_MOTOR
 > 4)

536 
TCCR4A
 |
	`_BV
(
COM4B1
);

537 
TCCR4A
 |
	`_BV
(
COM4C1
);

539 #i‡(
NUMBER_MOTOR
 > 6)

541 
TCCR2A
 |
	`_BV
(
COM2B1
);

542 
TCCR2A
 |
	`_BV
(
COM2A1
);

547 #i‡
	`deföed
(
PROMICRO
)

548 #i‡
	`deföed
(
EXT_MOTOR_64KHZ
Ë|| deföed(
EXT_MOTOR_32KHZ
Ë|| deföed(
EXT_MOTOR_16KHZ
Ë|| deföed(
EXT_MOTOR_8KHZ
)

549 
TCCR1A
 = (1<<
WGM11
);

550 
TCCR1B
 = (1<<
WGM13
Ë| (1<<
WGM12
Ë| (1<<
CS10
);

551 
TCCR3A
 = (1<<
WGM31
);

552 
TCCR3B
 = (1<<
WGM33
Ë| (1<<
WGM32
Ë| (1<<
CS30
);

553 #i‡
	`deföed
(
EXT_MOTOR_64KHZ
)

554 
ICR1
 = 0x00FF;

555 
ICR3
 = 0x00FF;

556 
TC4H
 = 0x00;

557 
OCR4C
 = 0xFF;

558 
TCCR4B
 = (1<<
CS40
);

559 #ñi‡
	`deföed
(
EXT_MOTOR_32KHZ
)

560 
ICR1
 = 0x01FF;

561 
ICR3
 = 0x01FF;

562 
TC4H
 = 0x01;

563 
OCR4C
 = 0xFF;

564 
TCCR4B
 = (1<<
CS40
);

565 #ñi‡
	`deföed
(
EXT_MOTOR_16KHZ
)

566 
ICR1
 = 0x03FF;

567 
ICR3
 = 0x03FF;

568 
TC4H
 = 0x03;

569 
OCR4C
 = 0xFF;

570 
TCCR4B
 = (1<<
CS40
);

571 #ñi‡
	`deföed
(
EXT_MOTOR_8KHZ
)

572 
ICR1
 = 0x07FF;

573 
ICR3
 = 0x07FF;

574 
TC4H
 = 0x3;

575 
OCR4C
 = 0xFF;

576 
TCCR4B
 = (1<<
CS41
);

578 
TCCR1A
 |
	`_BV
(
COM1A1
);

579 
TCCR1A
 |
	`_BV
(
COM1B1
);

580 
TCCR3A
 |
	`_BV
(
COM3A1
);

581 
TCCR4D
 = 0;

582 
TCCR4C
 |(1<<
COM4D1
)|(1<<
PWM4D
);

584 #i‡(
NUMBER_MOTOR
 > 0Ë&& ( !
	`deföed
(
A32U4_4_HW_PWM_SERVOS
) )

585 
TCCR1A
 |(1<<
WGM11
);

586 
TCCR1A
 &~(1<<
WGM10
);

587 
TCCR1B
 &~(1<<
WGM12
Ë& ~(1<<
CS11
Ë& ~(1<<
CS12
);

588 
TCCR1B
 |(1<<
WGM13
Ë| (1<<
CS10
);

589 
ICR1
 |= 0x3FFF;

590 
TCCR1A
 |
	`_BV
(
COM1A1
);

592 #i‡(
NUMBER_MOTOR
 > 1)

593 
TCCR1A
 |
	`_BV
(
COM1B1
);

595 #i‡(
NUMBER_MOTOR
 > 2)

596 #i‡!
	`deföed
(
HWPWM6
)

597 
TCCR4E
 |(1<<
ENHC4
);

598 
TCCR4B
 &~(1<<
CS41
); TCCR4B |(1<<
CS42
)|(1<<
CS40
);

599 
TCCR4D
 |(1<<
WGM40
); 
TC4H
 = 0x3; 
OCR4C
 = 0xFF;

600 
TCCR4A
 |(1<<
COM4A0
)|(1<<
PWM4A
);

602 
TCCR3A
 |(1<<
WGM31
);

603 
TCCR3A
 &~(1<<
WGM30
);

604 
TCCR3B
 &~(1<<
WGM32
Ë& ~(1<<
CS31
Ë& ~(1<<
CS32
);

605 
TCCR3B
 |(1<<
WGM33
Ë| (1<<
CS30
);

606 
ICR3
 |= 0x3FFF;

607 
TCCR3A
 |
	`_BV
(
COM3A1
);

610 #i‡(
NUMBER_MOTOR
 > 3Ë|| ( (NUMBER_MOTOR > 0Ë&& 
	`deföed
(
A32U4_4_HW_PWM_SERVOS
) )

611 #i‡
	`deföed
(
HWPWM6
)

612 
TCCR4E
 |(1<<
ENHC4
);

613 
TCCR4B
 &~(1<<
CS41
); TCCR4B |(1<<
CS42
)|(1<<
CS40
);

614 
TCCR4D
 |(1<<
WGM40
); 
TC4H
 = 0x3; 
OCR4C
 = 0xFF;

616 
TCCR4C
 |(1<<
COM4D1
)|(1<<
PWM4D
);

618 #i‡(
NUMBER_MOTOR
 > 4)

619 #i‡
	`deföed
(
HWPWM6
)

620 
TCCR1A
 |
	`_BV
(
COM1C1
);

621 
TCCR4A
 |(1<<
COM4A1
)|(1<<
PWM4A
);

623 
	`öôülizeSo·PWM
();

626 #i‡(
NUMBER_MOTOR
 > 6)

627 #i‡
	`deföed
(
HWPWM6
)

628 
	`öôülizeSo·PWM
();

635 #i‡
	`deföed
(
PROMINI
)

636 #i‡
	`deföed
(
EXT_MOTOR_32KHZ
)

637 
TCCR1A
 = (1<<
WGM11
);

638 
TCCR1B
 = (1<<
WGM13
Ë| (1<<
CS10
);

639 
ICR1
 = 0x00FF;

640 
TCCR2B
 = (1<<
CS20
);

641 #ñi‡
	`deföed
(
EXT_MOTOR_4KHZ
)

642 
TCCR1A
 = (1<<
WGM11
);

643 
TCCR1B
 = (1<<
WGM13
Ë| (1<<
CS10
);

644 
ICR1
 = 0x07F8;

645 
TCCR2B
 = (1<<
CS21
);

646 #ñi‡
	`deföed
(
EXT_MOTOR_1KHZ
)

647 
TCCR1A
 = (1<<
WGM11
);

648 
TCCR1B
 = (1<<
WGM13
Ë| (1<<
CS10
);

649 
ICR1
 = 0x1FE0;

650 
TCCR2B
 = (1<<
CS20
Ë| (1<<
CS21
);

653 #i‡(
NUMBER_MOTOR
 > 0)

654 
TCCR1A
 |
	`_BV
(
COM1A1
);

656 #i‡(
NUMBER_MOTOR
 > 1)

657 
TCCR1A
 |
	`_BV
(
COM1B1
);

659 #i‡(
NUMBER_MOTOR
 > 2)

660 
TCCR2A
 |
	`_BV
(
COM2A1
);

662 #i‡(
NUMBER_MOTOR
 > 3)

663 
TCCR2A
 |
	`_BV
(
COM2B1
);

665 #i‡(
NUMBER_MOTOR
 > 4)

666 
	`öôülizeSo·PWM
();

667 #i‡
	`deföed
(
A0_A1_PIN_HEX
Ë|| (
NUMBER_MOTOR
 > 6)

668 
	`pöMode
(5,
INPUT
);pinMode(6,INPUT);

669 
	`pöMode
(
A0
,
OUTPUT
);pöMode(
A1
,OUTPUT);

675 #i‡
	`deföed
(
ESC_CALIB_CANNOT_FLY
)

676 
	`wrôeAŒMŸ‹s
(
ESC_CALIB_HIGH
);

677 
	`blökLED
(2,20, 2);

678 
	`dñay
(4000);

679 
	`wrôeAŒMŸ‹s
(
ESC_CALIB_LOW
);

680 
	`blökLED
(3,20, 2);

682 
	`dñay
(5000);

683 
	`blökLED
(4,20, 2);

684 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_2
);

686 
exô
;

689 
	`wrôeAŒMŸ‹s
(
MINCOMMAND
);

690 
	`dñay
(300);

691 #i‡
	`deföed
(
SERVO
)

692 
	`öôülizeSîvo
();

694 
	}
}

697 #i‡
deföed
(
SERVO
)

701 
	$öôülizeSîvo
() {

702 #i‡!
	`deföed
(
HW_PWM_SERVOS
)

704 #i‡(
PRI_SERVO_FROM
 =1Ë|| (
SEC_SERVO_FROM
 == 1)

705 
SERVO_1_PINMODE
;

707 #i‡(
PRI_SERVO_FROM
 <2 && 
PRI_SERVO_TO
 >2Ë|| (
SEC_SERVO_FROM
 <2 && 
SEC_SERVO_TO
 >= 2)

708 
SERVO_2_PINMODE
;

710 #i‡(
PRI_SERVO_FROM
 <3 && 
PRI_SERVO_TO
 >3Ë|| (
SEC_SERVO_FROM
 <3 && 
SEC_SERVO_TO
 >= 3)

711 
SERVO_3_PINMODE
;

713 #i‡(
PRI_SERVO_FROM
 <4 && 
PRI_SERVO_TO
 >4Ë|| (
SEC_SERVO_FROM
 <4 && 
SEC_SERVO_TO
 >= 4)

714 
SERVO_4_PINMODE
;

716 #i‡(
PRI_SERVO_FROM
 <5 && 
PRI_SERVO_TO
 >5Ë|| (
SEC_SERVO_FROM
 <5 && 
SEC_SERVO_TO
 >= 5)

717 
SERVO_5_PINMODE
;

719 #i‡(
PRI_SERVO_FROM
 <6 && 
PRI_SERVO_TO
 >6Ë|| (
SEC_SERVO_FROM
 <6 && 
SEC_SERVO_TO
 >= 6)

720 
SERVO_6_PINMODE
;

722 #i‡(
PRI_SERVO_FROM
 <7 && 
PRI_SERVO_TO
 >7Ë|| (
SEC_SERVO_FROM
 <7 && 
SEC_SERVO_TO
 >= 7)

723 
SERVO_7_PINMODE
;

725 #i‡(
PRI_SERVO_FROM
 <8 && 
PRI_SERVO_TO
 >8Ë|| (
SEC_SERVO_FROM
 <8 && 
SEC_SERVO_TO
 >= 8)

726 
SERVO_8_PINMODE
;

730 #i‡
	`deföed
(
SERVO_1_HIGH
)

731 #i‡
	`deföed
(
PROMINI
Ë|| (deföed(
PROMICRO
Ë&& deföed(
HWPWM6
))

732 
TCCR0A
 = 0;

733 
TIMSK0
 |(1<<
OCIE0A
);

734 
	#SERVO_ISR
 
TIMER0_COMPA_ve˘


	)

735 
	#SERVO_CHANNEL
 
OCR0A


	)

736 
	#SERVO_1K_US
 250

	)

738 #i‡(
	`deföed
(
PROMICRO
Ë&& !deföed(
HWPWM6
))

739 
TCCR3A
 &~(1<<
WGM30
Ë& ~(1<<
WGM31
);

740 
TCCR3B
 &~(1<<
WGM32
Ë& ~(1<<
CS31
Ë& ~(1<<
CS32
Ë& ~(1<<
WGM33
);

741 
TCCR3B
 |(1<<
CS30
);

742 
TIMSK3
 |(1<<
OCIE3A
);

743 
	#SERVO_ISR
 
TIMER3_COMPA_ve˘


	)

744 
	#SERVO_CHANNEL
 
OCR3A


	)

745 
	#SERVO_1K_US
 16000

	)

747 #i‡
	`deföed
(
MEGA
)

748 
TCCR5A
 &~(1<<
WGM50
Ë& ~(1<<
WGM51
);

749 
TCCR5B
 &~(1<<
WGM52
Ë& ~(1<<
CS51
Ë& ~(1<<
CS52
Ë& ~(1<<
WGM53
);

750 
TCCR5B
 |(1<<
CS50
);

751 
TIMSK5
 |(1<<
OCIE5A
);

752 
	#SERVO_ISR
 
TIMER5_COMPA_ve˘


	)

753 
	#SERVO_CHANNEL
 
OCR5A


	)

754 
	#SERVO_1K_US
 16000

	)

758 #i‡
	`deföed
(
MEGA
Ë&& deföed(
MEGA_HW_PWM_SERVOS
)

759 #i‡
	`deföed
(
SERVO_RFR_RATE
)

760 #i‡(
SERVO_RFR_RATE
 < 20)

761 
	#SERVO_RFR_RATE
 20

	)

763 #i‡(
SERVO_RFR_RATE
 > 400)

764 
	#SERVO_RFR_RATE
 400

	)

767 #i‡
	`deföed
(
SERVO_RFR_50HZ
)

768 
	#SERVO_RFR_RATE
 50

	)

769 #ñi‡
	`deföed
(
SERVO_RFR_160HZ
)

770 
	#SERVO_RFR_RATE
 160

	)

771 #ñi‡
	`deföed
(
SERVO_RFR_300HZ
)

772 
	#SERVO_RFR_RATE
 300

	)

775 
	#SERVO_TOP_VAL
 (
uöt16_t
)(1000000L / 
SERVO_RFR_RATE
)

	)

777 
TIMSK5
 &~(1<<
OCIE5A
);

778 #i‡(
PRI_SERVO_TO
 >1Ë|| (
SEC_SERVO_TO
 >= 1)

779 
TCCR5A
 |(1<<
WGM51
);

780 
TCCR5A
 &~(1<<
WGM50
);

781 
TCCR5B
 &~(1<<
WGM52
Ë& ~(1<<
CS50
Ë& ~(1<<
CS52
);

782 
TCCR5B
 |(1<<
WGM53
Ë| (1<<
CS51
);

783 
ICR5
 = 
SERVO_TOP_VAL
;

784 #i‡(
PRI_SERVO_FROM
 =1 || 
SEC_SERVO_FROM
 == 1)

785 
	`pöMode
(44,
OUTPUT
);

786 
TCCR5A
 |(1<<
COM5C1
);

788 #i‡(
PRI_SERVO_FROM
 <2 && 
PRI_SERVO_TO
 >2Ë|| (
SEC_SERVO_FROM
 <2 && 
SEC_SERVO_TO
 >= 2)

789 
	`pöMode
(45,
OUTPUT
);

790 
TCCR5A
 |(1<<
COM5B1
);

792 #i‡(
PRI_SERVO_FROM
 <3 && 
PRI_SERVO_TO
 >3Ë|| (
SEC_SERVO_FROM
 <3 && 
SEC_SERVO_TO
 >= 3)

793 
	`pöMode
(46,
OUTPUT
);

794 
TCCR5A
 |(1<<
COM5A1
);

797 #i‡(
PRI_SERVO_TO
 >4Ë|| (
SEC_SERVO_TO
 >= 4)

798 
TCCR1A
 |(1<<
WGM11
);

799 
TCCR1A
 &~(1<<
WGM10
);

800 
TCCR1B
 &~(1<<
WGM12
Ë& ~(1<<
CS10
Ë& ~(1<<
CS12
);

801 
TCCR1B
 |(1<<
WGM13
Ë| (1<<
CS11
);

802 
ICR1
 = 
SERVO_TOP_VAL
;

803 #i‡(
PRI_SERVO_FROM
 <4 && 
PRI_SERVO_TO
 >4Ë|| (
SEC_SERVO_FROM
 <4 && 
SEC_SERVO_TO
 >= 4)

804 
	`pöMode
(11, 
OUTPUT
);

805 
TCCR1A
 |(1<<
COM1A1
);

807 #i‡(
PRI_SERVO_FROM
 <5 && 
PRI_SERVO_TO
 >5Ë|| (
SEC_SERVO_FROM
 <5 && 
SEC_SERVO_TO
 >= 5)

808 
	`pöMode
(12,
OUTPUT
);

809 
TCCR1A
 |(1<<
COM1B1
);

812 #i‡(
PRI_SERVO_TO
 >6Ë|| (
SEC_SERVO_TO
 >= 6)

814 
TCCR4A
 |(1<<
WGM41
);

815 
TCCR4A
 &~(1<<
WGM40
);

816 
TCCR4B
 &~(1<<
WGM42
Ë& ~(1<<
CS40
Ë& ~(1<<
CS42
);

817 
TCCR4B
 |(1<<
WGM43
Ë| (1<<
CS41
);

818 
ICR4
 = 
SERVO_TOP_VAL
;

819 #i‡(
PRI_SERVO_FROM
 <6 && 
PRI_SERVO_TO
 >6Ë|| (
SEC_SERVO_FROM
 <6 && 
SEC_SERVO_TO
 >= 6)

820 
	`pöMode
(6,
OUTPUT
);

821 
TCCR4A
 |
	`_BV
(
COM4A1
);

823 #i‡(
PRI_SERVO_FROM
 <7 && 
PRI_SERVO_TO
 >7Ë|| (
SEC_SERVO_FROM
 <7 && 
SEC_SERVO_TO
 >= 7)

824 
	`pöMode
(7,
OUTPUT
);

825 
TCCR4A
 |
	`_BV
(
COM4B1
);

827 #i‡(
PRI_SERVO_FROM
 <8 && 
PRI_SERVO_TO
 >8Ë|| (
SEC_SERVO_FROM
 <8 && 
SEC_SERVO_TO
 >= 8)

828 #i‡
	`deföed
(
AIRPLANE
Ë|| deföed(
HELICOPTER
)

829 
£rvo
[7] = 
MINCOMMAND
;

830 
OCR4C
 = 
MINCOMMAND
;

832 
	`pöMode
(8,
OUTPUT
);

833 
TCCR4A
 |
	`_BV
(
COM4C1
);

838 #i‡
	`deföed
(
PROMICRO
Ë&& deföed(
A32U4_4_HW_PWM_SERVOS
)

840 
TIMSK1
 &~(1<<
OCIE1A
Ë& ~(1<<
OCIE1B
Ë& ~(1<<
OCIE1C
);

841 
TCCR1A
 |(1<<
WGM11
);

842 
TCCR1A
 &~(1<<
WGM10
);

843 
TCCR1B
 &~(1<<
WGM12
Ë& ~(1<<
CS10
Ë& ~(1<<
CS12
);

844 
TCCR1B
 |(1<<
WGM13
Ë| (1<<
CS11
);

845 
	`pöMode
(9,
OUTPUT
);

846 
TCCR1A
 |(1<<
COM1A1
);

847 
	`pöMode
(10,
OUTPUT
);

848 
TCCR1A
 |(1<<
COM1B1
);

849 
	`pöMode
(11,
OUTPUT
);

850 
TCCR1A
 |(1<<
COM1C1
);

852 
TCCR3A
 |(1<<
WGM31
);

853 
TCCR3A
 &~(1<<
WGM30
);

854 
TCCR3B
 &~(1<<
WGM32
Ë& ~(1<<
CS30
Ë& ~(1<<
CS32
);

855 
TCCR3B
 |(1<<
WGM33
Ë| (1<<
CS31
);

856 
	`pöMode
(5,
OUTPUT
);

857 
TCCR3A
 |(1<<
COM3A1
);

858 #i‡
	`deföed
(
SERVO_RFR_RATE
)

859 #i‡(
SERVO_RFR_RATE
 < 50) || (SERVO_RFR_RATE > 400)

862 
	#SERVO_TOP_VAL
 (
uöt16_t
)(1000000L / 
SERVO_RFR_RATE
)

	)

863 #ñi‡
	`deföed
(
SERVO_RFR_50HZ
)

864 
	#SERVO_TOP_VAL
 16700

	)

865 #ñi‡
	`deföed
(
SERVO_RFR_160HZ
)

866 
	#SERVO_TOP_VAL
 6200

	)

867 #ñi‡
	`deföed
(
SERVO_RFR_300HZ
)

868 
	#SERVO_TOP_VAL
 3300

	)

872 #i‡
	`deföed
(
SERVO_PIN5_RFR_RATE
)

873 #i‡(
SERVO_PIN5_RFR_RATE
 < 50) || (SERVO_PIN5_RFR_RATE > 400)

876 
	#SERVO_PIN5_TOP_VAL
 (
uöt16_t
)(1000000L / 
SERVO_PIN5_RFR_RATE
)

	)

878 
	#SERVO_PIN5_TOP_VAL
 
SERVO_TOP_VAL


	)

880 
ICR1
 = 
SERVO_TOP_VAL
;

881 
ICR3
 = 
SERVO_PIN5_TOP_VAL
;

883 
	}
}

895 #i‡
deföed
(
SERVO_1_HIGH
Ë&& !deföed(
A32U4_4_HW_PWM_SERVOS
)

896 
	#SERVO_PULSE
(
PIN_HIGH
,
ACT_STATE
,
SERVO_NUM
,
LAST_PIN_LOW
) \

897 }if(
°©e
 =
ACT_STATE
){ \

898 
LAST_PIN_LOW
; \

899 
PIN_HIGH
; \

900 
SERVO_CHANNEL
+=
SERVO_1K_US
; \

901 
°©e
++; \

902 }if(
°©e
 =
ACT_STATE
+1){ \

903 
SERVO_CHANNEL
+=
©omicSîvo
[
SERVO_NUM
]; \

904 
°©e
++; \

905 

	)

906 
ISR
(
SERVO_ISR
) {

907 
uöt8_t
 
	g°©e
 = 0;

908 if(
	g°©e
 == 0){

909 
SERVO_1_HIGH
;

910 
	gSERVO_CHANNEL
+=
SERVO_1K_US
;

911 
	g°©e
++;

912 }if(
	g°©e
==1){

913 
SERVO_CHANNEL
+=
©omicSîvo
[
SERVO_1_ARR_POS
];

914 
	g°©e
++;

915 #i‡
deföed
(
SERVO_2_HIGH
)

916 
SERVO_PULSE
(
SERVO_2_HIGH
,2,
SERVO_2_ARR_POS
,
SERVO_1_LOW
);

918 #i‡
deföed
(
SERVO_3_HIGH
)

919 
SERVO_PULSE
(
SERVO_3_HIGH
,4,
SERVO_3_ARR_POS
,
SERVO_2_LOW
);

921 #i‡
deföed
(
SERVO_4_HIGH
)

922 
SERVO_PULSE
(
SERVO_4_HIGH
,6,
SERVO_4_ARR_POS
,
SERVO_3_LOW
);

924 #i‡
deföed
(
SERVO_5_HIGH
)

925 
SERVO_PULSE
(
SERVO_5_HIGH
,8,
SERVO_5_ARR_POS
,
SERVO_4_LOW
);

927 #i‡
deföed
(
SERVO_6_HIGH
)

928 
SERVO_PULSE
(
SERVO_6_HIGH
,10,
SERVO_6_ARR_POS
,
SERVO_5_LOW
);

930 #i‡
deföed
(
SERVO_7_HIGH
)

931 
SERVO_PULSE
(
SERVO_7_HIGH
,12,
SERVO_7_ARR_POS
,
SERVO_6_LOW
);

933 #i‡
deföed
(
SERVO_8_HIGH
)

934 
SERVO_PULSE
(
SERVO_8_HIGH
,14,
SERVO_8_ARR_POS
,
SERVO_7_LOW
);

937 
	gLAST_LOW
;

938 #i‡
deföed
(
SERVO_RFR_300HZ
)

939 #i‡
deföed
(
SERVO_3_HIGH
)

940 
	gSERVO_CHANNEL
+=(
SERVO_1K_US
>>3);

941 
	g°©e
=0;

943 
	gSERVO_CHANNEL
+=
SERVO_1K_US
;

944 if(
	g°©e
<4){

945 
	g°©e
+=2;

947 
	g°©e
=0;

951 #i‡
deföed
(
SERVO_RFR_160HZ
)

952 #i‡
deföed
(
SERVO_4_HIGH
)

953 
	gSERVO_CHANNEL
+=(
SERVO_1K_US
>>3);

954 
	g°©e
=0;

956 
	gSERVO_CHANNEL
+=
SERVO_1K_US
;

957 if(
	g°©e
<8){

958 
	g°©e
+=2;

960 
	g°©e
=0;

964 #i‡
deföed
(
SERVO_RFR_50HZ
)

965 
	gSERVO_CHANNEL
+=
SERVO_1K_US
;

966 if(
	g°©e
<30){

967 
	g°©e
+=2;

969 
	g°©e
=0;

982 #i‡(
NUMBER_MOTOR
 > 4Ë&& (
deföed
(
PROMINI
Ë|| deföed(
PROMICRO
))

985 #i‡!
deföed
(
PROMICRO
)

986 
	#SOFT_PWM_ISR1
 
TIMER0_COMPB_ve˘


	)

987 
	#SOFT_PWM_ISR2
 
TIMER0_COMPA_ve˘


	)

988 
	#SOFT_PWM_CHANNEL1
 
OCR0B


	)

989 
	#SOFT_PWM_CHANNEL2
 
OCR0A


	)

990 #ñi‡!
deföed
(
HWPWM6
)

991 
	#SOFT_PWM_ISR1
 
TIMER3_COMPB_ve˘


	)

992 
	#SOFT_PWM_ISR2
 
TIMER3_COMPC_ve˘


	)

993 
	#SOFT_PWM_CHANNEL1
 
OCR3B


	)

994 
	#SOFT_PWM_CHANNEL2
 
OCR3C


	)

996 
	#SOFT_PWM_ISR2
 
TIMER0_COMPB_ve˘


	)

997 
	#SOFT_PWM_CHANNEL2
 
OCR0B


	)

1001 
öôülizeSo·PWM
() {

1002 #i‡!
deföed
(
PROMICRO
)

1003 
	gTCCR0A
 = 0;

1004 #i‡(
NUMBER_MOTOR
 > 4Ë&& !
deföed
(
HWPWM6
)

1005 
	gTIMSK0
 |(1<<
OCIE0B
);

1007 #i‡(
NUMBER_MOTOR
 > 6Ë|| ((NUMBER_MOTOR =6Ë&& !
deföed
(
SERVO
))

1008 
	gTIMSK0
 |(1<<
OCIE0A
);

1011 #i‡!
deföed
(
HWPWM6
)

1012 
	gTCCR3A
 &~(1<<
WGM30
Ë& ~(1<<
WGM31
);

1013 
	gTCCR3B
 &~(1<<
WGM32
Ë& ~(1<<
CS31
Ë& ~(1<<
CS32
Ë& ~(1<<
WGM33
);

1014 
	gTCCR3B
 |(1<<
CS30
);

1015 
	gTIMSK3
 |(1<<
OCIE3B
);

1016 #i‡(
NUMBER_MOTOR
 > 6Ë|| ((NUMBER_MOTOR =6Ë&& !
deföed
(
SERVO
))

1017 
	gTIMSK3
 |(1<<
OCIE3C
);

1020 
	gTCCR0A
 = 0;

1021 
	gTIMSK0
 |(1<<
OCIE0B
);

1029 #i‡(
NUMBER_MOTOR
 =6Ë&& (!
deföed
(
SERVO
Ë&& !deföed(
HWPWM6
))

1030 
ISR
(
SOFT_PWM_ISR1
) {

1031 
uöt8_t
 
	g°©e
 = 0;

1032 if(
	g°©e
 == 0){

1033 i‡(
©omicPWM_PIN5_highSèã
>0Ë
SOFT_PWM_1_PIN_HIGH
;

1034 
	gSOFT_PWM_CHANNEL1
 +
©omicPWM_PIN5_highSèã
;

1035 
	g°©e
 = 1;

1036 }if(
	g°©e
 == 1){

1037 
SOFT_PWM_CHANNEL1
 +
©omicPWM_PIN5_highSèã
;

1038 
	g°©e
 = 2;

1039 }if(
	g°©e
 == 2){

1040 
SOFT_PWM_1_PIN_LOW
;

1041 
	gSOFT_PWM_CHANNEL1
 +
©omicPWM_PIN5_lowSèã
;

1042 
	g°©e
 = 3;

1043 }if(
	g°©e
 == 3){

1044 
SOFT_PWM_CHANNEL1
 +
©omicPWM_PIN5_lowSèã
;

1045 
	g°©e
 = 0;

1048 
ISR
(
SOFT_PWM_ISR2
) {

1049 
uöt8_t
 
	g°©e
 = 0;

1050 if(
	g°©e
 == 0){

1051 i‡(
©omicPWM_PIN6_highSèã
>0Ë
SOFT_PWM_2_PIN_HIGH
;

1052 
	gSOFT_PWM_CHANNEL2
 +
©omicPWM_PIN6_highSèã
;

1053 
	g°©e
 = 1;

1054 }if(
	g°©e
 == 1){

1055 
SOFT_PWM_CHANNEL2
 +
©omicPWM_PIN6_highSèã
;

1056 
	g°©e
 = 2;

1057 }if(
	g°©e
 == 2){

1058 
SOFT_PWM_2_PIN_LOW
;

1059 
	gSOFT_PWM_CHANNEL2
 +
©omicPWM_PIN6_lowSèã
;

1060 
	g°©e
 = 3;

1061 }if(
	g°©e
 == 3){

1062 
SOFT_PWM_CHANNEL2
 +
©omicPWM_PIN6_lowSèã
;

1063 
	g°©e
 = 0;

1067 #i‡(
NUMBER_MOTOR
 > 4Ë&& !
deföed
(
HWPWM6
)

1069 
ISR
(
SOFT_PWM_ISR1
) {

1070 
uöt8_t
 
	g°©e
 = 0;

1071 if(
	g°©e
 == 0){

1072 
SOFT_PWM_1_PIN_HIGH
;

1073 
	gSOFT_PWM_CHANNEL1
 +
©omicPWM_PIN5_highSèã
;

1074 
	g°©e
 = 1;

1075 }if(
	g°©e
 == 1){

1076 
SOFT_PWM_2_PIN_LOW
;

1077 
	gSOFT_PWM_CHANNEL1
 +
©omicPWM_PIN6_lowSèã
;

1078 
	g°©e
 = 2;

1079 }if(
	g°©e
 == 2){

1080 
SOFT_PWM_2_PIN_HIGH
;

1081 
	gSOFT_PWM_CHANNEL1
 +
©omicPWM_PIN6_highSèã
;

1082 
	g°©e
 = 3;

1083 }if(
	g°©e
 == 3){

1084 
SOFT_PWM_1_PIN_LOW
;

1085 
	gSOFT_PWM_CHANNEL1
 +
©omicPWM_PIN5_lowSèã
;

1086 
	g°©e
 = 0;

1091 #i‡(
NUMBER_MOTOR
 > 6)

1092 
ISR
(
SOFT_PWM_ISR2
) {

1093 
uöt8_t
 
	g°©e
 = 0;

1094 if(
	g°©e
 == 0){

1095 
SOFT_PWM_3_PIN_HIGH
;

1096 
	gSOFT_PWM_CHANNEL2
 +
©omicPWM_PINA2_highSèã
;

1097 
	g°©e
 = 1;

1098 }if(
	g°©e
 == 1){

1099 
SOFT_PWM_4_PIN_LOW
;

1100 
	gSOFT_PWM_CHANNEL2
 +
©omicPWM_PIN12_lowSèã
;

1101 
	g°©e
 = 2;

1102 }if(
	g°©e
 == 2){

1103 
SOFT_PWM_4_PIN_HIGH
;

1104 
	gSOFT_PWM_CHANNEL2
 +
©omicPWM_PIN12_highSèã
;

1105 
	g°©e
 = 3;

1106 }if(
	g°©e
 == 3){

1107 
SOFT_PWM_3_PIN_LOW
;

1108 
	gSOFT_PWM_CHANNEL2
 +
©omicPWM_PINA2_lowSèã
;

1109 
	g°©e
 = 0;

1121 
öt16_t
 
gë_middÀ
(
uöt8_t
 
ƒ
) {

1122  (
	gc⁄f
.
	g£rvoC⁄f
[
ƒ
].
	gmiddÀ
 < 
	gRC_CHANS
Ë? 
	grcD©a
[
c⁄f
.
£rvoC⁄f
[ƒ].middÀ] : c⁄f.£rvoC⁄f[ƒ].
middÀ
;

1127 
mixTabÀ
() {

1128 
öt16_t
 
	gmaxMŸ‹
;

1129 
uöt8_t
 
	gi
;

1130 #i‡
deföed
(
DYNBALANCE
)

1133 
	#PIDMIX
(
X
,
Y
,
Z
Ë
rcComm™d
[
THROTTLE
] + 
axisPID
[
ROLL
]*X +áxisPID[
PITCH
]*Y + 
YAW_DIRECTION
 *áxisPID[
YAW
]*
	)
Z

1134 
	#SERVODIR
(
n
,
b
Ë((
c⁄f
.
£rvoC⁄f
[n].
øã
 & bË? -1 : 1)

	)

1137 #i‡
deföed
–
MY_PRIVATE_MIXING
 )

1138 #ö˛udê
MY_PRIVATE_MIXING


1139 #ñi‡
deföed
–
BI
 )

1140 
	gmŸ‹
[0] = 
PIDMIX
(+1, 0, 0);

1141 
	gmŸ‹
[1] = 
PIDMIX
(-1, 0, 0);

1142 
	g£rvo
[4] = (
SERVODIR
(4,2Ë* 
	gaxisPID
[
YAW
]Ë+ (SERVODIR(4,1Ë*áxisPID[
PITCH
]Ë+ 
gë_middÀ
(4);

1143 
	g£rvo
[5] = (
SERVODIR
(5,2Ë* 
	gaxisPID
[
YAW
]Ë+ (SERVODIR(5,1Ë*áxisPID[
PITCH
]Ë+ 
gë_middÀ
(5);

1144 #ñi‡
deföed
–
TRI
 )

1145 
	gmŸ‹
[0] = 
PIDMIX
( 0,+4/3, 0);

1146 
	gmŸ‹
[1] = 
PIDMIX
(-1,-2/3, 0);

1147 
	gmŸ‹
[2] = 
PIDMIX
(+1,-2/3, 0);

1148 
	g£rvo
[5] = (
SERVODIR
(5, 1Ë* 
	gaxisPID
[
YAW
]Ë+ 
gë_middÀ
(5);

1149 #ñi‡
deföed
–
QUADP
 )

1150 
	gmŸ‹
[0] = 
PIDMIX
( 0,+1,-1);

1151 
	gmŸ‹
[1] = 
PIDMIX
(-1, 0,+1);

1152 
	gmŸ‹
[2] = 
PIDMIX
(+1, 0,+1);

1153 
	gmŸ‹
[3] = 
PIDMIX
( 0,-1,-1);

1154 #ñi‡
deföed
–
QUADX
 )

1155 
	gmŸ‹
[0] = 
PIDMIX
(-1,+1,-1);

1156 
	gmŸ‹
[1] = 
PIDMIX
(-1,-1,+1);

1157 
	gmŸ‹
[2] = 
PIDMIX
(+1,+1,+1);

1158 
	gmŸ‹
[3] = 
PIDMIX
(+1,-1,-1);

1159 #ñi‡
deföed
–
Y4
 )

1160 
	gmŸ‹
[0] = 
PIDMIX
(+0,+1,-1);

1161 
	gmŸ‹
[1] = 
PIDMIX
(-1,-1, 0);

1162 
	gmŸ‹
[2] = 
PIDMIX
(+0,+1,+1);

1163 
	gmŸ‹
[3] = 
PIDMIX
(+1,-1, 0);

1164 #ñi‡
deföed
–
Y6
 )

1165 
	gmŸ‹
[0] = 
PIDMIX
(+0,+4/3,+1);

1166 
	gmŸ‹
[1] = 
PIDMIX
(-1,-2/3,-1);

1167 
	gmŸ‹
[2] = 
PIDMIX
(+1,-2/3,-1);

1168 
	gmŸ‹
[3] = 
PIDMIX
(+0,+4/3,-1);

1169 
	gmŸ‹
[4] = 
PIDMIX
(-1,-2/3,+1);

1170 
	gmŸ‹
[5] = 
PIDMIX
(+1,-2/3,+1);

1171 #ñi‡
deföed
–
HEX6
 )

1172 
	gmŸ‹
[0] = 
PIDMIX
(-7/8,+1/2,+1);

1173 
	gmŸ‹
[1] = 
PIDMIX
(-7/8,-1/2,-1);

1174 
	gmŸ‹
[2] = 
PIDMIX
(+7/8,+1/2,+1);

1175 
	gmŸ‹
[3] = 
PIDMIX
(+7/8,-1/2,-1);

1176 
	gmŸ‹
[4] = 
PIDMIX
(+0 ,-1 ,+1);

1177 
	gmŸ‹
[5] = 
PIDMIX
(+0 ,+1 ,-1);

1178 #ñi‡
deföed
–
HEX6X
 )

1179 
	gmŸ‹
[0] = 
PIDMIX
(-1/2,+7/8,+1);

1180 
	gmŸ‹
[1] = 
PIDMIX
(-1/2,-7/8,+1);

1181 
	gmŸ‹
[2] = 
PIDMIX
(+1/2,+7/8,-1);

1182 
	gmŸ‹
[3] = 
PIDMIX
(+1/2,-7/8,-1);

1183 
	gmŸ‹
[4] = 
PIDMIX
(-1 ,+0 ,-1);

1184 
	gmŸ‹
[5] = 
PIDMIX
(+1 ,+0 ,+1);

1185 #ñi‡
deföed
–
HEX6H
 )

1186 
	gmŸ‹
[0] = 
PIDMIX
(-1,+1,-1);

1187 
	gmŸ‹
[1] = 
PIDMIX
(-1,-1,+1);

1188 
	gmŸ‹
[2] = 
PIDMIX
(+ 1,+1,+1);

1189 
	gmŸ‹
[3] = 
PIDMIX
(+ 1,-1,-1);

1190 
	gmŸ‹
[4] = 
PIDMIX
(0 ,0 ,0);

1191 
	gmŸ‹
[5] = 
PIDMIX
(0 ,0 ,0);

1192 #ñi‡
deföed
–
OCTOX8
 )

1193 
	gmŸ‹
[0] = 
PIDMIX
(-1,+1,-1);

1194 
	gmŸ‹
[1] = 
PIDMIX
(-1,-1,+1);

1195 
	gmŸ‹
[2] = 
PIDMIX
(+1,+1,+1);

1196 
	gmŸ‹
[3] = 
PIDMIX
(+1,-1,-1);

1197 
	gmŸ‹
[4] = 
PIDMIX
(-1,+1,+1);

1198 
	gmŸ‹
[5] = 
PIDMIX
(-1,-1,-1);

1199 
	gmŸ‹
[6] = 
PIDMIX
(+1,+1,-1);

1200 
	gmŸ‹
[7] = 
PIDMIX
(+1,-1,+1);

1201 #ñi‡
deföed
–
OCTOFLATP
 )

1202 
	gmŸ‹
[0] = 
PIDMIX
(+7/10,-7/10,+1);

1203 
	gmŸ‹
[1] = 
PIDMIX
(-7/10,-7/10,+1);

1204 
	gmŸ‹
[2] = 
PIDMIX
(-7/10,+7/10,+1);

1205 
	gmŸ‹
[3] = 
PIDMIX
(+7/10,+7/10,+1);

1206 
	gmŸ‹
[4] = 
PIDMIX
(+0 ,-1 ,-1);

1207 
	gmŸ‹
[5] = 
PIDMIX
(-1 ,+0 ,-1);

1208 
	gmŸ‹
[6] = 
PIDMIX
(+0 ,+1 ,-1);

1209 
	gmŸ‹
[7] = 
PIDMIX
(+1 ,+0 ,-1);

1210 #ñi‡
deföed
–
OCTOFLATX
 )

1211 
	gmŸ‹
[0] = 
PIDMIX
(+1 ,-1/2,+1);

1212 
	gmŸ‹
[1] = 
PIDMIX
(-1/2,-1 ,+1);

1213 
	gmŸ‹
[2] = 
PIDMIX
(-1 ,+1/2,+1);

1214 
	gmŸ‹
[3] = 
PIDMIX
(+1/2,+1 ,+1);

1215 
	gmŸ‹
[4] = 
PIDMIX
(+1/2,-1 ,-1);

1216 
	gmŸ‹
[5] = 
PIDMIX
(-1 ,-1/2,-1);

1217 
	gmŸ‹
[6] = 
PIDMIX
(-1/2,+1 ,-1);

1218 
	gmŸ‹
[7] = 
PIDMIX
(+1 ,+1/2,-1);

1219 #ñi‡
deföed
–
VTAIL4
 )

1220 
	gmŸ‹
[0] = 
PIDMIX
(+0,+1, +1);

1221 
	gmŸ‹
[1] = 
PIDMIX
(-1, -1, +0);

1222 
	gmŸ‹
[2] = 
PIDMIX
(+0,+1, -1);

1223 
	gmŸ‹
[3] = 
PIDMIX
(+1, -1, -0);

1224 #ñi‡
deföed
–
FLYING_WING
 )

1226 i‡(!
	gf
.
	gARMED
) {

1227 
	g£rvo
[7] = 
MINCOMMAND
;

1229 
	g£rvo
[7] = 
c⁄°øö
(
rcComm™d
[
THROTTLE
], 
c⁄f
.
möthrŸée
, 
MAXTHROTTLE
);

1231 
	gmŸ‹
[0] = 
£rvo
[7];

1234 
	gi
=3; i<=4; i++) {

1235 i‡(
	gf
.
	gPASSTHRU_MODE
) {

1236 
	g£rvo
[
i
] = (
SERVODIR
(i,1Ë* 
	grcComm™d
[
PITCH
])*
	gPITCHRATE
 + (SERVODIR(i,2Ë*ÑcComm™d[
ROLL
])*
	gROLLRATE
;

1238 
	g£rvo
[
i
] = (
SERVODIR
(i,1Ë* 
	gaxisPID
[
PITCH
])*
	gPITCHRATE
 + (SERVODIR(i,2Ë*áxisPID[
ROLL
])*
	gROLLRATE
;

1241 
	g£rvo
[
i
] = (
öt32_t
Ë
£rvo
[i]*(£rvo[i]>=0 ? 
c⁄f
.
£rvoC⁄f
[i].
max
-c⁄f.£rvoC⁄f[i].
middÀ
:c⁄f.£rvoC⁄f[i].middÀ-c⁄f.£rvoC⁄f[i].
mö
)/500;

1242 
	g£rvo
[
i
] +
gë_middÀ
(i);

1244 #ñi‡
deföed
(
QUADWING
)

1246 
öt16_t
 
	grc_I≈ut
[2];

1247 i‡(!
	gf
.
	gPASSTHRU_MODE
){

1249 
	grc_I≈ut
[0] = 
axisPID
[
PITCH
]*0;

1250 
	grc_I≈ut
[1] = 
axisPID
[
YAW
] *0;

1251 
	gmŸ‹
[0] = 
PIDMIX
(-1,+1,-1);

1252 
	gmŸ‹
[1] = 
PIDMIX
(-1,-1,+1);

1253 
	gmŸ‹
[2] = 
PIDMIX
(+1,+1,+1);

1254 
	gmŸ‹
[3] = 
PIDMIX
(+1,-1,-1);

1257 
	grc_I≈ut
[0] = 
rcComm™d
[
PITCH
]*
PITCHRATE
;

1258 
	grc_I≈ut
[1] = 
rcComm™d
[
ROLL
] *
ROLLRATE
;

1259 
	gi
=0; i<4; i++Ë{ 
	gmŸ‹
[
i
] = 
rcComm™d
[
THROTTLE
]; }

1262 i‡(
	gf
.
	gPASSTHRU_MODE
) {

1263 
	grc_I≈ut
[0] = 0;

1264 
	grc_I≈ut
[1] = 0;

1268 
	gi
=3; i<=4; i++) {

1269 
	g£rvo
[
i
] = (
SERVODIR
(i,1Ë* 
	grc_I≈ut
[i-3]) + (SERVODIR(i,2) *Ñc_Input[i-3]);

1271 
	g£rvo
[3] = (
SERVODIR
(3,1Ë* 
	gaxisPID
[
PITCH
]Ë+ (SERVODIR(3,2Ë*áxisPID[
ROLL
]);

1272 
	g£rvo
[4] = (
SERVODIR
(4,1Ë* 
	gaxisPID
[
PITCH
]Ë+ (SERVODIR(4,2Ë*áxisPID[
ROLL
]);

1275 
	gmŸ‹
[0] = 
PIDMIX
(-1*
mode
,+1*mode,-1*mode);

1276 
	gmŸ‹
[1] = 
PIDMIX
(-1*
mode
,-1*mode,+1*mode);

1277 
	gmŸ‹
[2] = 
PIDMIX
(+1*
mode
,+1*mode,+1*mode);

1278 
	gmŸ‹
[3] = 
PIDMIX
(+1*
mode
,-1*mode,-1*mode);

1280 #ñi‡
deföed
–
AIRPLANE
 )

1285 i‡(!
	gf
.
	gARMED
) {

1286 
	g£rvo
[7] = 
MINCOMMAND
;

1288 
	g£rvo
[7] = 
c⁄°øö
(
rcComm™d
[
THROTTLE
], 
c⁄f
.
möthrŸée
, 
MAXTHROTTLE
);

1290 
	gmŸ‹
[0] = 
£rvo
[7];

1293 
öt16_t
 
	gÊ≠≥r⁄s
[2]={0,0};

1294 #i‡ 
deföed
(
FLAPPERONS
Ë&& deföed(
FLAPPERON_EP
)

1295 
öt8_t
 
	gÊ≠öv
[2] = 
FLAPPERON_INVERT
;

1296 
öt16_t
 
	gF_Endpoöt
[2] = 
FLAPPERON_EP
;

1297 
öt16_t
 
	gÊ≠
 =
MIDRC
-
c⁄°øö
(
rcD©a
[
FLAPPERONS
],
F_Endpoöt
[0],F_Endpoint[1]);

1300 #i‡ 
deföed
(
GPS
Ë&& deföed(
AUTOFLAPS
)

1301 i‡(
	gf
.
	gGPS_FIX
){

1302 
öt16_t
 
	gmaxÊ≠
 = 
MIDRC
 - 
F_Endpoöt
[0];

1303 i‡(
	gf
.
	gFS_MODE
) {

1304 
	gÊ≠
 = 
m≠
(
GPS_•ìd
, 
AUTOFLAPS_V_EXTENDED
,
AUTOFLAPS_V_RETRACTED
, 
maxÊ≠
, 0 );

1305 
	gÊ≠
 = 
c⁄°øö
(
Ê≠
,0, 
maxÊ≠
);

1307 i‡(
	gÊ≠
<0 && (
	gf
.
	gANGLE_MODE
 || f.
	gHORIZON_MODE
)) {

1308 
	gmaxÊ≠
 = ((
öt32_t
Ë
maxÊ≠
 * -
Ê≠
) / 500;

1309 
	gÊ≠
 = 
m≠
(
GPS_•ìd
, 
AUTOFLAPS_V_EXTENDED
,
AUTOFLAPS_V_RETRACTED
, 
maxÊ≠
, 0 );

1310 
	gÊ≠
 = 
c⁄°øö
(
Ê≠
,0, 
maxÊ≠
);

1315 
öt16_t
 
	g¶owFœps

Ê≠
;

1316 #i‡
deföed
(
FLAPSPEED
)

1317 i‡(
	g¶owFœps
 < 
	gÊ≠
 ){¶owFœps+=
FLAPSPEED
;}if(slowFlaps > flap){slowFlaps-=FLAPSPEED;}

1319 
	g¶owFœps
 = 
Ê≠
;

1321 
	gÊ≠
 = 
MIDRC
-(
c⁄°øö
(MIDRC-
¶owFœps
,
F_Endpoöt
[0],F_Endpoint[1]));

1322 
	gi
=0; i<2; i++){
	gÊ≠≥r⁄s
[
i
] = 
Ê≠
 * 
Ê≠öv
[i] ;}

1326 #i‡
deföed
(
FLAPS
)

1329 
öt16_t
 
	glFœp
 = 
gë_middÀ
(2);

1330 
	glFœp
 = 
c⁄°øö
(
lFœp
, 
c⁄f
.
£rvoC⁄f
[2].
mö
, c⁄f.£rvoC⁄f[2].
max
);

1331 
	glFœp
 = 
MIDRC
 - 
lFœp
;

1334 #i‡ 
deföed
(
GPS
Ë&& deföed(
AUTOFLAPS
)

1335 i‡(
	gf
.
	gGPS_FIX
){

1336 
öt16_t
 
	gmaxÊ≠
 = 
MIDRC
 - 
F_Endpoöt
[0];

1337 i‡(
	gf
.
	gFS_MODE
){

1338 
	glFœp
 = 
m≠
(
GPS_•ìd
, 
AUTOFLAPS_V_EXTENDED
,
AUTOFLAPS_V_RETRACTED
, 
maxÊ≠
, 0 );

1339 
	glFœp
 = 
c⁄°øö
(
lFœp
,0, 
maxÊ≠
);

1341 i‡(
	glFœp
<0 && (
	gf
.
	gANGLE_MODE
 || f.
	gHORIZON_MODE
)) {

1342 
	gmaxÊ≠
 = ((
öt32_t
Ë
maxÊ≠
 * -
lFœp
) / 500;

1343 
	glFœp
 = 
m≠
(
GPS_•ìd
, 
AUTOFLAPS_V_EXTENDED
,
AUTOFLAPS_V_RETRACTED
, 
maxÊ≠
, 0 );

1344 
	glFœp
 = 
c⁄°øö
(
lFœp
,0, 
maxÊ≠
);

1349 
öt16_t
 
	g¶ow_LFœps

lFœp
;

1350 #i‡
deföed
(
FLAPSPEED
)

1351 i‡(
	g¶ow_LFœps
 < 
	glFœp
 ){¶ow_LFœps+=
FLAPSPEED
;} if(slow_LFlaps >ÜFlap){slow_LFlaps-=FLAPSPEED;}

1353 
	g¶ow_LFœps
 = 
lFœp
;

1355 
	g£rvo
[2] = ((
öt32_t
)
c⁄f
.
£rvoC⁄f
[2].
øã
 * 
¶ow_LFœps
)/100L;

1356 
	g£rvo
[2] +
MIDRC
;

1370 if(
	gf
.
	gPASSTHRU_MODE
){

1371 
	g£rvo
[3] = (
öt32_t
Ë
rcComm™d
[
ROLL
] * (500 - (rcComm™d[ROLL]<0 ? -
Ê≠≥r⁄s
[0]: flapperons[0])) / 500 + flapperons[0];

1372 
	g£rvo
[4] = (
öt32_t
Ë
rcComm™d
[
ROLL
] * (500 - (rcComm™d[ROLL]<0 ? -
Ê≠≥r⁄s
[1]: flapperons[1])) / 500 + flapperons[1];

1373 
	g£rvo
[5] = 
rcComm™d
[
YAW
];

1374 
	g£rvo
[6] = 
rcComm™d
[
PITCH
];

1377 
	g£rvo
[3] = (
öt32_t
Ë
axisPID
[
ROLL
] * (500 - (axisPID[ROLL]<0 ? -
Ê≠≥r⁄s
[0]: flapperons[0])) / 500 + flapperons[0];

1378 
	g£rvo
[4] = (
öt32_t
Ë
axisPID
[
ROLL
] * (500 - (axisPID[ROLL]<0 ? -
Ê≠≥r⁄s
[1]: flapperons[1])) / 500 + flapperons[1];

1379 
	g£rvo
[5] = 
axisPID
[
YAW
];

1380 
	g£rvo
[6] = 
axisPID
[
PITCH
];

1382 
	gi
=3;i<7;i++) {

1386 
öt32_t
 
	g∑th
 = (öt32_t)
c⁄f
.
£rvoC⁄f
[
i
].
øã
 * 
£rvo
[i];

1388 
	g£rvo
[
i
] = (
∑th
*’©h>=0 ? 
c⁄f
.
£rvoC⁄f
[i].
max
-c⁄f.£rvoC⁄f[i].
middÀ
:c⁄f.£rvoC⁄f[i].middÀ-c⁄f.£rvoC⁄f[i].
mö
))/(100L*500L);

1389 
	g£rvo
[
i
] +
gë_middÀ
(i);

1393 #i‡
deföed
 
PATRIKE


1394 
	g£rvo
[5] = 
£rvo
[3];

1397 #ñi‡
deföed
–
SINGLECOPTER
 )

1407 
	gi
=3;i<7;i++) {

1408 
	g£rvo
[
i
] = (
axisPID
[
YAW
] * 
SERVODIR
(i,2)Ë+ (
	gaxisPID
[(6-i)>>1] * SERVODIR(i,1));

1409 
	g£rvo
[
i
] +
gë_middÀ
(i);

1411 
	gmŸ‹
[0] = 
rcComm™d
[
THROTTLE
];

1412 #ñi‡
deföed
–
DUALCOPTER
 )

1419 
	gi
=4;i<6;i++) {

1420 
	g£rvo
[
i
] = 
axisPID
[5-i] * 
SERVODIR
(i,1);

1421 
	g£rvo
[
i
] +
gë_middÀ
(i);

1423 
	gmŸ‹
[0] = 
PIDMIX
(0,0,-1);

1424 
	gmŸ‹
[1] = 
PIDMIX
(0,0,+1);

1426 #ñi‡
deföed
–
HELICOPTER
 )

1429 
öt16_t
 
	ghñiRﬁl
,
	ghñiNick
;

1430 
öt16_t
 
	gcﬁlR™ge
[3] = 
COLLECTIVE_RANGE
;

1431 
öt16_t
 
	gcﬁÀ˘ive
;

1432 #ifde‡
GOVERNOR_P


1433 
öt16_t
 
	gœ°_cﬁÀ˘ive
 = 0, 
	gdñè_cﬁÀ˘ive
 = 0, 
	ggovîn‹ThrŸée
 = 0;

1440 
öt16_t
 
	gcﬁÀ˘
 = 
rcD©a
[
COLLECTIVE_PITCH
] - (1500 + 
cﬁlR™ge
[1]);

1441 i‡(
	gcﬁÀ˘
>0) {

1442 
	gcﬁÀ˘ive
 = 
cﬁÀ˘
 * (
cﬁlR™ge
[2]*0.01);

1444 
	gcﬁÀ˘ive
 = 
cﬁÀ˘
 * (
cﬁlR™ge
[0]*0.01);

1451 #ifde‡
GOVERNOR_P


1452 
	gdñè_cﬁÀ˘ive
 = 
cﬁÀ˘ive
 - 
œ°_cﬁÀ˘ive
;

1453 
	gœ°_cﬁÀ˘ive
 = 
cﬁÀ˘ive
;

1454 i‡(! 
	gf
.
	gARMED
 || ! 
	grcO±i⁄s
[
BOXGOV
] || (
	grcComm™d
[
THROTTLE
] < 
	gc⁄f
.
	gmöthrŸée
) )

1455 
	ggovîn‹ThrŸée
 = 0;

1456 i‡(
	gdñè_cﬁÀ˘ive
 > 0) {

1457 
	ggovîn‹ThrŸée
 +
dñè_cﬁÀ˘ive
 * 
c⁄f
.
govîn‹P
;

1459 i‡(
	grcComm™d
[
THROTTLE
] + 
	ggovîn‹ThrŸée
 > 
	gMAXTHROTTLE
Ëgovîn‹ThrŸéê
MAXTHROTTLE
 - 
rcComm™d
[THROTTLE];

1461 
uöt8_t
 
	gd
 = 0;

1462 i‡(! (++
	gd
 % 
	gc⁄f
.
	ggovîn‹D
)Ë
	ggovîn‹ThrŸée
 -= 10;

1464 i‡(
	ggovîn‹ThrŸée
 < 0) governorThrottle = 0;

1467 if(
	gf
.
	gPASSTHRU_MODE
){

1468 
	ghñiRﬁl
 = 
rcComm™d
[
ROLL
] ;

1469 
	ghñiNick
 = 
rcComm™d
[
PITCH
];

1471 
	ghñiRﬁl
 = 
axisPID
[
ROLL
];

1472 
	ghñiNick
 = 
axisPID
[
PITCH
];

1476 
öt16_t
 
	gcR™ge
[2] = 
CONTROL_RANGE
;

1477 
	ghñiRﬁl
*
cR™ge
[0]*0.01;

1478 
	ghñiNick
*
cR™ge
[1]*0.01;

1485 
öt16_t
 
	gacmd
 = 
abs
(
cﬁÀ˘ive
Ë- 
c⁄f
.
yawCﬁlPªcompDódb™d
;

1486 i‡(
	gacmd
 > 0 ){

1487 
	g£rvo
[5] = (
axisPID
[
YAW
] * 
SERVODIR
(5,1)Ë+ 
	gc⁄f
.
	g£rvoC⁄f
[5].
	gmiddÀ
 + (
acmd
 * c⁄f.
	gyawCﬁlPªcomp
)/10;

1489 
	g£rvo
[5] = (
axisPID
[
YAW
] * 
SERVODIR
(5,1)Ë+ 
	gc⁄f
.
	g£rvoC⁄f
[5].
	gmiddÀ
;

1491 #i‡
YAWMOTOR


1492 
	g£rvo
[5] = 
c⁄°øö
(
£rvo
[5], 
c⁄f
.
£rvoC⁄f
[5].
mö
, c⁄f.£rvoC⁄f[5].
max
);

1493 i‡(
	grcComm™d
[
THROTTLE
]<
	gc⁄f
.
	gmöthrŸée
 || !
	gf
.
	gARMED
Ë{
	g£rvo
[5] = 
MINCOMMAND
;}

1495 i‡(!
	gf
.
	gARMED
){

1496 
	g£rvo
[7] = 
MINCOMMAND
;

1498 
	g£rvo
[7] = 
rcComm™d
[
THROTTLE
];

1499 #ifde‡
GOVERNOR_P


1500 
	g£rvo
[7] +
govîn‹ThrŸée
;

1502 
	g£rvo
[7] = 
c⁄°øö
(
£rvo
[7], 
c⁄f
.
möthrŸée
, 
MAXTHROTTLE
);

1504 #i‚de‡
HELI_USE_SERVO_FOR_THROTTLE


1505 
	gmŸ‹
[0] = 
£rvo
[7];

1506 #i‡
YAWMOTOR


1507 
	gmŸ‹
[1] = 
£rvo
[5];

1513 
	#HñiXPIDMIX
(
Z
,
Y
,
X
Ë–(
cﬁlR™ge
[1] + 
cﬁÀ˘ive
)*Z + 
hñiNick
*Y + 
hñiRﬁl
*X)/10

	)

1514 #ifde‡
HELI_120_CCPM


1515 
öt8_t
 
	gnickMix
[3] = 
SERVO_NICK
;

1516 
öt8_t
 
	gÀ·Mix
[3] = 
SERVO_LEFT
;

1517 
öt8_t
 
	grightMix
[3]
SERVO_RIGHT
;

1519 
	g£rvo
[3] = 
HñiXPIDMIX
––
SERVODIR
(3,4Ë* 
nickMix
[0]), SERVODIR(3,2) *ÇickMix[1], SERVODIR(3,1) *ÇickMix[2]);

1520 
	g£rvo
[4] = 
HñiXPIDMIX
––
SERVODIR
(4,4Ë* 
À·Mix
[0]), SERVODIR(4,2) *ÜeftMix[1], SERVODIR(4,1) *ÜeftMix[2]);

1521 
	g£rvo
[6] = 
HñiXPIDMIX
––
SERVODIR
(6,4Ë* 
rightMix
[0]),SERVODIR(6,2) *ÑightMix[1],SERVODIR(6,1) *ÑightMix[2]);

1524 #ifde‡
HELI_90_DEG


1525 
	g£rvo
[3] = 
HñiXPIDMIX
–+0, (
c⁄f
.
£rvoC⁄f
[3].
øã
/10), -0);

1526 
	g£rvo
[4] = 
HñiXPIDMIX
–+0, +0, (
c⁄f
.
£rvoC⁄f
[4].
øã
/10));

1527 
	g£rvo
[6] = 
HñiXPIDMIX
–(
c⁄f
.
£rvoC⁄f
[6].
øã
/10), +0, +0);

1529 
	g£rvo
[3] +
gë_middÀ
(3);

1530 
	g£rvo
[4] +
gë_middÀ
(4);

1531 
	g£rvo
[6] +
gë_middÀ
(6);

1532 #ñi‡
deföed
–
GIMBAL
 )

1533 
	gi
=0;i<2;i++) {

1534 
	g£rvo
[
i
] = ((
öt32_t
)
c⁄f
.
£rvoC⁄f
[i].
øã
 * 
©t
.
™gÀ
[1-i]) /50L;

1535 
	g£rvo
[
i
] +
gë_middÀ
(i);

1544 #i‡
deföed
(
SERVO_TILT
)

1545 
	g£rvo
[0] = 
gë_middÀ
(0);

1546 
	g£rvo
[1] = 
gë_middÀ
(1);

1547 i‡(
	grcO±i⁄s
[
BOXCAMSTAB
]) {

1548 
	g£rvo
[0] +((
öt32_t
)
c⁄f
.
£rvoC⁄f
[0].
øã
 * 
©t
.
™gÀ
[
PITCH
]) /50L;

1549 
	g£rvo
[1] +((
öt32_t
)
c⁄f
.
£rvoC⁄f
[1].
øã
 * 
©t
.
™gÀ
[
ROLL
]) /50L;

1553 #ifde‡
SERVO_MIX_TILT


1554 
öt16_t
 
	g™gÀP
 = 
gë_middÀ
(0Ë- 
MIDRC
;

1555 
öt16_t
 
	g™gÀR
 = 
gë_middÀ
(1Ë- 
MIDRC
;

1556 i‡(
	grcO±i⁄s
[
BOXCAMSTAB
]) {

1557 
	g™gÀP
 +((
öt32_t
)
c⁄f
.
£rvoC⁄f
[0].
øã
 * 
©t
.
™gÀ
[
PITCH
]) /50L;

1558 
	g™gÀR
 +((
öt32_t
)
c⁄f
.
£rvoC⁄f
[1].
øã
 * 
©t
.
™gÀ
[
ROLL
]) /50L;

1560 
	g£rvo
[0] = 
MIDRC
+
™gÀP
-
™gÀR
;

1561 
	g£rvo
[1] = 
MIDRC
-
™gÀP
-
™gÀR
;

1565 #i‡
deföed
(
CAMTRIG
)

1567 
	#CAM_TIME_LOW
 
c⁄f
.
£rvoC⁄f
[2].
middÀ


	)

1568 
uöt8_t
 
	gˇmCy˛e
 = 0;

1569 
uöt8_t
 
	gˇmSèã
 = 0;

1570 
uöt32_t
 
	gˇmTime
 = 0;

1571 
uöt32_t
 
	g˘Low
;

1572 i‡(
	gˇmCy˛e
==1) {

1573 i‡(
ˇmSèã
 == 0) {

1574 
ˇmSèã
 = 1;

1575 
	gˇmTime
 = 
mûlis
();

1576 } i‡(
	gˇmSèã
 == 1) {

1577 i‡–(
mûlis
(Ë- 
ˇmTime
Ë> 
CAM_TIME_HIGH
 ) {

1578 
ˇmSèã
 = 2;

1579 
	gˇmTime
 = 
mûlis
();

1580 if(
	gCAM_TIME_LOW
 < 
	gRC_CHANS
) {

1581 
	g˘Low
 = 
c⁄°øö
((
rcD©a
[
CAM_TIME_LOW
]-1000)/4, 30, 250);

1582 
	g˘Low
 *
˘Low
;

1583 } 
	g˘Low
 = 
CAM_TIME_LOW
;

1586 i‡(((
mûlis
(Ë- 
	gˇmTime
Ë> 
	g˘Low
Ë|| !
	grcO±i⁄s
[
BOXCAMTRIG
] ) {

1587 
	gˇmSèã
 = 0;

1588 
	gˇmCy˛e
 = 0;

1592 i‡(
	grcO±i⁄s
[
BOXCAMTRIG
]Ë
	gˇmCy˛e
=1;

1593 
	g£rvo
[2] =(
ˇmSèã
==1Ë? 
c⁄f
.
£rvoC⁄f
[2].
max
 : c⁄f.£rvoC⁄f[2].
mö
;

1594 
	g£rvo
[2] = (
£rvo
[2]-1500)*
SERVODIR
(2,1)+1500;

1600 #i‡
deföed
(
SERVO
)

1601 
	gi
=
SERVO_START
-1; i<
	gSERVO_END
; i++) {

1602 if(
	gi
 < 2) {

1603 
	g£rvo
[
i
] = 
m≠
(
£rvo
[i], 1020,2000, 
c⁄f
.
£rvoC⁄f
[i].
mö
, c⁄f.£rvoC⁄f[i].
max
);

1605 #i‡
deföed
(
HELICOPTER
Ë&& (
YAWMOTOR
)

1606 if(
	gi
 != 5)

1608 
£rvo
[
i
] = 
c⁄°øö
(£rvo[i], 
c⁄f
.
£rvoC⁄f
[i].
mö
, c⁄f.£rvoC⁄f[i].
max
);

1610 #i‡
deföed
(
A0_A1_PIN_HEX
Ë&& (
NUMBER_MOTOR
 =6Ë&& deföed(
PROMINI
)

1611 
	g£rvo
[3] = 
£rvo
[0];

1612 
	g£rvo
[4] = 
£rvo
[1];

1614 #i‡
deföed
(
TRI
Ë&& deföed(
MEGA_HW_PWM_SERVOS
Ë&& deföed(
MEGA
)

1615 
	g£rvo
[5] = 
c⁄°øö
(
£rvo
[5], 
c⁄f
.
£rvoC⁄f
[5].
mö
, c⁄f.£rvoC⁄f[5].
max
);

1616 
	g£rvo
[3] = 
£rvo
[5];

1621 #ifde‡
VOLTAGEDROP_COMPENSATION


1623 #i‡(
VBATNOMINAL
 == 84)

1624 
	#GOV_R_NUM
 24

	)

1625 
öt8_t
 
	gg
[] = { 0,4,8,12,17,21,25,30,34,39,44,49,54,59,65,70,76,81,87,93,99,106,112,119,126 };

1626 #ñi‡(
VBATNOMINAL
 == 126)

1627 
	#GOV_R_NUM
 36

	)

1628 
öt8_t
 
	gg
[] = { 0,3,5,8,11,14,17,19,22,25,28,31,34,38,41,44,47,51,54,58,61,65,68,72,76,79,83,87,91,95,99,104,108,112,117,121,126 };

1629 #ñi‡(
VBATNOMINAL
 == 252)

1630 
	#GOV_R_NUM
 72

	)

1631 
öt8_t
 
	gg
[] = { 0,1,3,4,5,7,8,9,11,12,14,15,17,18,19,21,22,24,25,27,28,30,31,33,34,36,38,39,41,

1634 #ñi‡(
VBATNOMINAL
 == 255)

1635 
	#GOV_R_NUM
 73

	)

1636 
öt8_t
 
	gg
[] = { 0,1,3,4,5,7,8,9,11,12,14,15,16,18,19,21,22,24,25,26,28,29,31,33,34,36,37,39,40,

1639 #ñi‡(
VBATNOMINAL
 == 129)

1640 
	#GOV_R_NUM
 37

	)

1641 
öt8_t
 
	gg
[] = { 0,3,5,8,11,13,16,19,22,25,28,31,34,37,40,43,46,49,53,56,59,63,66,70,74,77,81,85,

1643 #ñi‡(
VBATNOMINAL
 == 168)

1644 
	#GOV_R_NUM
 48

	)

1645 
öt8_t
 
	gg
[] = { 0,2,4,6,8,10,12,14,17,19,21,23,25,28,30,32,34,37,39,42,44,47,49,52,54,57,59,62,

1650 
uöt8_t
 
	gv
 = 
c⁄°øö
–
VBATNOMINAL
 - c⁄°øö(
™Æog
.
vb©
, 
c⁄f
.
vb©Àvñ_¸ô
, VBATNOMINAL), 0, 
GOV_R_NUM
);

1651 
	gi
 = 0; i < 
	gNUMBER_MOTOR
; i++) {

1652 
	gmŸ‹
[
i
] +––(
öt32_t
)(
mŸ‹
[i]-1000Ë* (öt32_t)
g
[
v
] ) )/ 500;

1657 
	gmaxMŸ‹
=
mŸ‹
[0];

1658 
	gi
=1; i< 
	gNUMBER_MOTOR
; i++)

1659 i‡(
	gmŸ‹
[
i
]>
	gmaxMŸ‹
ËmaxMŸ‹=
mŸ‹
[i];

1660 
	gi
=0; i< 
	gNUMBER_MOTOR
; i++) {

1661 i‡(
	gmaxMŸ‹
 > 
	gMAXTHROTTLE
)

1662 
	gmŸ‹
[
i
] -
maxMŸ‹
 - 
MAXTHROTTLE
;

1663 
	gmŸ‹
[
i
] = 
c⁄°øö
(
mŸ‹
[i], 
c⁄f
.
möthrŸée
, 
MAXTHROTTLE
);

1664 i‡((
	grcD©a
[
THROTTLE
] < 
	gMINCHECK
Ë&& !
	gf
.
	gBARO_MODE
){

1665 #i‚de‡
MOTOR_STOP


1666 
	gmŸ‹
[
i
] = 
c⁄f
.
möthrŸée
;

1668 
	gmŸ‹
[
i
] = 
MINCOMMAND
;

1669 
	gf
.
	gMOTORS_STOPPED
=1;

1672 
	gf
.
	gMOTORS_STOPPED
=0;}

1673 i‡(!
	gf
.
	gARMED
)

1674 
	gmŸ‹
[
i
] = 
MINCOMMAND
;

1675 i‡(!
	gf
.
	gARMED
) {

1676 
	gmŸ‹
[
i
] = 
mŸ‹_dißrmed
[i];

1681 #i‡(
LOG_VALUES
 >3Ë|| 
deföed
(
POWERMETER_SOFT
)

1683 
uöt32_t
 
	gœ°Ród
 = 
cuºítTime
;

1684 
uöt16_t
 
	gamp
;

1685 
uöt32_t
 
	gampsum
, 
	gampus
;

1691 
uöt16_t
 
	gam≥ªs
[64] = { 0, 2, 6, 15, 30, 52, 82,123,

1700 i‡(
	g™Æog
.
	gvb©
 > 
	gNO_VBAT
) {

1701 
	gampsum
 = 0;

1702 
	gi
 =0;i<
	gNUMBER_MOTOR
;i++) {

1703 
	gamp
 = 
am≥ªs
[ ((
mŸ‹
[
i
] - 1000)>>4Ë] / 
™Æog
.
vb©
;

1704 
	gampus
 = ( (
cuºítTime
-
œ°Ród
Ë* (
uöt32_t
)
amp
 * (uöt32_t)
c⁄f
.
pöt2ma
 ) / 
PLEVELDIVSOFT
;

1705 #i‡(
LOG_VALUES
 >= 3)

1706 
	gpMëî
[
i
]+
ampus
;

1708 #i‡
deföed
(
POWERMETER_SOFT
)

1709 
	gampsum
 +
ampus
;

1712 #i‡
deföed
(
POWERMETER_SOFT
)

1713 
	gpMëî
[
PMOTOR_SUM
]+
ampsum
 / 
NUMBER_MOTOR
;

1716 
	gœ°Ród
 = 
cuºítTime
;

	@Output.h

1 #i‚de‡
OUTPUT_H_


2 
	#OUTPUT_H_


	)

4 
uöt8_t
 
PWM_PIN
[8];

6 
öôOuçut
();

7 
mixTabÀ
();

8 
wrôeSîvos
();

9 
wrôeMŸ‹s
();

	@PIDControllers.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"ty≥s.h
"

5 
	~"IMU.h
"

6 
	~"EEPROM.h
"

7 
	~"Mu…iWii.h
"

8 
	~"PIDC⁄åﬁÀrs.h
"

10 
öt32_t
 
	g¥›
 = 0;

11 
uöt8_t
 
	gaxis
, 
	gi
;

12 
öt16_t
 
	gîr‹AngÀ
;

13 
öt16_t
 
	gdñè
;

14 
öt16_t
 
	gPTîm
 = 0, 
	gITîm
 = 0, 
	gDTîm
, 
	gPTîmACC
, 
	gITîmACC
;

16 
öt16_t
 
	gœ°Gyro
[2] = { 0, 0 };

24 
	gPIDC⁄åﬁÀrsCœss
::
	$öô
()

27 
	}
}

29 
PIDC⁄åﬁÀrsCœss
::
	$O√
(
öt16_t
 
îr‹AngÀI
[2], i¡16_à
îr‹GyroI
[3], 
öt32_t
 
îr‹GyroI_YAW
, 
uöt8_t
 
dynP8
[2], uöt8_à
dynD8
[2]) {

30 
öt16_t
 
dñè1
[2], 
dñè2
[2];

31 
öt16_t
 
îr‹
;

32 
öt16_t
 
rc
;

34 i‡(
f
.
HORIZON_MODE
Ë
¥›
 = 
	`mö
(
	`max
(
	`abs
(
rcComm™d
[
PITCH
]),ábs‘cComm™d[
ROLL
])), 512);

37 
axis
 = 0;áxis < 2;áxis++) {

38 
rc
 = 
rcComm™d
[
axis
] << 1;

39 
îr‹
 = 
rc
 - 
imu
.
gyroD©a
[
axis
];

40 
îr‹GyroI
[
axis
] = 
	`c⁄°øö
”º‹GyroI[axis] + 
îr‹
, -16000, +16000);

41 i‡(
	`abs
(
imu
.
gyroD©a
[
axis
]Ë> 640Ë
îr‹GyroI
[axis] = 0;

43 
ITîm
 = (
îr‹GyroI
[
axis
] >> 7Ë* 
c⁄f
.
pid
[axis].
I8
 >> 6;

45 
PTîm
 = 
	`mul
(
rc
, 
c⁄f
.
pid
[
axis
].
P8
) >> 6;

47 i‡(
f
.
ANGLE_MODE
 || f.
HORIZON_MODE
) {

49 #i‡
GPS


50 
îr‹AngÀ
 = 
	`c⁄°øö
(
rc
 + 
GPS_™gÀ
[
axis
], -500, +500Ë- 
©t
.
™gÀ
[axis] + 
c⁄f
.
™gÀTrim
[axis];

52 
îr‹AngÀ
 = 
	`c⁄°øö
(
rc
, -500, +500Ë- 
©t
.
™gÀ
[
axis
] + 
c⁄f
.
™gÀTrim
[axis];

59 
îr‹AngÀI
[
axis
] = 
	`c⁄°øö
”º‹AngÀI[axis] + 
îr‹AngÀ
, -10000, +10000);

61 
PTîmACC
 = 
	`mul
(
îr‹AngÀ
, 
c⁄f
.
pid
[
PIDLEVEL
].
P8
) >> 7;

63 
öt16_t
 
limô
 = 
c⁄f
.
pid
[
PIDLEVEL
].
D8
 * 5;

64 
PTîmACC
 = 
	`c⁄°øö
(PTîmACC, -
limô
, +limit);

66 
ITîmACC
 = 
	`mul
(
îr‹AngÀI
[
axis
], 
c⁄f
.
pid
[
PIDLEVEL
].
I8
) >> 12;

68 
ITîm
 = 
ITîmACC
 + ((ITîm - ITîmACCË* 
¥›
 >> 9);

69 
PTîm
 = 
PTîmACC
 + ((PTîm - PTîmACCË* 
¥›
 >> 9);

72 
PTîm
 -
	`mul
(
imu
.
gyroD©a
[
axis
], 
dynP8
[axis]) >> 6;

74 
dñè
 = 
imu
.
gyroD©a
[
axis
] - 
œ°Gyro
[axis];

75 
œ°Gyro
[
axis
] = 
imu
.
gyroD©a
[axis];

76 
DTîm
 = 
dñè1
[
axis
] + 
dñè2
[axis] + 
dñè
;

77 
dñè2
[
axis
] = 
dñè1
[axis];

78 
dñè1
[
axis
] = 
dñè
;

80 
DTîm
 = 
	`mul
(DTîm, 
dynD8
[
axis
]) >> 5;

82 
axisPID
[
axis
] = 
PTîm
 + 
ITîm
 - 
DTîm
;

86 
	#GYRO_P_MAX
 300

	)

87 
	#GYRO_I_MAX
 250

	)

89 
rc
 = 
	`mul
(
rcComm™d
[
YAW
], (2 * 
c⁄f
.
yawR©e
 + 30)) >> 5;

91 
îr‹
 = 
rc
 - 
imu
.
gyroD©a
[
YAW
];

92 
îr‹GyroI_YAW
 +
	`mul
(
îr‹
, 
c⁄f
.
pid
[
YAW
].
I8
);

93 
îr‹GyroI_YAW
 = 
	`c⁄°øö
”º‹GyroI_YAW, 2 - ((
öt32_t
) 1 << 28), -2 + ((int32_t) 1 << 28));

94 i‡(
	`abs
(
rc
Ë> 50Ë
îr‹GyroI_YAW
 = 0;

96 
PTîm
 = 
	`mul
(
îr‹
, 
c⁄f
.
pid
[
YAW
].
P8
) >> 6;

97 #i‚de‡
COPTER_WITH_SERVO


98 
öt16_t
 
limô
 = 
GYRO_P_MAX
 - 
c⁄f
.
pid
[
YAW
].
D8
;

99 
PTîm
 = 
	`c⁄°øö
(PTîm, -
limô
, +limit);

102 
ITîm
 = 
	`c⁄°øö
((
öt16_t
Ë(
îr‹GyroI_YAW
 >> 13), -
GYRO_I_MAX
, +GYRO_I_MAX);

104 
axisPID
[
YAW
] = 
PTîm
 + 
ITîm
;

105 
	}
}

108 
	gPIDC⁄åﬁÀrsCœss
::
	$AÀxK
(
öt32_t
 
îr‹GyroI
[3]) {

109 
öt16_t
 
dñè1
[3], 
dñè2
[2];

110 
öt16_t
 
œ°Eº‹
[3] = { 0, 0, 0 };

111 
öt16_t
 
dñèSum
;

112 
öt16_t
 
AngÀR©eTmp
, 
R©eEº‹
;

114 
	#GYRO_I_MAX
 256

	)

115 
	#ACC_I_MAX
 256

	)

116 
¥›
 = 
	`mö
(
	`max
(
	`abs
(
rcComm™d
[
PITCH
]),ábs‘cComm™d[
ROLL
])), 500);

119 
axis
 = 0;áxis<3;áxis++) {

121 i‡((
f
.
ANGLE_MODE
 || f.
HORIZON_MODE
Ë&& 
axis
<2) {

123 #i‡
GPS


124 
îr‹AngÀ
 = 
	`c⁄°øö
((
rcComm™d
[
axis
] << 1Ë+ 
GPS_™gÀ
[axis], -500, +500Ë- 
©t
.
™gÀ
[axis] + 
c⁄f
.
™gÀTrim
[axis];

126 
îr‹AngÀ
 = 
	`c⁄°øö
((
rcComm™d
[
axis
] << 1), -500, +500Ë- 
©t
.
™gÀ
[axis] + 
c⁄f
.
™gÀTrim
[axis];

129 i‡(
axis
 == 2) {

130 
AngÀR©eTmp
 = (((
öt32_t
Ë(
c⁄f
.
yawR©e
 + 27Ë* 
rcComm™d
[2]) >> 5);

133 i‡(!
f
.
ANGLE_MODE
) {

134 
AngÀR©eTmp
 = ((
öt32_t
Ë(
c⁄f
.
rﬁlPôchR©e
 + 27Ë* 
rcComm™d
[
axis
]) >> 4;

135 i‡(
f
.
HORIZON_MODE
) {

137 
AngÀR©eTmp
 +((
öt32_t
Ë
îr‹AngÀ
 * 
c⁄f
.
pid
[
PIDLEVEL
].
I8
) >> 8;

140 
AngÀR©eTmp
 = ((
öt32_t
Ë
îr‹AngÀ
 * 
c⁄f
.
pid
[
PIDLEVEL
].
P8
)>>4;

148 
R©eEº‹
 = 
AngÀR©eTmp
 - 
imu
.
gyroD©a
[
axis
];

151 
PTîm
 = ((
öt32_t
Ë
R©eEº‹
 * 
c⁄f
.
pid
[
axis
].
P8
) >> 7;

158 
îr‹GyroI
[
axis
] +(((
öt32_t
Ë
R©eEº‹
 * 
cy˛eTime
Ë>> 11Ë* 
c⁄f
.
pid
[axis].
I8
;

161 
îr‹GyroI
[
axis
] = 
	`c⁄°øö
”º‹GyroI[axis], (
öt32_t
Ë-
GYRO_I_MAX
 << 13, (int32_t) +GYRO_I_MAX << 13);

162 
ITîm
 = 
îr‹GyroI
[
axis
] >> 13;

165 
dñè
 = 
R©eEº‹
 - 
œ°Eº‹
[
axis
];

166 
œ°Eº‹
[
axis
] = 
R©eEº‹
;

170 
dñè
 = ((
öt32_t
Ëdñè * ((
uöt16_t
Ë0xFFFF / (
cy˛eTime
 >> 4))) >> 6;

172 
dñèSum
 = 
dñè1
[
axis
] + 
dñè2
[axis] + 
dñè
;

173 
dñè2
[
axis
] = 
dñè1
[axis];

174 
dñè1
[
axis
] = 
dñè
;

178 
DTîm
 = ((
öt32_t
Ë
dñèSum
*
c⁄f
.
pid
[
axis
].
D8
) >> 8;

180 
axisPID
[
axis
] = 
PTîm
 + 
ITîm
 + 
DTîm
;

182 
	}
}

185 
	gPIDC⁄åﬁÀrsCœss
::
	$ReWrôe
(
öt32_t
 
îr‹GyroI
[3]) {

186 
öt16_t
 
dñè1
[3], 
dñè2
[2];

187 
öt16_t
 
œ°Eº‹
[3] = { 0, 0, 0 };

188 
öt16_t
 
dñèSum
;

189 
öt16_t
 
AngÀR©eTmp
, 
R©eEº‹
;

191 
	#GYRO_I_MAX
 256

	)

192 
	#ACC_I_MAX
 256

	)

194 
¥›
 = 
	`mö
(
	`max
(
	`abs
(
rcComm™d
[
PITCH
]),ábs‘cComm™d[
ROLL
])), 500);

197 
axis
 = 0;áxis<3;áxis++) {

198 
uöt8_t
 
øã
 = 0;

200 i‡(
axis
 == 2) {

201 
øã
 = 
c⁄f
.
yawR©e
;

203 i‡(
axis
 == 1) {

204 
øã
 = 
c⁄f
.
rﬁlPôchR©e
;

206 i‡(
axis
 == 0) {

207 
øã
 = 
c⁄f
.
rﬁlPôchR©e
;

210 i‡(
axis
 == 2) {

211 
AngÀR©eTmp
 = (((
öt32_t
Ë(
øã
 + 27Ë* 
rcComm™d
[2]) >> 5);

214 #i‡
GPS


215 
îr‹AngÀ
 = 
	`c⁄°øö
(2 * 
rcComm™d
[
axis
] + 
GPS_™gÀ
[axis], -500, +500Ë- 
©t
.
™gÀ
[axis] + 
c⁄f
.
™gÀTrim
[axis];

217 
îr‹AngÀ
 = 
	`c⁄°øö
(2 * 
rcComm™d
[
axis
], -500, +500Ë- 
©t
.
™gÀ
[axis] + 
c⁄f
.
™gÀTrim
[axis];

220 i‡(!
f
.
ANGLE_MODE
) {

221 
AngÀR©eTmp
 = ((
öt32_t
Ë(
øã
 + 27Ë* 
rcComm™d
[
axis
]) >> 4;

222 i‡(
f
.
HORIZON_MODE
) {

224 
AngÀR©eTmp
 +((
öt32_t
Ë
îr‹AngÀ
 * 
c⁄f
.
pid
[
PIDLEVEL
].
I8
) >> 8;

228 
AngÀR©eTmp
 = ((
öt32_t
Ë
îr‹AngÀ
 * 
c⁄f
.
pid
[
PIDLEVEL
].
P8
) >> 4;

236 
R©eEº‹
 = 
AngÀR©eTmp
 - (
imu
.
gyroD©a
[
axis
] / 4);

239 
PTîm
 = ((
öt32_t
Ë
R©eEº‹
 * 
c⁄f
.
pid
[
axis
].
P8
) >> 7;

246 
îr‹GyroI
[
axis
] +(((
öt32_t
Ë
R©eEº‹
 * 
cy˛eTime
Ë>> 11Ë* 
c⁄f
.
pid
[axis].
I8
;

249 
îr‹GyroI
[
axis
] = 
	`c⁄°øö
”º‹GyroI[axis], (
öt32_t
Ë-
GYRO_I_MAX
 << 13, (int32_t) +GYRO_I_MAX << 13);

250 
ITîm
 = 
îr‹GyroI
[
axis
] >> 13;

253 
dñè
 = 
R©eEº‹
 - 
œ°Eº‹
[
axis
];

254 
œ°Eº‹
[
axis
] = 
R©eEº‹
;

258 
dñè
 = ((
öt32_t
Ëdñè * ((
uöt16_t
Ë0xFFFF / (
cy˛eTime
 >> 4))) >> 6;

260 
dñèSum
 = 
dñè1
[
axis
] + 
dñè2
[axis] + 
dñè
;

261 
dñè2
[
axis
] = 
dñè1
[axis];

262 
dñè1
[
axis
] = 
dñè
;

266 
DTîm
 = ((
öt32_t
Ë
dñèSum
*
c⁄f
.
pid
[
axis
].
D8
) >> 8;

268 
axisPID
[
axis
] = 
PTîm
 + 
ITîm
 + 
DTîm
;

270 
	}
}

272 
	gPIDC⁄åﬁÀrsCœss
::
	$LuxFlﬂt
(
öt32_t
 
îr‹GyroI
[3]) {

274 
	}
}

276 
PIDC⁄åﬁÀrsCœss
 
PIDC⁄åﬁÀrs
;

	@PIDControllers.h

3 #i‚de‡
_PIDCONTROLLERS_h


4 
	#_PIDCONTROLLERS_h


	)

6 #i‡
deföed
(
ARDUINO
) && ARDUINO >= 100

7 
	~"¨duöo.h
"

9 
	~"WProgøm.h
"

12 ˛as†
	cPIDC⁄åﬁÀrsCœss


14 
	m¥Ÿe˘ed
:

17 
public
:

18 
öô
();

19 
O√
(
öt16_t
 
îr‹AngÀI
[2], i¡16_à
îr‹GyroI
[3], 
öt32_t
 
îr‹GyroI_YAW
, 
uöt8_t
 
dynP8
[2], uöt8_à
dynD8
[2]);

20 
AÀxK
(
öt32_t
 
îr‹GyroI
[3]);

21 
ReWrôe
(
öt32_t
 
îr‹GyroI
[3]);

22 
LuxFlﬂt
(
öt32_t
 
îr‹GyroI
[3]);

25 
PIDC⁄åﬁÀrsCœss
 
PIDC⁄åﬁÀrs
;

	@Protocol.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"ty≥s.h
"

5 
	~"EEPROM.h
"

6 
	~"LCD.h
"

7 
	~"Ouçut.h
"

8 
	~"GPS.h
"

9 
	~"Mu…iWii.h
"

10 
	~"Sîül.h
"

11 
	~"PrŸocﬁ.h
"

12 
	~"RX.h
"

14 #i‡
deföed
(
CLEANFLIGHT
)

15 
	~"èrgë.h
"

16 
	~"vîsi⁄.h
"

17 
	~"∂©f‹m.h
"

22 
	#MSP_VERSION
 0

	)

27 
	#MSP_PRIVATE
 1

28 

	)

30 #i‡
deföed
(
CLEANFLIGHT
)

33 
	#MSP_PROTOCOL_VERSION
 0

	)

34 
	#API_VERSION_MAJOR
 1

35 
	#API_VERSION_MINOR
 5

36 

	)

37 
	#API_VERSION_LENGTH
 2

	)

39 
	#MULTIWII_IDENTIFIER
 "MWII";

	)

40 
	#CLEANFLIGHT_IDENTIFIER
 "CLFL"

	)

41 
	#BASEFLIGHT_IDENTIFIER
 "BAFL";

	)

43 
	#FLIGHT_CONTROLLER_IDENTIFIER_LENGTH
 4

	)

44 c⁄° *
	gÊightC⁄åﬁÀrIdítifõr
 = 
CLEANFLIGHT_IDENTIFIER
;

46 
	#FLIGHT_CONTROLLER_VERSION_LENGTH
 3

	)

47 
	#FLIGHT_CONTROLLER_VERSION_MASK
 0xFFF

	)

49 c⁄° *
	gbﬂrdIdítifõr
 = 
TARGET_BOARD_IDENTIFIER
;

50 
	#BOARD_IDENTIFIER_LENGTH
 4

51 
	#BOARD_HARDWARE_REVISION_LENGTH
 2

	)

53 
	#MSP_API_VERSION
 1

54 
	#MSP_FC_VARIANT
 2

55 
	#MSP_FC_VERSION
 3

56 
	#MSP_BOARD_INFO
 4

57 
	#MSP_BUILD_INFO
 5

58 

	)

62 
	#MSP_CHANNEL_FORWARDING
 32

63 
	#MSP_SET_CHANNEL_FORWARDING
 33

64 

	)

65 
	#MSP_MODE_RANGES
 34

66 
	#MSP_SET_MODE_RANGE
 35

67 

	)

68 
	#MSP_FEATURE
 36

	)

69 
	#MSP_SET_FEATURE
 37

	)

71 
	#MSP_BOARD_ALIGNMENT
 38

	)

72 
	#MSP_SET_BOARD_ALIGNMENT
 39

	)

74 
	#MSP_CURRENT_METER_CONFIG
 40

	)

75 
	#MSP_SET_CURRENT_METER_CONFIG
 41

	)

77 
	#MSP_MIXER
 42

	)

78 
	#MSP_SET_MIXER
 43

	)

80 
	#MSP_RX_CONFIG
 44

	)

81 
	#MSP_SET_RX_CONFIG
 45

	)

83 
	#MSP_LED_COLORS
 46

	)

84 
	#MSP_SET_LED_COLORS
 47

	)

86 
	#MSP_LED_STRIP_CONFIG
 48

	)

87 
	#MSP_SET_LED_STRIP_CONFIG
 49

	)

89 
	#MSP_RSSI_CONFIG
 50

	)

90 
	#MSP_SET_RSSI_CONFIG
 51

	)

92 
	#MSP_ADJUSTMENT_RANGES
 52

	)

93 
	#MSP_SET_ADJUSTMENT_RANGE
 53

	)

96 
	#MSP_CF_SERIAL_CONFIG
 54

	)

97 
	#MSP_SET_CF_SERIAL_CONFIG
 55

	)

99 
	#MSP_VOLTAGE_METER_CONFIG
 56

	)

100 
	#MSP_SET_VOLTAGE_METER_CONFIG
 57

	)

102 
	#MSP_SONAR_ALTITUDE
 58

103 

	)

104 
	#MSP_PID_CONTROLLER
 59

	)

105 
	#MSP_SET_PID_CONTROLLER
 60

	)

109 
	#MSP_RX_MAP
 64

110 
	#MSP_SET_RX_MAP
 65

111 

	)

114 
	#MSP_BF_CONFIG
 66

115 
	#MSP_SET_BF_CONFIG
 67

116 

	)

117 
	#MSP_REBOOT
 68

118 

	)

120 
	#MSP_BF_BUILD_INFO
 69

121 

	)

122 
	#MSP_DATAFLASH_SUMMARY
 70

123 
	#MSP_DATAFLASH_READ
 71

124 
	#MSP_DATAFLASH_ERASE
 72

125 

	)

127 
	#MSP_UID
 160

128 
	#MSP_ACC_TRIM
 240

129 
	#MSP_SET_ACC_TRIM
 239

130 
	#MSP_GPSSVINFO
 164

131 
	#MSP_GPSDEBUGINFO
 166

133 

	)

135 
	#MSP_IDENT
 100

136 
	#MSP_STATUS
 101

137 
	#MSP_RAW_IMU
 102

138 
	#MSP_SERVO
 103

139 
	#MSP_MOTOR
 104

140 
	#MSP_RC
 105

141 
	#MSP_RAW_GPS
 106

142 
	#MSP_COMP_GPS
 107

143 
	#MSP_ATTITUDE
 108

144 
	#MSP_ALTITUDE
 109

145 
	#MSP_ANALOG
 110

146 
	#MSP_RC_TUNING
 111

147 
	#MSP_PID
 112

148 
	#MSP_BOX
 113

149 
	#MSP_MISC
 114

150 
	#MSP_MOTOR_PINS
 115

151 
	#MSP_BOXNAMES
 116

152 
	#MSP_PIDNAMES
 117

153 
	#MSP_WP
 118

154 
	#MSP_BOXIDS
 119

155 
	#MSP_SERVO_CONF
 120

156 

	)

157 
	#MSP_PIPAK
 188

	)

159 
	#MSP_NAV_STATUS
 121

160 
	#MSP_NAV_CONFIG
 122

161 

	)

162 
	#MSP_CELLS
 130

163 

	)

164 
	#MSP_SET_RAW_RC
 200

165 
	#MSP_SET_RAW_GPS
 201

166 
	#MSP_SET_PID
 202

167 
	#MSP_SET_BOX
 203

168 
	#MSP_SET_RC_TUNING
 204

169 
	#MSP_ACC_CALIBRATION
 205

170 
	#MSP_MAG_CALIBRATION
 206

171 
	#MSP_SET_MISC
 207

172 
	#MSP_RESET_CONF
 208

173 
	#MSP_SET_WP
 209

174 
	#MSP_SELECT_SETTING
 210

175 
	#MSP_SET_HEAD
 211

176 
	#MSP_SET_SERVO_CONF
 212

177 
	#MSP_SET_MOTOR
 214

178 
	#MSP_SET_NAV_CONFIG
 215

179 

	)

180 
	#MSP_SET_ACC_TRIM
 239

181 
	#MSP_ACC_TRIM
 240

182 
	#MSP_BIND
 241

183 

	)

184 
	#MSP_EEPROM_WRITE
 250

185 

	)

186 
	#MSP_DEBUGMSG
 253

187 
	#MSP_DEBUG
 254

188 

	)

189 
	#MSP_SUPRESS_DATA_FROM_RX
 150

	)

190 
	#MSP_GYRO_CALIBRATION
 151

	)

193 #ifde‡
DEBUGMSG


194 
	#DEBUG_MSG_BUFFER_SIZE
 128

	)

195 
	gdebug_buf
[
DEBUG_MSG_BUFFER_SIZE
];

196 
uöt8_t
 
	ghód_debug
;

197 
uöt8_t
 
	gèû_debug
;

198 
uöt8_t
 
debugmsg_avaûabÀ
();

199 
debugmsg_£rülize
(
uöt8_t
 
l
);

202 
uöt32_t
 
	gíabÀdFótuªs
 = 0;

204 
uöt8_t
 
	gCURRENTPORT
 = 0;

205 
uöt8_t
 
	gUSE_CLEANFLIGHT_REPLIES
 = 0;

207 
	#INBUF_SIZE
 64

	)

208 
uöt8_t
 
	göBuf
[
INBUF_SIZE
][
UART_NUMBER
];

209 
uöt8_t
 
	gchecksum
[
UART_NUMBER
];

210 
uöt8_t
 
	gödRX
[
UART_NUMBER
];

211 
uöt8_t
 
	gcmdMSP
[
UART_NUMBER
];

213 
evÆu©eOthîD©a
(
uöt8_t
 
§
);

214 
evÆu©eComm™d
(
uöt8_t
 
c
);

216 
uöt8_t
 
	$ªad8
() {

217  
öBuf
[
ödRX
[
CURRENTPORT
]++][CURRENTPORT]&0xff;

218 
	}
}

219 
uöt16_t
 
	$ªad16
() {

220 
uöt16_t
 
t
 = 
	`ªad8
();

221 
t
+(
uöt16_t
)
	`ªad8
()<<8;

222  
t
;

223 
	}
}

224 
uöt32_t
 
	$ªad32
() {

225 
uöt32_t
 
t
 = 
	`ªad16
();

226 
t
+(
uöt32_t
)
	`ªad16
()<<16;

227  
t
;

228 
	}
}

230 
	$£rülize8
(
uöt8_t
 
a
) {

231 
	`SîülSîülize
(
CURRENTPORT
,
a
);

232 
checksum
[
CURRENTPORT
] ^
a
;

233 
	}
}

234 
	$£rülize16
(
öt16_t
 
a
) {

235 
	`£rülize8
((
a
 ) & 0xFF);

236 
	`£rülize8
((
a
>>8) & 0xFF);

237 
	}
}

238 
	$£rülize32
(
uöt32_t
 
a
) {

239 
	`£rülize8
((
a
 ) & 0xFF);

240 
	`£rülize8
((
a
>> 8) & 0xFF);

241 
	`£rülize8
((
a
>>16) & 0xFF);

242 
	`£rülize8
((
a
>>24) & 0xFF);

243 
	}
}

245 
	$hódSîülRe•⁄£
(
uöt8_t
 
îr
, uöt8_à
s
) {

246 
	`£rülize8
('$');

247 
	`£rülize8
('M');

248 
	`£rülize8
(
îr
 ? '!' : '>');

249 
checksum
[
CURRENTPORT
] = 0;

250 
	`£rülize8
(
s
);

251 
	`£rülize8
(
cmdMSP
[
CURRENTPORT
]);

252 
	}
}

254 
	$hódSîülRïly
(
uöt8_t
 
s
) {

255 
	`hódSîülRe•⁄£
(0, 
s
);

256 
	}
}

258 
	$hódSîülEº‹
() {

259 
	`hódSîülRe•⁄£
(1,0);

260 
	}
}

262 
	$èûSîülRïly
() {

263 
	`£rülize8
(
checksum
[
CURRENTPORT
]);
	`U¨tSídD©a
(CURRENTPORT);

264 
	}
}

266 
	$£rülizeNames
(
PGM_P
 
s
) {

267 
	`hódSîülRïly
(
	`°æí_P
(
s
));

268 
PGM_P
 
c
 = 
s
; 
	`pgm_ªad_byã
(c); c++)

269 
	`£rülize8
(
	`pgm_ªad_byã
(
c
));

270 
	`èûSîülRïly
();

271 
	}
}

273 
__©åibuã__
 ((
noölöe
)Ë
	$s_°ru˘_w
(
uöt8_t
 *
cb
,uöt8_à
siz
) {

274 
siz
--Ë*
cb
++ = 
	`ªad8
();

275 
	}
}

277 
	$s_°ru˘_∑πül
(
uöt8_t
 *
cb
,uöt8_à
siz
) {

278 
siz
--Ë
	`£rülize8
(*
cb
++);

279 
	}
}

281 
	$s_°ru˘
(
uöt8_t
 *
cb
,uöt8_à
siz
) {

282 
	`hódSîülRïly
(
siz
);

283 
	`s_°ru˘_∑πül
(
cb
,
siz
);

284 
	`èûSîülRïly
();

285 
	}
}

287 
	$m•Ack
() {

288 
	`hódSîülRïly
(0);
	`èûSîülRïly
();

289 
	}
}

291 
	eMSP_¥Ÿocﬁ_byãs
 {

292 
	mIDLE
,

293 
	mHEADER_START
,

294 
	mHEADER_M
,

295 
	mHEADER_ARROW
,

296 
	mHEADER_SIZE
,

297 
	mHEADER_CMD


300 
	$m•_push
(
uöt8_t
 
u¨t
, uöt8_à
m•
){

301 
CURRENTPORT
=
u¨t
;

302 
cmdMSP
[
CURRENTPORT
]=
m•
;

303 
	`evÆu©eComm™d
(
m•
);

304 
	}
}

306 
	$„©uªSë
(
uöt32_t
 
mask
) {

307 
íabÀdFótuªs
 |
mask
;

308 
	}
}

310 
	$£rülCom
() {

311 
uöt8_t
 
c
,
cc
,
p‹t
,
°©e
,
byãsTXBuff
;

312 
uöt8_t
 
off£t
[
UART_NUMBER
];

313 
uöt8_t
 
d©aSize
[
UART_NUMBER
];

314 
uöt8_t
 
c_°©e
[
UART_NUMBER
];

315 
uöt32_t
 
timeMax
;

317 
timeMax
 = 
	`mi¸os
();

318 
p‹t
=0;p‹t<
UART_NUMBER
;port++) {

319 
CURRENTPORT
=
p‹t
;

320 
	#RX_COND


	)

321 #i‡
	`deföed
(
SERIAL_RX
Ë&& (
UART_NUMBER
 > 1)

322 
	#RX_COND
 && (
RX_SERIAL_PORT
 !
p‹t
)

	)

324 
cc
 = 
	`SîülAvaûabÀ
(
p‹t
);

325 
cc
-- 
RX_COND
) {

326 
byãsTXBuff
 = 
	`SîülU£dTXBuff
(
p‹t
);

327 i‡(
byãsTXBuff
 > 
TX_BUFFER_SIZE
 - 50 ) ;

328 
c
 = 
	`SîülRód
(
p‹t
);

329 #ifde‡
SUPPRESS_ALL_SERIAL_MSP


330 
	`evÆu©eOthîD©a
(
c
);

332 
°©e
 = 
c_°©e
[
p‹t
];

334 i‡(
°©e
 =
IDLE
) {

335 i‡(
c
=='$'Ë
°©e
 = 
HEADER_START
;

336 
	`evÆu©eOthîD©a
(
c
);

337 } i‡(
°©e
 =
HEADER_START
) {

338 
°©e
 = (
c
=='M'Ë? 
HEADER_M
 : 
IDLE
;

339 } i‡(
°©e
 =
HEADER_M
) {

340 
°©e
 = (
c
=='<'Ë? 
HEADER_ARROW
 : 
IDLE
;

341 } i‡(
°©e
 =
HEADER_ARROW
) {

342 i‡(
c
 > 
INBUF_SIZE
) {

343 
°©e
 = 
IDLE
;

346 
d©aSize
[
p‹t
] = 
c
;

347 
checksum
[
p‹t
] = 
c
;

348 
off£t
[
p‹t
] = 0;

349 
ödRX
[
p‹t
] = 0;

350 
°©e
 = 
HEADER_SIZE
;

351 } i‡(
°©e
 =
HEADER_SIZE
) {

352 
cmdMSP
[
p‹t
] = 
c
;

353 
checksum
[
p‹t
] ^
c
;

354 
°©e
 = 
HEADER_CMD
;

355 } i‡(
°©e
 =
HEADER_CMD
) {

356 i‡(
off£t
[
p‹t
] < 
d©aSize
[port]) {

357 
checksum
[
p‹t
] ^
c
;

358 
öBuf
[
off£t
[
p‹t
]++][p‹t] = 
c
;

360 i‡(
checksum
[
p‹t
] =
c
)

361 
	`evÆu©eComm™d
(
cmdMSP
[
p‹t
]);

362 
°©e
 = 
IDLE
;

363 
cc
 = 0;

366 
c_°©e
[
p‹t
] = 
°©e
;

369 #i‡
	`deföed
(
GPS_SERIAL
)

370 i‡(
GPS_SERIAL
 =
p‹t
) {

371 
uöt32_t
 
GPS_œ°_‰ame_£í
;

372 i‡(
	`GPS_√wFøme
(
c
)) {

374 i‡(
GPS_upd©e
 == 1) GPS_update = 0; GPS_update = 1;

375 
GPS_œ°_‰ame_£í
 = 
timeMax
;

376 
GPS_Føme
 = 1;

377 
GPS_FAIL_timî
=
	`mûlis
();

381 i‡((
timeMax
 - 
GPS_œ°_‰ame_£í
) > 1200000) {

383 
f
.
GPS_FIX
 = 0;

384 
GPS_numS©
 = 0;

387 i‡(
	`mi¸os
()-
timeMax
>250) ;

392 
	}
}

394 
	$evÆu©eComm™d
(
uöt8_t
 
c
) {

395 
uöt32_t
 
i
, 
tmp
 = 0, 
junk
;

396 
uöt8_t
 
zczxczxczxc
 = 0;

397 c⁄° *
buûd
 = 
__DATE__
;

399 
c
) {

404 #i‡
	`deföed
(
CLEANFLIGHT
)

405 
MSP_API_VERSION
:

406 
	`hódSîülRïly
(1 + 
API_VERSION_LENGTH
);

407 
	`£rülize8
(
MSP_PROTOCOL_VERSION
);

408 
	`£rülize8
(
API_VERSION_MAJOR
);

409 
	`£rülize8
(
API_VERSION_MINOR
);

410 
	`èûSîülRïly
();

412 
USE_CLEANFLIGHT_REPLIES
 = 1;

415 
MSP_FC_VARIANT
:

416 
	`hódSîülRïly
(
FLIGHT_CONTROLLER_IDENTIFIER_LENGTH
);

418 
i
 = 0; i < 
FLIGHT_CONTROLLER_IDENTIFIER_LENGTH
; i++) {

419 
	`£rülize8
(
ÊightC⁄åﬁÀrIdítifõr
[
i
]);

421 
	`èûSîülRïly
();

424 
MSP_FC_VERSION
:

425 
	`hódSîülRïly
(
FLIGHT_CONTROLLER_VERSION_LENGTH
);

427 
	`£rülize8
(
FC_VERSION_MAJOR
);

428 
	`£rülize8
(
FC_VERSION_MINOR
);

429 
	`£rülize8
(
FC_VERSION_PATCH_LEVEL
);

430 
	`èûSîülRïly
();

434 
MSP_BOARD_INFO
:

435 
	`hódSîülRïly
(

436 
BOARD_IDENTIFIER_LENGTH
 +

437 
BOARD_HARDWARE_REVISION_LENGTH


439 
i
 = 0; i < 
BOARD_IDENTIFIER_LENGTH
; i++) {

440 
	`£rülize8
(
bﬂrdIdítifõr
[
i
]);

446 
	`£rülize16
(0);

449 
	`èûSîülRïly
();

453 
MSP_BF_BUILD_INFO
:

454 
	`hódSîülRïly
(11 + 4 + 4);

455 
i
 = 0; i < 11; i++)

456 
	`£rülize8
(
buûd
[
i
]);

457 
	`£rülize32
(0);

458 
	`£rülize32
(0);

459 
	`èûSîülRïly
();

461 
MSP_BUILD_INFO
:

462 
	`hódSîülRïly
(11 + 4 + 4);

463 
i
 = 0; i < 11; i++)

464 
	`£rülize8
(
buûd
[
i
]);

465 
	`£rülize32
(0);

466 
	`£rülize32
(0);

485 
	`èûSîülRïly
();

488 
MSP_SUPRESS_DATA_FROM_RX
:

489 
su¥ess_d©a_‰om_rx
 = 
	`ªad8
();

491 
	`hódSîülRïly
(1);

492 
	`£rülize8
((
uöt8_t
)
su¥ess_d©a_‰om_rx
);

493 
	`èûSîülRïly
();

496 
MSP_SET_RAW_RC
:

497 
	`s_°ru˘_w
((
uöt8_t
*)&
rcSîül
,16);

498 
rcSîülCou¡
 = 150;

500 
MSP_SET_PID
:

501 
	`m•Ack
();

502 
	`s_°ru˘_w
((
uöt8_t
*)&
c⁄f
.
pid
[0].
P8
,3*
PIDITEMS
);

504 
MSP_SET_BOX
:

505 
	`m•Ack
();

506 #i‡
EXTAUX


507 
	`s_°ru˘_w
((
uöt8_t
*)&
c⁄f
.
a˘iv©e
[0],
CHECKBOXITEMS
*4);

509 
	`s_°ru˘_w
((
uöt8_t
*)&
c⁄f
.
a˘iv©e
[0],
CHECKBOXITEMS
*2);

512 
MSP_SET_RC_TUNING
:

513 
	`m•Ack
();

514 
	`s_°ru˘_w
((
uöt8_t
*)&
c⁄f
.
rcR©e8
,7);

516 #i‡!
	`deföed
(
DISABLE_SETTINGS_TAB
)

517 
MSP_SET_MISC
:

519 
uöt16_t
 
a
,
b
,
c
,
d
,
e
,
f
;

520 
uöt32_t
 
g
;

521 
uöt16_t
 
h
;

522 
uöt8_t
 
i
,
j
,
k
,
l
;

523 } 
£t_misc
;

524 
	`m•Ack
();

525 
	`s_°ru˘_w
((
uöt8_t
*)&
£t_misc
,22);

526 #i‡
	`deföed
(
POWERMETER
)

527 
c⁄f
.
powîTriggî1
 = 
£t_misc
.
a
 / 
PLEVELSCALE
;

529 
c⁄f
.
möthrŸée
 = 
£t_misc
.
b
;

530 #ifde‡
FAILSAFE


531 
c⁄f
.
Áûß„_thrŸée
 = 
£t_misc
.
e
;

533 #i‡
MAG


534 
c⁄f
.
mag_de˛ö©i⁄
 = 
£t_misc
.
h
;

536 #i‡
	`deföed
(
VBAT
)

537 
c⁄f
.
vb©sˇÀ
 = 
£t_misc
.
i
;

538 
c⁄f
.
vb©Àvñ_w¨n1
 = 
£t_misc
.
j
;

539 
c⁄f
.
vb©Àvñ_w¨n2
 = 
£t_misc
.
k
;

540 
c⁄f
.
vb©Àvñ_¸ô
 = 
£t_misc
.
l
;

543 
MSP_MISC
:

545 #i‡
	`deföed
(
CLEANFLIGHT
)

546 
uöt16_t
 
a
, 
b
, 
c
, 
d
, 
e
;

547 
uöt8_t
 
f
;

548 
uöt8_t
 
g
;

549 
uöt8_t
 
h
;

551 
uöt8_t
 
i
;

552 
uöt8_t
 
j
;

553 
uöt8_t
 
k
;

555 
uöt16_t
 
l
;

557 
uöt8_t
 
m
, 
n
, 
o
, 
p
;

559 
uöt16_t
 
a
, 
b
, 
c
, 
d
, 
e
, 
f
;

560 
uöt32_t
 
g
;

561 
uöt16_t
 
h
;

562 
uöt8_t
 
i
, 
j
, 
k
, 
l
;

564 } 
misc
;

565 
misc
.
a
 = 
ötPowîTriggî1
;

566 
misc
.
b
 = 
c⁄f
.
möthrŸée
;

567 
misc
.
c
 = 
MAXTHROTTLE
;

568 
misc
.
d
 = 
MINCOMMAND
;

569 #ifde‡
FAILSAFE


570 
misc
.
e
 = 
c⁄f
.
Áûß„_thrŸée
;

572 
misc
.
e
 = 0;

575 #i‡
	`deföed
(
CLEANFLIGHT
)

576 #i‡
GPS


584 
misc
.
f
 = 0;

585 
misc
.
g
 = 1;

586 
misc
.
h
 = 0;

592 
misc
.
i
 = 0;

593 
misc
.
j
 = 0;

594 
misc
.
k
 = 0;

596 #i‡
MAG


597 
misc
.
l
 = 
c⁄f
.
mag_de˛ö©i⁄
;

599 
misc
.
l
 = 0;

601 #ifde‡
VBAT


602 
misc
.
m
 = 
c⁄f
.
vb©sˇÀ
;

603 
misc
.
n
 = 
c⁄f
.
vb©Àvñ_w¨n1
;

604 
misc
.
o
 = 
c⁄f
.
vb©Àvñ_w¨n2
;

605 
misc
.
p
 = 
c⁄f
.
vb©Àvñ_¸ô
;

607 
misc
.
m
 = 0; misc.
n
 = 0; misc.
o
 = 0; misc.
p
 = 0;

610 
	`s_°ru˘
((
uöt8_t
*Ë&
misc
, 32);

612 #ifde‡
LOG_PERMANENT


613 
misc
.
f
 = 
∂og
.
¨m
;

614 
misc
.
g
 = 
∂og
.
li„time
 + (∂og.
¨med_time
 / 1000000);

616 
misc
.
f
 = 0; misc.
g
 =0;

618 #i‡
MAG


619 
misc
.
h
 = 
c⁄f
.
mag_de˛ö©i⁄
;

621 
misc
.
h
 = 0;

623 #ifde‡
VBAT


624 
misc
.
i
 = 
c⁄f
.
vb©sˇÀ
;

625 
misc
.
j
 = 
c⁄f
.
vb©Àvñ_w¨n1
;

626 
misc
.
k
 = 
c⁄f
.
vb©Àvñ_w¨n2
;

627 
misc
.
l
 = 
c⁄f
.
vb©Àvñ_¸ô
;

629 
misc
.
i
 = 0;misc.
j
 = 0;misc.
k
 = 0;misc.
l
 = 0;

631 
	`s_°ru˘
((
uöt8_t
*)&
misc
,22);

636 
MSP_SET_MOTOR
:

637 
	`m•Ack
();

638 
	`s_°ru˘_w
((
uöt8_t
*)&
mŸ‹_dißrmed
,16);

641 #ifde‡
MULTIPLE_CONFIGURATION_PROFILES


642 
MSP_SELECT_SETTING
:

643 if(!
f
.
ARMED
) {

644 
globÆ_c⁄f
.
cuºítSë
 = 
	`ªad8
();

645 if(
globÆ_c⁄f
.
cuºítSë
>2) global_conf.currentSet = 0;

646 
	`wrôeGlobÆSë
(0);

647 
	`ªadEEPROM
();

649 
	`m•Ack
();

652 
MSP_SET_HEAD
:

653 
	`m•Ack
();

654 
	`s_°ru˘_w
((
uöt8_t
*)&
magHﬁd
,2);

656 
MSP_IDENT
:

658 
uöt8_t
 
v
,
t
,
m•_v
;

659 
uöt32_t
 
ˇp
;

660 } 
id
;

661 
id
.
v
 = 
VERSION
;

662 
id
.
t
 = 
MULTITYPE
;

663 
id
.
m•_v
 = 
MSP_VERSION
;

664 
id
.
ˇp
 = (0+
BIND_CAPABLE
)|
DYNBAL
<<2|
FLAP
<<3|
NAVCAP
<<4|
EXTAUX
<<5|((
uöt32_t
)
NAVI_VERSION
<<28);

665 
	`s_°ru˘
((
uöt8_t
*)&
id
,7);

667 
MSP_STATUS
:

669 
uöt16_t
 
cy˛eTime
,
i2c_îr‹s_cou¡
,
£ns‹
;

670 
uöt32_t
 
Êag
;

671 
uöt8_t
 
£t
;

672 } 
°
;

673 
°
.
cy˛eTime
 = cycleTime;

674 
°
.
i2c_îr‹s_cou¡
 = i2c_errors_count;

675 
°
.
£ns‹
 = 
ACC
|
BARO
<<1|
MAG
<<2|
GPS
<<3|
SONAR
<<4;

676 #i‡
ACC


677 if(
f
.
ANGLE_MODE
Ë
tmp
 |1<<
BOXANGLE
;

678 if(
f
.
HORIZON_MODE
Ë
tmp
 |1<<
BOXHORIZON
;

680 #i‡
BARO
 && (!
	`deföed
(
SUPPRESS_BARO_ALTHOLD
))

681 if(
f
.
BARO_MODE
Ë
tmp
 |1<<
BOXBARO
;

683 if(
f
.
MAG_MODE
Ë
tmp
 |1<<
BOXMAG
;

684 #i‡!
	`deföed
(
FIXEDWING
)

685 #i‡
	`deföed
(
HEADFREE
)

686 if(
f
.
HEADFREE_MODE
Ë
tmp
 |1<<
BOXHEADFREE
;

687 if(
rcO±i⁄s
[
BOXHEADADJ
]Ë
tmp
 |= 1<<BOXHEADADJ;

690 #i‡
	`deföed
(
SERVO_TILT
Ë|| deföed(
GIMBAL
)|| deföed(
SERVO_MIX_TILT
)

691 if(
rcO±i⁄s
[
BOXCAMSTAB
]Ë
tmp
 |= 1<<BOXCAMSTAB;

693 #i‡
	`deföed
(
CAMTRIG
)

694 if(
rcO±i⁄s
[
BOXCAMTRIG
]Ë
tmp
 |= 1<<BOXCAMTRIG;

696 #i‡
GPS


697 
f
.
GPS_mode
) {

698 
GPS_MODE_HOLD
:

699 
tmp
 |1<<
BOXGPSHOLD
;

701 
GPS_MODE_RTH
:

702 
tmp
 |1<<
BOXGPSHOME
;

704 
GPS_MODE_NAV
:

705 
tmp
 |1<<
BOXGPSNAV
;

708 #i‡
	`deföed
(
FIXEDWING
)

709 if(
f
.
CRUISE_MODE
Ë
tmp
 |1<<
BOXCRUISE
;

712 #i‡
	`deföed
(
FIXEDWING
Ë|| deföed(
HELICOPTER
)

713 if(
f
.
PASSTHRU_MODE
Ë
tmp
 |1<<
BOXPASSTHRU
;

715 #i‡
	`deföed
(
BUZZER
)

716 if(
rcO±i⁄s
[
BOXBEEPERON
]Ë
tmp
 |= 1<<BOXBEEPERON;

718 #i‡
	`deföed
(
LED_FLASHER
)

719 if(
rcO±i⁄s
[
BOXLEDMAX
]Ë
tmp
 |= 1<<BOXLEDMAX;

720 if(
rcO±i⁄s
[
BOXLEDLOW
]Ë
tmp
 |= 1<<BOXLEDLOW;

722 #i‡
	`deföed
(
LANDING_LIGHTS_DDR
)

723 if(
rcO±i⁄s
[
BOXLLIGHTS
]Ë
tmp
 |= 1<<BOXLLIGHTS;

725 #i‡
	`deföed
(
VARIOMETER
)

726 if(
rcO±i⁄s
[
BOXVARIO
]Ë
tmp
 |= 1<<BOXVARIO;

728 #i‡
	`deföed
(
INFLIGHT_ACC_CALIBRATION
)

729 if(
rcO±i⁄s
[
BOXCALIB
]Ë
tmp
 |= 1<<BOXCALIB;

731 #i‡
	`deföed
(
GOVERNOR_P
)

732 if(
rcO±i⁄s
[
BOXGOV
]Ë
tmp
 |= 1<<BOXGOV;

734 #i‡
	`deföed
(
OSD_SWITCH
)

735 if(
rcO±i⁄s
[
BOXOSD
]Ë
tmp
 |= 1<<BOXOSD;

737 #i‡
	`deföed
(
INFLIGHT_PID_TUNING
)

738 i‡(
f
.
PIDTUNE_MODE
Ë
tmp
 |1 << 
BOXPIDTUNE
;

740 #i‡
SONAR


741 i‡(
f
.
SONAR_MODE
Ë
tmp
 |1 << 
BOXSONAR
;

743 if(
f
.
ARMED
Ë
tmp
 |1<<
BOXARM
;

744 
°
.
Êag
 = 
tmp
;

745 
°
.
£t
 = 
globÆ_c⁄f
.
cuºítSë
;

746 
	`s_°ru˘
((
uöt8_t
*)&
°
,11);

748 
MSP_RAW_IMU
:

749 #i‡
	`deföed
(
DYNBALANCE
)

750 
uöt8_t
 
axis
=0;axis<3;axis++Ë{
imu
.
gyroD©a
[axis]=imu.
gyroADC
[axis];imu.
accSmoŸh
[axis]imu.
accADC
[axis];}

752 
	`s_°ru˘
((
uöt8_t
*)&
imu
,18);

754 
MSP_SERVO
:

755 
	`s_°ru˘
((
uöt8_t
*)&
£rvo
,16);

757 
MSP_SERVO_CONF
:

758 
	`s_°ru˘
((
uöt8_t
*)&
c⁄f
.
£rvoC⁄f
[0].
mö
,56);

760 
MSP_SET_SERVO_CONF
:

761 
	`m•Ack
();

762 
	`s_°ru˘_w
((
uöt8_t
*)&
c⁄f
.
£rvoC⁄f
[0].
mö
,56);

764 
MSP_MOTOR
:

765 
	`s_°ru˘
((
uöt8_t
*)&
mŸ‹
,16);

767 #i‚de‡
SLIM_WING


768 
MSP_ACC_TRIM
:

769 
	`hódSîülRïly
(4);

770 
	`s_°ru˘_∑πül
((
uöt8_t
*)&
c⁄f
.
™gÀTrim
[
PITCH
],2);

771 
	`s_°ru˘_∑πül
((
uöt8_t
*)&
c⁄f
.
™gÀTrim
[
ROLL
],2);

772 
	`èûSîülRïly
();

774 
MSP_SET_ACC_TRIM
:

775 
	`m•Ack
();

776 
	`s_°ru˘_w
((
uöt8_t
*)&
c⁄f
.
™gÀTrim
[
PITCH
],2);

777 
	`s_°ru˘_w
((
uöt8_t
*)&
c⁄f
.
™gÀTrim
[
ROLL
],2);

780 
MSP_RC
:

781 
	`s_°ru˘
((
uöt8_t
*)&
rcD©a
,
RC_CHANS
*2);

783 #i‡
GPS


784 #i‚de‡
SLIM_WING


785 
MSP_SET_RAW_GPS
:

787 
uöt8_t
 
a
,
b
;

788 
öt32_t
 
c
,
d
;

789 
öt16_t
 
e
;

790 
uöt16_t
 
f
;

791 } 
£t_£t_øw_gps
;

792 
	`m•Ack
();

793 
	`s_°ru˘_w
((
uöt8_t
*)&
£t_£t_øw_gps
,14);

794 
f
.
GPS_FIX
 = 
£t_£t_øw_gps
.
a
;

795 
GPS_numS©
 = 
£t_£t_øw_gps
.
b
;

796 
GPS_co‹d
[
LAT
] = 
£t_£t_øw_gps
.
c
;

797 
GPS_co‹d
[
LON
] = 
£t_£t_øw_gps
.
d
;

798 
GPS_Ætôude
 = 
£t_£t_øw_gps
.
e
;

799 
GPS_•ìd
 = 
£t_£t_øw_gps
.
f
;

800 
GPS_upd©e
 |= 2;

803 
MSP_RAW_GPS
:

805 
uöt8_t
 
a
,
b
;

806 
öt32_t
 
c
,
d
;

807 
öt16_t
 
e
;

808 
uöt16_t
 
f
,
g
;

809 } 
m•_øw_gps
;

810 
m•_øw_gps
.
a
 = 
f
.
GPS_FIX
;

811 
m•_øw_gps
.
b
 = 
GPS_numS©
;

812 
m•_øw_gps
.
c
 = 
GPS_co‹d
[
LAT
];

813 
m•_øw_gps
.
d
 = 
GPS_co‹d
[
LON
];

814 
m•_øw_gps
.
e
 = 
GPS_Ætôude
;

815 
m•_øw_gps
.
f
 = 
GPS_•ìd
;

816 
m•_øw_gps
.
g
 = 
GPS_ground_cour£
;

817 
	`s_°ru˘
((
uöt8_t
*)&
m•_øw_gps
,16);

819 
MSP_GPSSVINFO
:

820 
	`hódSîülRïly
(1 + (
GPS_numCh
 * 4));

822 
	`£rülize8
(
GPS_numCh
);

823 
i
 = 0; i < 
GPS_numCh
; i++){

824 
	`£rülize8
(
GPS_svöfo_chn
[
i
]);

825 
	`£rülize8
(
GPS_svöfo_svid
[
i
]);

826 
	`£rülize8
(
GPS_svöfo_quÆôy
[
i
]);

827 
	`£rülize8
(
GPS_svöfo_˙o
[
i
]);

829 
	`èûSîülRïly
();

832 
MSP_COMP_GPS
:

834 
uöt16_t
 
a
;

835 
öt16_t
 
b
;

836 
uöt8_t
 
c
;

837 } 
m•_comp_gps
;

838 
m•_comp_gps
.
a
 = 
GPS_di°™˚ToHome
;

839 
m•_comp_gps
.
b
 = 
GPS_dúe˘i⁄ToHome
;

840 
m•_comp_gps
.
c
 = 
GPS_upd©e
 & 1;

841 
	`s_°ru˘
((
uöt8_t
*)&
m•_comp_gps
,5);

843 
MSP_PIPAK
:

845 
uöt32_t
 
a
,
b
;

846 
öt16_t
 
c
,
d
;

847 } 
m•_pùak
;

848 
m•_pùak
.
a
 = 
GPS_co‹d
[
LAT
];

849 
m•_pùak
.
b
 = 
GPS_co‹d
[
LON
];

850 
m•_pùak
.
c
 = 
Æt
.
E°A…
;

851 
m•_pùak
.
d
 = 
Æt
.
v¨io
;

852 
	`s_°ru˘
((
uöt8_t
*)&
m•_pùak
,12);

861 #i‡
	`deföed
(
USE_MSP_WP
)

862 
MSP_SET_NAV_CONFIG
:

863 
	`m•Ack
();

864 
	`s_°ru˘_w
((
uöt8_t
*)&
GPS_c⁄f
,(GPS_conf));

866 
MSP_NAV_CONFIG
:

867 
	`s_°ru˘
((
uöt8_t
*)&
GPS_c⁄f
,(GPS_conf));

869 
MSP_NAV_STATUS
:

870 
	`hódSîülRïly
(7);

871 
	`£rülize8
(
f
.
GPS_mode
);

872 
	`£rülize8
(
NAV_°©e
);

873 
	`£rülize8
(
missi⁄_°ï
.
a˘i⁄
);

874 
	`£rülize8
(
missi⁄_°ï
.
numbî
);

875 
	`£rülize8
(
NAV_îr‹
);

876 
	`£rülize16
–(
öt16_t
)(
èrgë_bórög
/100));

878 
	`èûSîülRïly
();

880 
MSP_WP
:

882 
uöt8_t
 
wp_no
;

883 
uöt8_t
 
Êag
;

884 
boﬁ
 
suc˚ss
;

886 
wp_no
 = 
	`ªad8
();

887 
	`hódSîülRïly
(21);

888 i‡(
wp_no
 == 0) {

889 
	`£rülize8
(
wp_no
);

890 
	`£rülize8
(
missi⁄_°ï
.
a˘i⁄
);

891 
	`£rülize32
(
GPS_home
[
LAT
]);

892 
	`£rülize32
(
GPS_home
[
LON
]);

893 
Êag
 = 
MISSION_FLAG_HOME
;

895 i‡(
wp_no
 == 255) {

896 
	`£rülize8
(
wp_no
);

897 
	`£rülize8
(
missi⁄_°ï
.
a˘i⁄
);

898 
	`£rülize32
(
GPS_hﬁd
[
LAT
]);

899 
	`£rülize32
(
GPS_hﬁd
[
LON
]);

900 
Êag
 = 
MISSION_FLAG_HOLD
;

902 i‡((
wp_no
>0) && (wp_no<255)) {

903 i‡(
NAV_°©e
 =
NAV_STATE_NONE
) {

904 
suc˚ss
 = 
	`ªˇŒWP
(
wp_no
);

905 
	`£rülize8
(
wp_no
);

906 
	`£rülize8
(
missi⁄_°ï
.
a˘i⁄
);

907 
	`£rülize32
(
missi⁄_°ï
.
pos
[
LAT
]);

908 
	`£rülize32
(
missi⁄_°ï
.
pos
[
LON
]);

909 i‡(
suc˚ss
 =
åue
Ë
Êag
 = 
missi⁄_°ï
.flag;

910 
Êag
 = 
MISSION_FLAG_CRC_ERROR
;

912 
	`£rülize8
(
wp_no
);

913 
	`£rülize8
(0);

914 
	`£rülize32
(
GPS_home
[
LAT
]);

915 
	`£rülize32
(
GPS_home
[
LON
]);

916 
Êag
 = 
MISSION_FLAG_NAV_IN_PROG
;

919 
	`£rülize32
(
missi⁄_°ï
.
Ætôude
);

920 
	`£rülize16
(
missi⁄_°ï
.
∑ømëî1
);

921 
	`£rülize16
(
missi⁄_°ï
.
∑ømëî2
);

922 
	`£rülize16
(
missi⁄_°ï
.
∑ømëî3
);

923 
	`£rülize8
(
Êag
);

924 
	`èûSîülRïly
();

927 
MSP_SET_WP
:

929 
uöt8_t
 
wp_no
 = 
	`ªad8
();

931 i‡(
NAV_°©e
 =
NAV_STATE_HOLD_INFINIT
 && 
wp_no
 == 255) {

932 
missi⁄_°ï
.
numbî
 = 
wp_no
;

933 
missi⁄_°ï
.
a˘i⁄
 = 
MISSION_HOLD_UNLIM
;

934 
uöt8_t
 
ãmp
 = 
	`ªad8
();

935 
missi⁄_°ï
.
pos
[
LAT
] = 
	`ªad32
();

936 
missi⁄_°ï
.
pos
[
LON
] = 
	`ªad32
();

937 
missi⁄_°ï
.
Ætôude
 = 
	`ªad32
();

938 
missi⁄_°ï
.
∑ømëî1
 = 
	`ªad16
();

939 
missi⁄_°ï
.
∑ømëî2
 = 
	`ªad16
();

940 
missi⁄_°ï
.
∑ømëî3
 = 
	`ªad16
();

941 
missi⁄_°ï
.
Êag
 = 
	`ªad8
();

942 i‡(
missi⁄_°ï
.
Ætôude
 !0Ë
	`£t_√w_Ætôude
(mission_step.altitude);

943 
	`GPS_£t_√xt_wp
(&
missi⁄_°ï
.
pos
[
LAT
], &missi⁄_°ï.pos[
LON
], &
GPS_co‹d
[LAT], &GPS_coord[LON]);

944 i‡((
wp_di°™˚
/100Ë>
GPS_c⁄f
.
ß„_wp_di°™˚
Ë
NAV_°©e
 = 
NAV_STATE_NONE
;

945 
NAV_°©e
 = 
NAV_STATE_WP_ENROUTE
;

948 i‡(
NAV_°©e
 =
NAV_STATE_NONE
) {

949 
missi⁄_°ï
.
numbî
 = 
wp_no
;

950 
missi⁄_°ï
.
a˘i⁄
 = 
	`ªad8
();

951 
missi⁄_°ï
.
pos
[
LAT
] = 
	`ªad32
();

952 
missi⁄_°ï
.
pos
[
LON
] = 
	`ªad32
();

953 
missi⁄_°ï
.
Ætôude
 = 
	`ªad32
();

954 
missi⁄_°ï
.
∑ømëî1
 = 
	`ªad16
();

955 
missi⁄_°ï
.
∑ømëî2
 = 
	`ªad16
();

956 
missi⁄_°ï
.
∑ømëî3
 = 
	`ªad16
();

957 
missi⁄_°ï
.
Êag
 = 
	`ªad8
();

967 i‡(
missi⁄_°ï
.
numbî
 == 0) {

968 
GPS_home
[
LAT
] = 
missi⁄_°ï
.
pos
[LAT];

969 
GPS_home
[
LON
] = 
missi⁄_°ï
.
pos
[LON];

971 i‡(
missi⁄_°ï
.
numbî
 >0 && mission_step.number<255)

972 i‡(
missi⁄_°ï
.
numbî
 <
	`gëMaxWPNumbî
())

973 
	`°‹eWP
();

974 
	`m•Ack
();

980 
MSP_ATTITUDE
:

981 
	`s_°ru˘
((
uöt8_t
*)&
©t
,6);

983 
MSP_ALTITUDE
:

984 
	`s_°ru˘
((
uöt8_t
*)&
Æt
,6);

986 
MSP_ANALOG
:

987 
	`s_°ru˘
((
uöt8_t
*)&
™Æog
,7);

989 
MSP_RC_TUNING
:

990 
	`s_°ru˘
((
uöt8_t
*)&
c⁄f
.
rcR©e8
,7);

992 
MSP_PID
:

993 
	`s_°ru˘
((
uöt8_t
*)&
c⁄f
.
pid
[0].
P8
,3*
PIDITEMS
);

995 
MSP_PIDNAMES
:

996 
	`£rülizeNames
(
pid«mes
);

998 #i‡
	`deföed
(
CLEANFLIGHT
)

999 
MSP_PID_CONTROLLER
:

1000 
	`hódSîülRïly
(1);

1002 
	`£rülize8
(
PID_CONTROLLER
 - 1);

1003 
	`èûSîülRïly
();

1007 
MSP_BOX
:

1008 #i‡
EXTAUX


1009 
	`s_°ru˘
((
uöt8_t
*)&
c⁄f
.
a˘iv©e
[0],4*
CHECKBOXITEMS
);

1011 
	`s_°ru˘
((
uöt8_t
*)&
c⁄f
.
a˘iv©e
[0],2*
CHECKBOXITEMS
);

1014 
MSP_BOXNAMES
:

1015 
	`£rülizeNames
(
box«mes
);

1017 
MSP_BOXIDS
:

1018 
	`hódSîülRïly
(
CHECKBOXITEMS
);

1019 
uöt8_t
 
i
=0;i<
CHECKBOXITEMS
;i++)

1020 
	`£rülize8
(
	`pgm_ªad_byã
(&(
boxids
[
i
])));

1021 
	`èûSîülRïly
();

1023 
MSP_MOTOR_PINS
:

1024 
	`s_°ru˘
((
uöt8_t
*)&
PWM_PIN
,8);

1026 
MSP_RESET_CONF
:

1027 if(!
f
.
ARMED
Ë
	`LﬂdDeÁu…s
();

1028 
	`m•Ack
();

1030 
MSP_ACC_CALIBRATION
:

1031 if(!
f
.
ARMED
Ë
ˇlibøtögA
=512;

1032 
	`m•Ack
();

1034 #i‡
GYRO


1035 
MSP_GYRO_CALIBRATION
:

1036 i‡(!
f
.
ARMED
Ë
ˇlibøtögG
 = 512;

1037 
	`m•Ack
();

1040 #i‡
MAG


1041 
MSP_MAG_CALIBRATION
:

1042 if(!
f
.
ARMED
Ëf.
CALIBRATE_MAG
 = 1;

1043 
	`m•Ack
();

1046 #i‡
	`deföed
(
SPEK_BIND
)

1047 
MSP_BIND
:

1048 
	`•ekBöd
();

1049 
	`m•Ack
();

1052 
MSP_EEPROM_WRITE
:

1053 
	`wrôeP¨ams
(0);

1054 
	`m•Ack
();

1056 
MSP_DEBUG
:

1057 
	`s_°ru˘
((
uöt8_t
*)&
debug
,8);

1059 #i‡
	`deföed
(
CLEANFLIGHT
)

1060 
MSP_BF_CONFIG
:

1063 
	`hódSîülRïly
(1 + 4 + 1 + 2 + 2 + 2 + 2 + 2 + 2 + 2);

1064 
	`£rülize8
((
uöt8_t
Ë
MULTITYPE
);

1067 
	`£rülize32
(1 << 4 | 1 << 9 | 1 << 2);

1071 
	`£rülize8
((
uöt8_t
) 0);

1074 
	`£rülize16
((
uöt16_t
) 0);

1075 
	`£rülize16
((
uöt16_t
) 0);

1076 
	`£rülize16
((
uöt16_t
) 0);

1079 
	`£rülize16
((
uöt16_t
) 0);

1080 
	`£rülize16
((
uöt16_t
) 0);

1083 
	`£rülize16
((
uöt16_t
) 0);

1087 
	`£rülize8
((
uöt8_t
Ë
c⁄f
.
rﬁlPôchR©e
);

1088 
	`£rülize8
((
uöt8_t
Ë
c⁄f
.
rﬁlPôchR©e
);

1102 
	`èûSîülRïly
();

1105 
MSP_CF_SERIAL_CONFIG
:

1106 
	`hódSîülRïly
(

1107 (((
uöt8_t
Ë+(
uöt16_t
) +((uint8_t) * 4)) * 4)

1109 
i
 = 0; i < 4; i++) {

1110 
	`£rülize8
(0);

1111 
	`£rülize16
(0);

1112 
	`£rülize8
(0);

1113 
	`£rülize8
(0);

1114 
	`£rülize8
(0);

1115 
	`£rülize8
(0);

1117 
	`èûSîülRïly
();

1119 
MSP_UID
:

1120 
	`hódSîülRïly
(12);

1121 
	`£rülize32
(
U_ID_0
);

1122 
	`£rülize32
(
U_ID_1
);

1123 
	`£rülize32
(
U_ID_2
);

1124 
	`èûSîülRïly
();

1127 #ifde‡
DEBUGMSG


1128 
MSP_DEBUGMSG
:

1130 
uöt8_t
 
size
 = 
	`debugmsg_avaûabÀ
();

1131 i‡(
size
 > 16) size = 16;

1132 
	`hódSîülRïly
(
size
);

1133 
	`debugmsg_£rülize
(
size
);

1134 
	`èûSîülRïly
();

1139 
	`hódSîülEº‹
();
	`èûSîülRïly
();

1142 
	}
}

1145 
	$evÆu©eOthîD©a
(
uöt8_t
 
§
) {

1146 #i‚de‡
SUPPRESS_OTHER_SERIAL_COMMANDS


1147 #i‡
GPS


1148 #i‡!
	`deföed
(
I2C_GPS
)

1152 i‡(
CURRENTPORT
 =
GPS_SERIAL
) ;

1155 
§
) {

1159 #ifde‡
LCD_CONF


1162 i‡(!
f
.
ARMED
Ë
	`c⁄figuøti⁄Lo›
();

1165 #ifde‡
LOG_PERMANENT_SHOW_AT_L


1167 i‡(!
f
.
ARMED
Ë
	`dumpPLog
(1);

1170 #i‡
	`deföed
(
LCD_TELEMETRY
Ë&& deföed(
LCD_TEXTSTAR
)

1172 
	`toggÀ_ãÀmëry
(1);

1175 
	`toggÀ_ãÀmëry
(2);

1178 
	`toggÀ_ãÀmëry
(3);

1181 
	`toggÀ_ãÀmëry
(4);

1189 #ifde‡
LCD_TELEMETRY


1200 #i‚de‡
SUPPRESS_TELEMETRY_PAGE_R


1203 #i‡
	`deföed
(
DEBUG
Ë|| deföed(
DEBUG_FREE
)

1206 
	`toggÀ_ãÀmëry
(
§
);

1211 
	}
}

1213 
	$SîülWrôe16
(
uöt8_t
 
p‹t
, 
öt16_t
 
vÆ
)

1215 
CURRENTPORT
=
p‹t
;

1216 
	`£rülize16
(
vÆ
);
	`U¨tSídD©a
(
p‹t
);

1217 
	}
}

1219 
	$SîülWrôe32
(
uöt8_t
 
p‹t
, 
öt32_t
 
vÆ
)

1221 
CURRENTPORT
=
p‹t
;

1222 
	`£rülize32
(
vÆ
);
	`U¨tSídD©a
(
p‹t
);

1223 
	}
}

1225 #ifde‡
DEBUGMSG


1226 
	$debugmsg_≠≥nd_°r
(c⁄° *
°r
) {

1227 *
°r
) {

1228 
debug_buf
[
hód_debug
++] = *
°r
++;

1229 i‡(
hód_debug
 =
DEBUG_MSG_BUFFER_SIZE
) {

1230 
hód_debug
 = 0;

1233 
	}
}

1235 
uöt8_t
 
	$debugmsg_avaûabÀ
() {

1236 i‡(
hód_debug
 >
èû_debug
) {

1237  
hód_debug
-
èû_debug
;

1239  
hód_debug
 + (
DEBUG_MSG_BUFFER_SIZE
-
èû_debug
);

1241 
	}
}

1243 
	$debugmsg_£rülize
(
uöt8_t
 
l
) {

1244 
uöt8_t
 
i
=0; i<
l
; i++) {

1245 i‡(
hód_debug
 !
èû_debug
) {

1246 
	`£rülize8
(
debug_buf
[
èû_debug
++]);

1247 i‡(
èû_debug
 =
DEBUG_MSG_BUFFER_SIZE
) {

1248 
èû_debug
 = 0;

1251 
	`£rülize8
('\0');

1254 
	}
}

1256 
	$debugmsg_≠≥nd_°r
(c⁄° *
°r
Ë{
	}
};

	@Protocol.h

1 #i‚de‡
PROTOCOL_H_


2 
	#PROTOCOL_H_


	)

6 
	mFEATURE_RX_PPM
 = 1 << 0,

7 
	mFEATURE_VBAT
 = 1 << 1,

8 
	mFEATURE_INFLIGHT_ACC_CAL
 = 1 << 2,

9 
	mFEATURE_RX_SERIAL
 = 1 << 3,

10 
	mFEATURE_MOTOR_STOP
 = 1 << 4,

11 
	mFEATURE_SERVO_TILT
 = 1 << 5,

12 
	mFEATURE_SOFTSERIAL
 = 1 << 6,

13 
	mFEATURE_GPS
 = 1 << 7,

14 
	mFEATURE_FAILSAFE
 = 1 << 8,

15 
	mFEATURE_SONAR
 = 1 << 9,

16 
	mFEATURE_TELEMETRY
 = 1 << 10,

17 
	mFEATURE_CURRENT_METER
 = 1 << 11,

18 
	mFEATURE_3D
 = 1 << 12,

19 
	mFEATURE_RX_PARALLEL_PWM
 = 1 << 13,

20 
	mFEATURE_RX_MSP
 = 1 << 14,

21 
	mFEATURE_RSSI_ADC
 = 1 << 15,

22 
	mFEATURE_LED_STRIP
 = 1 << 16,

23 
	mFEATURE_DISPLAY
 = 1 << 17,

24 
	mFEATURE_ONESHOT125
 = 1 << 18,

25 
	mFEATURE_BLACKBOX
 = 1 << 19

26 } 
	t„©uªs_e
;

29 
£rülCom
();

30 
debugmsg_≠≥nd_°r
(c⁄° *
°r
);

31 
m•_push
(
uöt8_t
 
u¨t
, uöt8_à
m•
);

32 
„©uªSë
(
uöt32_t
 
mask
);

	@RX.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"ty≥s.h
"

5 
	~"Sîül.h
"

6 
	~"PrŸocﬁ.h
"

7 
	~"Mu…iWii.h
"

8 
	~"Aœrms.h
"

14 #i‡
deföed
(
SPEKTRUM
)

15 
	~<wúög.c
>

19 #i‡
deföed
(
SBUS
)

20 vﬁ©ûê
uöt16_t
 
	grcVÆue
[
RC_CHANS
] = {1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500};

21 #ñi‡
deföed
(
SPEKTRUM
Ë|| deföed(
SERIAL_SUM_PPM
)

22 vﬁ©ûê
uöt16_t
 
	grcVÆue
[
RC_CHANS
] = {1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502};

24 vﬁ©ûê
uöt16_t
 
	grcVÆue
[
RC_CHANS
] = {1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502};

27 #i‡
deföed
(
SERIAL_SUM_PPM
)

28 
uöt8_t
 
	grcCh™√l
[
RC_CHANS
] = {
SERIAL_SUM_PPM
};

29 #ñi‡
deföed
(
SBUS
)

31 
uöt8_t
 
	grcCh™√l
[
RC_CHANS
] = {
SBUS
};

32 #ñi‡
deföed
(
SUMD
)

33 
uöt8_t
 
	grcCh™√l
[
RC_CHANS
] = {
PITCH
,
YAW
,
THROTTLE
,
ROLL
,
AUX1
,
AUX2
,
AUX3
,
AUX4
};

34 #ñi‡
deföed
(
SPEKTRUM
)

35 
uöt8_t
 
	grcCh™√l
[
RC_CHANS
] = {
PITCH
,
YAW
,
THROTTLE
,
ROLL
,
AUX1
,
AUX2
,
AUX3
,
AUX4
,8,9,10,11};

37 
uöt8_t
 
	grcCh™√l
[
RC_CHANS
] = {
ROLLPIN
, 
PITCHPIN
, 
YAWPIN
, 
THROTTLEPIN
, 
AUX1PIN
,
AUX2PIN
,
AUX3PIN
,
AUX4PIN
};

38 
uöt8_t
 
	gPCI¡_RX_Pös
[
PCINT_PIN_COUNT
] = {
PCINT_RX_BITS
};

41 
rxI¡
();

46 
	$c⁄figuªRe˚ivî
() {

48 #i‡
	`deföed
(
STANDARD_RX
)

49 #i‡
	`deföed
(
MEGA
)

50 
DDRK
 = 0;

53 
uöt8_t
 
i
 = 0; i < 
PCINT_PIN_COUNT
; i++){

54 
PCINT_RX_PORT
 |
PCI¡_RX_Pös
[
i
];

55 
PCINT_RX_MASK
 |
PCI¡_RX_Pös
[
i
];

57 
PCICR
 = 
PCIR_PORT_BIT
;

60 #i‡
	`deföed
(
PROMINI
)

61 #i‡
	`deföed
(
RCAUXPIN
)

62 
PCICR
 |= (1 << 0) ;

63 #i‡
	`deföed
(
RCAUXPIN8
)

64 
PCMSK0
 = (1 << 0);

66 #i‡
	`deföed
(
RCAUXPIN12
)

67 
PCMSK0
 = (1 << 4);

73 #i‡
	`deföed
(
PROMICRO
)

75 
DDRE
 &= ~(1 << 6);

76 
PORTE
 |= (1 << 6);

77 
EICRB
 |(1 << 
ISC60
);

78 
EIMSK
 |(1 << 
INT6
);

80 #i‡
	`deföed
(
RCAUX2PIND17
)

81 
DDRB
 &= ~(1 << 0);

84 #i‡
	`deföed
(
RCAUX2PINRXO
)

85 
DDRD
 &= ~(1 << 2);

86 
PORTD
 |= (1 << 2);

87 
EICRA
 |(1 << 
ISC20
);

88 
EIMSK
 |(1 << 
INT2
);

94 #i‡
	`deföed
(
SERIAL_SUM_PPM
)

95 
PPM_PIN_INTERRUPT
;

97 #i‡
	`deföed
 (
SPEKTRUM
Ë|| deföed(
SUMD
)

98 
	`SîülO≥n
(
RX_SERIAL_PORT
,115200);

100 #i‡
	`deföed
(
SBUS
)

101 
	`SîülO≥n
(
RX_SERIAL_PORT
,100000);

102 
RX_SERIAL_PORT
) {

103 #i‡
	`deföed
(
MEGA
)

104 0: 
UCSR0C
 |(1<<
UPM01
)|(1<<
USBS0
); ;

105 1: 
UCSR1C
 |(1<<
UPM11
)|(1<<
USBS1
); ;

106 2: 
UCSR2C
 |(1<<
UPM21
)|(1<<
USBS2
); ;

107 3: 
UCSR3C
 |(1<<
UPM31
)|(1<<
USBS3
); ;

111 
	}
}

116 #i‡
deföed
(
STANDARD_RX
)

119 #i‡
deföed
(
FAILSAFE
Ë&& !deföed(
PROMICRO
)

121 
	#RX_PIN_CHECK
(
pö_pos
, 
rc_vÆue_pos
) \

122 i‡(
mask
 & 
PCI¡_RX_Pös
[
pö_pos
]) { \

123 i‡(!(
pö
 & 
PCI¡_RX_Pös
[
pö_pos
])) { \

124 
dTime
 = 
cTime
-
edgeTime
[
pö_pos
]; \

125 i‡(900<
dTime
 && dTime<2200) { \

126 
rcVÆue
[
rc_vÆue_pos
] = 
dTime
; \

127 if((
rc_vÆue_pos
==
THROTTLEPIN
 ||Ñc_vÆue_pos==
YAWPIN
 || \

128 
rc_vÆue_pos
==
PITCHPIN
 ||Ñc_vÆue_pos==
ROLLPIN
) \

129 && 
dTime
>
FAILSAFE_DETECT_TRESHOLD
) { \

130 
GoodPul£s
 |(1<<
rc_vÆue_pos
); \

133 } 
edgeTime
[
pö_pos
] = 
cTime
; \

134 }

	)

137 
	#RX_PIN_CHECK
(
pö_pos
, 
rc_vÆue_pos
) \

138 i‡(
mask
 & 
PCI¡_RX_Pös
[
pö_pos
]) { \

139 i‡(!(
pö
 & 
PCI¡_RX_Pös
[
pö_pos
])) { \

140 
dTime
 = 
cTime
-
edgeTime
[
pö_pos
]; \

141 i‡(900<
dTime
 && dTime<2200) { \

142 
rcVÆue
[
rc_vÆue_pos
] = 
dTime
; \

144 } 
edgeTime
[
pö_pos
] = 
cTime
; \

145 }

	)

149 
	$ISR
(
RX_PC_INTERRUPT
) {

150 
uöt8_t
 
mask
;

151 
uöt8_t
 
pö
;

152 
uöt16_t
 
cTime
,
dTime
;

153 
öt16_t
 
tmp
;

154 
uöt16_t
 
edgeTime
[8];

155 
uöt8_t
 
PCötLa°
;

156 #i‡
	`deföed
(
FAILSAFE
Ë&& !deföed(
PROMICRO
)

157 
uöt8_t
 
GoodPul£s
;

160 
pö
 = 
RX_PCINT_PIN_PORT
;

162 
mask
 = 
pö
 ^ 
PCötLa°
;

163 
cTime
 = 
	`mi¸os
();

164 
	`£i
();

165 
PCötLa°
 = 
pö
;

167 #i‡(
PCINT_PIN_COUNT
 > 0)

168 
	`RX_PIN_CHECK
(0,2);

170 #i‡(
PCINT_PIN_COUNT
 > 1)

171 
	`RX_PIN_CHECK
(1,4);

173 #i‡(
PCINT_PIN_COUNT
 > 2)

174 
	`RX_PIN_CHECK
(2,5);

176 #i‡(
PCINT_PIN_COUNT
 > 3)

177 
	`RX_PIN_CHECK
(3,6);

179 #i‡(
PCINT_PIN_COUNT
 > 4)

180 
	`RX_PIN_CHECK
(4,7);

182 #i‡(
PCINT_PIN_COUNT
 > 5)

183 
	`RX_PIN_CHECK
(5,0);

185 #i‡(
PCINT_PIN_COUNT
 > 6)

186 
	`RX_PIN_CHECK
(6,1);

188 #i‡(
PCINT_PIN_COUNT
 > 7)

189 
	`RX_PIN_CHECK
(7,3);

192 #i‡
	`deföed
(
FAILSAFE
Ë&& !deföed(
PROMICRO
)

193 i‡(
GoodPul£s
==(1<<
THROTTLEPIN
)+(1<<
YAWPIN
)+(1<<
ROLLPIN
)+(1<<
PITCHPIN
)) {

194 
GoodPul£s
 = 0;

195 if(
Áûß„C¡
 > 20) failsafeCnt -= 20; failsafeCnt = 0;

198 
	}
}

200 #i‡
deföed
(
PROMINI
)

201 #i‡
deföed
(
RCAUXPIN
)

207 
	$ISR
(
PCINT0_ve˘
) {

208 
uöt8_t
 
pö
;

209 
uöt16_t
 
cTime
,
dTime
;

210 
uöt16_t
 
edgeTime
;

212 
pö
 = 
PINB
;

213 
cTime
 = 
	`mi¸os
();

214 
	`£i
();

215 #i‡
	`deföed
(
RCAUXPIN8
)

216 i‡(!(
pö
 & 1<<0)) {

218 #i‡
	`deföed
(
RCAUXPIN12
)

219 i‡(!(
pö
 & 1<<4)) {

221 
dTime
 = 
cTime
-
edgeTime
; i‡(900<dTimê&& dTime<2200Ë
rcVÆue
[0] = dTime;

222 } 
edgeTime
 = 
cTime
;

223 
	}
}

228 #i‡
deföed
(
PROMICRO
)

230 
	$ISR
(
INT6_ve˘
){

231 
uöt16_t
 
now
,
diff
;

232 
uöt16_t
 
œ°
 = 0;

233 
now
 = 
	`mi¸os
();

234 if(!(
PINE
 & (1<<6))){

235 
diff
 = 
now
 - 
œ°
;

236 if(900<
diff
 && diff<2200){

237 
rcVÆue
[3] = 
diff
;

238 #i‡
	`deföed
(
FAILSAFE
)

239 if(
diff
>
FAILSAFE_DETECT_TRESHOLD
) {

240 if(
Áûß„C¡
 > 20) failsafeCnt -= 20; failsafeCnt = 0;

244 }
œ°
 = 
now
;

245 
	}
}

247 #i‡
deföed
(
RCAUX2PINRXO
)

248 
	$ISR
(
INT2_ve˘
){

249 
uöt16_t
 
now
,
diff
;

250 
uöt16_t
 
œ°
 = 0;

251 
now
 = 
	`mi¸os
();

252 if(!(
PIND
 & (1<<2))){

253 
diff
 = 
now
 - 
œ°
;

254 if(900<
diff
 && diff<2200Ë
rcVÆue
[7] = diff;

255 }
œ°
 = 
now
;

256 
	}
}

266 #i‡
deföed
(
PROMICRO
Ë&& deföed(
SERIAL_SUM_PPM
)

267 
	$ISR
(
INT6_ve˘
){
	`rxI¡
();
	}
}

271 #i‡
deföed
(
PPM_ON_THROTTLE
Ë&& deföed(
MEGA
Ë&& deföed(
SERIAL_SUM_PPM
)

272 
	$ISR
(
PCINT2_ve˘
Ë{ if(
PINK
 & (1<<0)Ë
	`rxI¡
(); 
	}
}

276 #i‡
deföed
(
SERIAL_SUM_PPM
)

277 
	$rxI¡
() {

278 
uöt16_t
 
now
,
diff
;

279 
uöt16_t
 
œ°
 = 0;

280 
uöt8_t
 
ch™
 = 0;

281 #i‡
	`deföed
(
FAILSAFE
)

282 
uöt8_t
 
GoodPul£s
;

285 
now
 = 
	`mi¸os
();

286 
	`£i
();

287 
diff
 = 
now
 - 
œ°
;

288 
œ°
 = 
now
;

289 if(
diff
>3000Ë
ch™
 = 0;

291 if(900<
diff
 && diff<2200 && 
ch™
<
RC_CHANS
 ) {

292 
rcVÆue
[
ch™
] = 
diff
;

293 #i‡
	`deföed
(
FAILSAFE
)

294 if(
ch™
<4 && 
diff
>
FAILSAFE_DETECT_TRESHOLD
Ë
GoodPul£s
 |= (1<<chan);

295 if(
GoodPul£s
==0x0F) {

296 
GoodPul£s
 = 0;

297 if(
Áûß„C¡
 > 20) failsafeCnt -= 20; failsafeCnt = 0;

301 
ch™
++;

303 
	}
}

309 #i‡
deföed
(
SBUS
)

311 
	#SBUS_SYNCBYTE
 0x0F

312 
uöt16_t
 
sbusIndex
=0;

	)

313 
uöt16_t
 
	gsbus
[25]={0};

315 
	$ªadSîül_RX
(){

316 
	`SîülAvaûabÀ
(
RX_SERIAL_PORT
)){

317 
vÆ
 = 
	`SîülRód
(
RX_SERIAL_PORT
);

318 if(
sbusIndex
==0 && 
vÆ
 !
SBUS_SYNCBYTE
)

320 
sbus
[
sbusIndex
++] = 
vÆ
;

321 if(
sbusIndex
==25){

322 
sbusIndex
=0;

323 
•ekFømeFœgs
 = 0x00;

324 
rcVÆue
[0] = ((
sbus
[1]|sbus[2]<< 8Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

325 
rcVÆue
[1] = ((
sbus
[2]>>3|sbus[3]<<5Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

326 
rcVÆue
[2] = ((
sbus
[3]>>6|sbus[4]<<2|sbus[5]<<10Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

327 
rcVÆue
[3] = ((
sbus
[5]>>1|sbus[6]<<7Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

328 
rcVÆue
[4] = ((
sbus
[6]>>4|sbus[7]<<4Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

329 
rcVÆue
[5] = ((
sbus
[7]>>7|sbus[8]<<1|sbus[9]<<9Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

330 
rcVÆue
[6] = ((
sbus
[9]>>2|sbus[10]<<6Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

331 
rcVÆue
[7] = ((
sbus
[10]>>5|sbus[11]<<3Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

333 
rcVÆue
[8] = ((
sbus
[12]|sbus[13]<< 8Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

334 
rcVÆue
[9] = ((
sbus
[13]>>3|sbus[14]<<5Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

335 
rcVÆue
[10] = ((
sbus
[14]>>6|sbus[15]<<2|sbus[16]<<10Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

336 
rcVÆue
[11] = ((
sbus
[16]>>1|sbus[17]<<7Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

337 
rcVÆue
[12] = ((
sbus
[17]>>4|sbus[18]<<4Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

338 
rcVÆue
[13] = ((
sbus
[18]>>7|sbus[19]<<1|sbus[20]<<9Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

339 
rcVÆue
[14] = ((
sbus
[20]>>2|sbus[21]<<6Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

340 
rcVÆue
[15] = ((
sbus
[21]>>5|sbus[22]<<3Ë& 0x07FF)/2+
SBUS_MID_OFFSET
;

342 i‡((
sbus
[23]Ë& 0x0001Ë
rcVÆue
[16] = 2000; rcValue[16] = 1000;

343 i‡((
sbus
[23] >> 1Ë& 0x0001Ë
rcVÆue
[17] = 2000; rcValue[17] = 1000;

344 
•ekFømeD⁄e
 = 0x01;

347 #i‡
	`deföed
(
FAILSAFE
)

348 i‡(!((
sbus
[23] >> 3) & 0x0001))

349 {if(
Áûß„C¡
 > 20) failsafeCnt -= 20; failsafeCnt = 0;}

354 
uöt8_t
 
adj_ödex
;

355 
adj_ödex
=0;ádj_index<16;ádj_index++) {

356 i‡(
rcVÆue
[
adj_ödex
] < 
MIDRC
)

357 
rcVÆue
[
adj_ödex
] -(
MIDRC
 -ÑcValue[adj_index]) >> 2;

359 
rcVÆue
[
adj_ödex
] +‘cVÆue[adj_ödex] - 
MIDRC
) >> 2;

363 
	}
}

370 #i‡
deföed
(
SUMD
)

371 
	#SUMD_SYNCBYTE
 0xA8

	)

372 
	#SUMD_MAXCHAN
 8

	)

373 
	#SUMD_BUFFSIZE
 
SUMD_MAXCHAN
*2 + 5

374 
uöt8_t
 
sumdIndex
=0;

	)

375 
uöt8_t
 
	gsumdSize
=0;

376 
uöt8_t
 
	gsumd
[
SUMD_BUFFSIZE
]={0};

378 
	$ªadSîül_RX
() {

379 
	`SîülAvaûabÀ
(
RX_SERIAL_PORT
)) {

380 
vÆ
 = 
	`SîülRód
(
RX_SERIAL_PORT
);

381 if(
sumdIndex
 =0 && 
vÆ
 !
SUMD_SYNCBYTE
) ;

382 if(
sumdIndex
 =2Ë
sumdSize
 = 
vÆ
;

383 if(
sumdIndex
 < 
SUMD_BUFFSIZE
Ë
sumd
[sumdIndex] = 
vÆ
;

384 
sumdIndex
++;

386 if(
sumdIndex
 =
sumdSize
*2+5) {

387 
sumdIndex
 = 0;

388 
•ekFømeFœgs
 = 0x00;

389 
debug
[1] = 
sumd
[1];

390 i‡(
sumdSize
 > 
SUMD_MAXCHAN
) sumdSize = SUMD_MAXCHAN;

391 
uöt8_t
 
b
 = 0; b < 
sumdSize
; b++)

392 
rcVÆue
[
b
] = ((
sumd
[2*b+3]<<8) | sumd[2*b+4])>>3;

393 
•ekFømeD⁄e
 = 0x01;

395 #i‡
	`deföed
(
FAILSAFE
)

396 i‡(
sumd
[1] == 0x01)

397 {if(
Áûß„C¡
 > 20) failsafeCnt -= 20; failsafeCnt = 0;}

401 
	}
}

407 #i‡
deföed
(
SPEKTRUM
)

408 
	$ªadSîül_RX
() {

409 i‡((!
f
.
ARMED
) &&

410 #i‡
	`deföed
(
FAILSAFE
Ë|| (
RX_SERIAL_PORT
 != 0)

411 (
Áûß„C¡
 > 5) &&

413 –
	`SîülPìk
(
RX_SERIAL_PORT
) == '$')) {

414 
	`SîülAvaûabÀ
(
RX_SERIAL_PORT
)) {

415 
	`£rülCom
();

416 
	`dñay
 (10);

420 
	`SîülAvaûabÀ
(
RX_SERIAL_PORT
Ë> 
SPEK_FRAME_SIZE
) {

421 
uöt8_t
 
i
 = 0; i < 
SPEK_FRAME_SIZE
; i++Ë{
	`SîülRód
(
RX_SERIAL_PORT
);}

423 i‡(
•ekFømeFœgs
 == 0x01) {

424 i‡(
	`SîülAvaûabÀ
(
RX_SERIAL_PORT
Ë=
SPEK_FRAME_SIZE
) {

425 
	`SîülRód
(
RX_SERIAL_PORT
); SerialRead(RX_SERIAL_PORT);

426 
uöt8_t
 
b
 = 2; b < 
SPEK_FRAME_SIZE
; b += 2) {

427 
uöt8_t
 
bh
 = 
	`SîülRód
(
RX_SERIAL_PORT
);

428 
uöt8_t
 
bl
 = 
	`SîülRód
(
RX_SERIAL_PORT
);

429 
uöt8_t
 
•ekCh™√l
 = 0x0F & (
bh
 >> 
SPEK_CHAN_SHIFT
);

430 i‡(
•ekCh™√l
 < 
RC_CHANS
Ë
rcVÆue
[•ekCh™√l] = 988 + ((((
uöt16_t
)(
bh
 & 
SPEK_CHAN_MASK
Ë<< 8Ë+ 
bl
Ë
SPEK_DATA_SHIFT
);

432 
•ekFømeFœgs
 = 0x00;

433 
•ekFømeD⁄e
 = 0x01;

434 #i‡
	`deföed
(
FAILSAFE
)

435 if(
Áûß„C¡
 > 20) failsafeCnt -= 20; failsafeCnt = 0;

438 
uöt32_t
 
•ekI¡îvÆ
 = (
timî0_ovîÊow_cou¡
 << 8Ë* (64 / 
	`˛ockCy˛esPîMi¸o£c⁄d
()Ë- 
•ekTimeLa°
;

439 i‡(
•ekI¡îvÆ
 > 2500Ë{
•ekFømeFœgs
 = 0;}

442 
	}
}

445 
uöt16_t
 
	$ªadRawRC
(
uöt8_t
 
ch™
) {

446 
uöt16_t
 
d©a
;

447 #i‡
	`deföed
(
SPEKTRUM
Ë|| deföed(
SBUS
Ë|| deföed(
SUMD
)

448 i‡(
ch™
 < 
RC_CHANS
) {

449 
d©a
 = 
rcVÆue
[
rcCh™√l
[
ch™
]];

450 } 
d©a
 = 1500;

452 
uöt8_t
 
ﬁdSREG
;

453 
ﬁdSREG
 = 
SREG
; 
	`˛i
();

454 
d©a
 = 
rcVÆue
[
rcCh™√l
[
ch™
]];

455 
SREG
 = 
ﬁdSREG
;

457  
d©a
;

458 
	}
}

463 
	#AVERAGING_ARRAY_LENGTH
 4

	)

464 
	$compuãRC
() {

465 
uöt16_t
 
rcD©a4VÆues
[
RC_CHANS
][
AVERAGING_ARRAY_LENGTH
-1];

466 
uöt16_t
 
rcD©aMón
,
rcD©aTmp
;

467 
uöt8_t
 
rc4VÆuesIndex
 = 0;

468 
uöt8_t
 
ch™
,
a
;

469 
uöt8_t
 
Áûß„GoodC⁄dôi⁄
 = 1;

471 #i‡!
	`deföed
(
OPENLRSv2MULTI
)

472 
rc4VÆuesIndex
++;

473 i‡(
rc4VÆuesIndex
 =
AVERAGING_ARRAY_LENGTH
-1)Ñc4ValuesIndex = 0;

474 
ch™
 = 0; ch™ < 
RC_CHANS
; chan++) {

476 #i‡
	`deföed
(
STICK_SCALING_FACTOR
)

477 i‡–
ch™
 < 4 ) {

478 
rcD©aTmp
 = ((
öt16_t
)
	`ªadRawRC
(
ch™
)-1500)*
STICK_SCALING_FACTOR
+1500;

480 
rcD©aTmp
 = 
	`ªadRawRC
(
ch™
);

483 
rcD©aTmp
 = 
	`ªadRawRC
(
ch™
);

485 #i‡
	`deföed
(
FAILSAFE
)

486 
Áûß„GoodC⁄dôi⁄
 = 
rcD©aTmp
>
FAILSAFE_DETECT_TRESHOLD
 || 
ch™
 > 3 || !
f
.
ARMED
;

488 #i‡
	`deföed
(
SPEKTRUM
Ë|| deföed(
SBUS
Ë|| deföed(
SUMD
)

489 if(
Áûß„GoodC⁄dôi⁄
Ë
rcD©a
[
ch™
] = 
rcD©aTmp
;

491 i‡(
Áûß„GoodC⁄dôi⁄
) {

492 
rcD©aMón
 = 
rcD©aTmp
;

493 
a
 = 0;á < 
AVERAGING_ARRAY_LENGTH
 - 1;á++Ë
rcD©aMón
 +
rcD©a4VÆues
[
ch™
][a];

494 
rcD©aMón
 = (rcD©aMó¿+ (
AVERAGING_ARRAY_LENGTH
 / 2)) / AVERAGING_ARRAY_LENGTH;

495 i‡(
rcD©aMón
 < (
uöt16_t
Ë
rcD©a
[
ch™
] - 3)ÑcData[chan] =ÑcDataMean + 2;

496 i‡(
rcD©aMón
 >(
uöt16_t
)
rcD©a
[
ch™
] + 3)ÑcData[chan] =ÑcDataMean - 2;

497 
rcD©a4VÆues
[
ch™
][
rc4VÆuesIndex
] = 
rcD©aTmp
;

524 i‡(
ch™
<8 && 
rcSîülCou¡
 > 0) {

525 
rcSîülCou¡
 --;

526 #i‡
	`deföed
(
FAILSAFE
)

527 
Áûß„C¡
 = 0;

529 i‡(
rcSîül
[
ch™
] >900Ë{
rcD©a
[chan] =ÑcSerial[chan];}

533 
	}
}

542 #i‡
deföed
(
OPENLRSv2MULTI
)

562 
	#CARRIER_FREQUENCY
 435000

563 
	#FREQUENCY_HOPPING
 1

564 

	)

570 
uöt8_t
 
	gh›_li°
[3] = 
HOPLIST
;

573 
uöt8_t
 
	gRF_Hódî
[4] = 
OLRS_HEADER
;

577 
uöt32_t
 
	gœ°_h›pög_time
;

578 
uöt8_t
 
	gRF_Rx_Buf„r
[17];

579 
uöt16_t
 
	gãmp_öt
, 
	grx_rssi
;

580 
uöt16_t
 
	gSîvo_Buf„r
[10] = {3000,3000,3000,3000,3000,3000,3000,3000};

581 
uöt8_t
 
	gh›pög_ch™√l
 = 1;

596 
	gItSètus1
, 
	gItSètus2
;

599 
	$Wrôe0
( ) {

600 
SCK_off
;

601 
	`NOP
();

602 
SDI_off
;

603 
	`NOP
();

604 
SCK_⁄
;

605 
	`NOP
();

606 
	}
}

608 
	$Wrôe1
( ) {

609 
SCK_off
;

610 
	`NOP
();

611 
SDI_⁄
;

612 
	`NOP
();

613 
SCK_⁄
;

614 
	`NOP
();

615 
	}
}

617 
	$Wrôe8bôcomm™d
(
uöt8_t
 
comm™d
) {

618 
uöt8_t
 
n
=8;

619 
nSEL_⁄
;

620 
SCK_off
;

621 
nSEL_off
;

622 
n
--) {

623 if(
comm™d
&0x80)

624 
	`Wrôe1
();

626 
	`Wrôe0
();

627 
comm™d
 = command << 1;

629 
SCK_off
;

630 
	}
}

633 
	$£nd_ªad_addªss
(
uöt8_t
 
i
) {

634 
i
 &= 0x7f;

635 
	`Wrôe8bôcomm™d
(
i
);

636 
	}
}

639 
	$£nd_8bô_d©a
(
uöt8_t
 
i
) {

640 
uöt8_t
 
n
 = 8;

641 
SCK_off
;

642 
n
--) {

643 if(
i
&0x80)

644 
	`Wrôe1
();

646 
	`Wrôe0
();

647 
i
 = i << 1;

649 
SCK_off
;

650 
	}
}

653 
uöt8_t
 
	$ªad_8bô_d©a
() {

654 
uöt8_t
 
Resu…
, 
i
;

656 
SCK_off
;

657 
Resu…
=0;

658 
i
=0;i<8;i++) {

659 
Resu…
=Result<<1;

660 
SCK_⁄
;

661 
	`NOP
();

662 if(
SDO_1
) {

663 
Resu…
|=1;

665 
SCK_off
;

666 
	`NOP
();

668 (
Resu…
);

669 
	}
}

672 
uöt8_t
 
	$_•i_ªad
(
uöt8_t
 
addªss
) {

673 
uöt8_t
 
ªsu…
;

674 
	`£nd_ªad_addªss
(
addªss
);

675 
ªsu…
 = 
	`ªad_8bô_d©a
();

676 
nSEL_⁄
;

677 (
ªsu…
);

678 
	}
}

681 
	$_•i_wrôe
(
uöt8_t
 
addªss
, uöt8_à
d©a
) {

682 
addªss
 |= 0x80;

683 
	`Wrôe8bôcomm™d
(
addªss
);

684 
	`£nd_8bô_d©a
(
d©a
);

685 
nSEL_⁄
;

686 
	}
}

689 
	$RF22B_öô_∑ømëî
() {

690 
ItSètus1
 = 
	`_•i_ªad
(0x03);

691 
ItSètus2
 = 
	`_•i_ªad
(0x04);

692 
	`_•i_wrôe
(0x06, 0x00);

693 
	`_•i_wrôe
(0x07, 
RF22B_PWRSTATE_READY
);

694 
	`_•i_wrôe
(0x09, 0x7f);

695 
	`_•i_wrôe
(0x0a, 0x05);

696 
	`_•i_wrôe
(0x0b, 0x12);

697 
	`_•i_wrôe
(0x0c, 0x15);

698 
	`_•i_wrôe
(0x0d, 0xfd);

699 
	`_•i_wrôe
(0x0e, 0x00);

700 
	`_•i_wrôe
(0x70, 0x00);

703 
	`_•i_wrôe
(0x1c, 0x05);

704 
	`_•i_wrôe
(0x20, 0x45);

705 
	`_•i_wrôe
(0x21, 0x01);

706 
	`_•i_wrôe
(0x22, 0xD7);

707 
	`_•i_wrôe
(0x23, 0xDC);

708 
	`_•i_wrôe
(0x24, 0x03);

709 
	`_•i_wrôe
(0x25, 0xB8);

710 
	`_•i_wrôe
(0x2a, 0x1e);

712 
	`_•i_wrôe
(0x6e, 0x0E);

713 
	`_•i_wrôe
(0x6f, 0xBF);

715 
	`_•i_wrôe
(0x30, 0x8c);

717 
	`_•i_wrôe
(0x32, 0xf3);

718 
	`_•i_wrôe
(0x33, 0x42);

719 
	`_•i_wrôe
(0x34, 0x07);

720 
	`_•i_wrôe
(0x36, 0x2d);

721 
	`_•i_wrôe
(0x37, 0xd4);

722 
	`_•i_wrôe
(0x38, 0x00);

723 
	`_•i_wrôe
(0x39, 0x00);

724 
	`_•i_wrôe
(0x3a, 
RF_Hódî
[0]);

725 
	`_•i_wrôe
(0x3b, 
RF_Hódî
[1]);

726 
	`_•i_wrôe
(0x3c, 
RF_Hódî
[2]);

727 
	`_•i_wrôe
(0x3d, 
RF_Hódî
[3]);

728 
	`_•i_wrôe
(0x3e, 17);

731 
	`_•i_wrôe
(0x3f, 
RF_Hódî
[0]);

732 
	`_•i_wrôe
(0x40, 
RF_Hódî
[1]);

733 
	`_•i_wrôe
(0x41, 
RF_Hódî
[2]);

734 
	`_•i_wrôe
(0x42, 
RF_Hódî
[3]);

735 
	`_•i_wrôe
(0x43, 0xff);

736 
	`_•i_wrôe
(0x44, 0xff);

737 
	`_•i_wrôe
(0x45, 0xff);

738 
	`_•i_wrôe
(0x46, 0xff);

740 
	`_•i_wrôe
(0x6d, 0x07);

741 
	`_•i_wrôe
(0x79, 0x00);

742 
	`_•i_wrôe
(0x7a, 0x06);

744 
	`_•i_wrôe
(0x71, 0x23);

746 
	`_•i_wrôe
(0x72, 0x2E);

747 
	`_•i_wrôe
(0x73, 0x00);

748 
	`_•i_wrôe
(0x74, 0x00);

751 
	`_•i_wrôe
(0x75, 0x53);

752 
	`_•i_wrôe
(0x76, 0x7D);

753 
	`_•i_wrôe
(0x77, 0x00);

754 
	}
}

756 #i‡!
deföed
(
OPENLRS_V2
)

757 
	$checkPŸs
() {

759 
pŸ_P
 = 
	`™ÆogRód
(7);

760 
pŸ_I
 = 
	`™ÆogRód
(6);

762 
pŸ_P
 =Öot_P - 512;

763 
pŸ_I
 =Öot_I - 512;

765 
pŸ_P
 =Öot_P / 25;

766 
pŸ_I
 =Öot_I / 25;

767 
	}
}

770 
	$öôO≥nLRS
() {

771 
	`pöMode
(
GREEN_LED_pö
, 
OUTPUT
);

772 
	`pöMode
(
RED_LED_pö
, 
OUTPUT
);

775 
	`pöMode
(
SDO_pö
, 
INPUT
);

776 
	`pöMode
(
SDI_pö
, 
OUTPUT
);

777 
	`pöMode
(
SCLK_pö
, 
OUTPUT
);

778 
	`pöMode
(
IRQ_pö
, 
INPUT
);

779 
	`pöMode
(
nSñ_pö
, 
OUTPUT
);

780 #i‡!
	`deföed
(
OPENLRS_V2
)

781 
	`checkPŸs
();

783 
	}
}

786 
	$rx_ª£t
() {

787 
	`_•i_wrôe
(0x07, 
RF22B_PWRSTATE_READY
);

788 
	`_•i_wrôe
(0x7e, 36);

789 
	`_•i_wrôe
(0x08, 0x03);

790 
	`_•i_wrôe
(0x08, 0x00);

791 
	`_•i_wrôe
(0x07,
RF22B_PWRSTATE_RX
 );

792 
	`_•i_wrôe
(0x05, 
RF22B_Rx_∑ckë_ª˚ived_öãºu±
);

793 
ItSètus1
 = 
	`_•i_ªad
(0x03);

794 
ItSètus2
 = 
	`_•i_ªad
(0x04);

795 
	}
}

799 
	$to_ªady_mode
() {

800 
ItSètus1
 = 
	`_•i_ªad
(0x03);

801 
ItSètus2
 = 
	`_•i_ªad
(0x04);

802 
	`_•i_wrôe
(0x07, 
RF22B_PWRSTATE_READY
);

803 
	}
}

805 
	$to_rx_mode
() {

806 
	`to_ªady_mode
();

807 
	`dñay
(50);

808 
	`rx_ª£t
();

809 
	`NOP
();

810 
	}
}

813 
	$to_¶ìp_mode
() {

816 
	`_•i_wrôe
(0x07, 
RF22B_PWRSTATE_READY
);

818 
ItSètus1
 = 
	`_•i_ªad
(0x03);

819 
ItSètus2
 = 
	`_•i_ªad
(0x04);

820 
	`_•i_wrôe
(0x07, 
RF22B_PWRSTATE_POWERDOWN
);

821 
	}
}

824 
	$‰equícy_c⁄figuøt‹
(
uöt32_t
 
‰equícy
) {

827 
‰equícy
 = frequency / 10;

828 
‰equícy
 = frequency - 24000;

829 
‰equícy
 = frequency - 19000;

830 
‰equícy
 = frequency * 64;

832 
uöt8_t
 
byã0
 = (uöt8_tË
‰equícy
;

833 
uöt8_t
 
byã1
 = (uöt8_tË(
‰equícy
 >> 8);

835 
	`_•i_wrôe
(0x76, 
byã1
);

836 
	`_•i_wrôe
(0x77, 
byã0
);

837 
	}
}

840 #i‡(
FREQUENCY_HOPPING
==1)

841 
	$H›pög
() {

842 
h›pög_ch™√l
++;

843 i‡(
h›pög_ch™√l
>2) hopping_channel = 0;

844 
	`_•i_wrôe
(0x79, 
h›_li°
[
h›pög_ch™√l
]);

845 
	}
}

848 
	$C⁄fig_O≥nLRS
() {

849 
	`RF22B_öô_∑ømëî
();

850 
	`‰equícy_c⁄figuøt‹
(
CARRIER_FREQUENCY
);

851 
	`to_rx_mode
();

852 #i‡(
FREQUENCY_HOPPING
==1)

853 
	`H›pög
();

855 
	}
}

858 
	$Ród_O≥nLRS_RC
() {

859 
uöt8_t
 
i
,
tx_d©a_Àngth
;

860 
uöt8_t
 
fú°_d©a
 = 0;

864 i‡(
	`_•i_ªad
(0x0C)==0Ë{
	`RF22B_öô_∑ømëî
(); 
	`to_rx_mode
(); }

865 i‡((
cuºítTime
-
œ°_h›pög_time
 > 25000)) {

866 
Red_LED_ON
;

867 
œ°_h›pög_time
 = 
cuºítTime
;

868 #i‡(
FREQUENCY_HOPPING
==1)

869 
	`H›pög
();

872 if(
nIRQ_0
) {

873 
Red_LED_ON
;

874 
	`£nd_ªad_addªss
(0x7f);

875 
i
 = 0; i<17; i++) {

876 
RF_Rx_Buf„r
[
i
] = 
	`ªad_8bô_d©a
();

879 #i‡
	`deföed
(
RX_RSSI_CHAN
)

880 
rx_rssi
 = 
	`_•i_ªad
(0x26);

881 
rcD©a
[
RX_RSSI_CHAN
] = 
	`m≠
(
	`c⁄°øö
(
rx_rssi
,45,120),40,120,0,2000);

884 
	`rx_ª£t
();

885 i‡(
RF_Rx_Buf„r
[0] == 'S') {

886 
i
 = 0; i<8; i++) {

887 
ãmp_öt
 = (256*
RF_Rx_Buf„r
[1+(2*
i
)]) + RF_Rx_Buffer[2+(2*i)];

888 i‡((
ãmp_öt
>1500Ë&& (ãmp_öt<4500)Ë
Sîvo_Buf„r
[
i
] =Åemp_int/2;

890 
rcD©a
[
ROLL
] = 
Sîvo_Buf„r
[0];

891 
rcD©a
[
PITCH
] = 
Sîvo_Buf„r
[1];

892 
rcD©a
[
THROTTLE
] = 
Sîvo_Buf„r
[2];

893 
rcD©a
[
YAW
] = 
Sîvo_Buf„r
[3];

894 
rcD©a
[
AUX1
] = 
Sîvo_Buf„r
[4];

895 
rcD©a
[
AUX2
] = 
Sîvo_Buf„r
[5];

896 
rcD©a
[
AUX3
] = 
Sîvo_Buf„r
[6];

897 
rcD©a
[
AUX4
] = 
Sîvo_Buf„r
[7];

898 #i‡
	`deföed
(
FAILSAFE
)

899 if(
Áûß„C¡
 > 20) failsafeCnt -= 20; failsafeCnt = 0;

902 #i‡(
FREQUENCY_HOPPING
==1)

903 
	`H›pög
();

905 
	`dñay
(1);

906 
œ°_h›pög_time
 = 
cuºítTime
;

907 
Red_LED_OFF
;

909 
Red_LED_OFF
;

910 
	}
}

914 #i‡
deföed
(
SPEK_BIND
)

915 
	$•ekBöd
() {

916 
	`pöMode
(
SPEK_BIND_DATA
, 
INPUT
);

917 
	`digôÆWrôe
(
SPEK_BIND_DATA
,
LOW
);

919 
	`pöMode
(
SPEK_BIND_GROUND
, 
INPUT
);

920 
	`digôÆWrôe
(
SPEK_BIND_GROUND
,
LOW
);

921 
	`pöMode
(
SPEK_BIND_GROUND
, 
OUTPUT
);

922 
	`digôÆWrôe
(
SPEK_BIND_GROUND
,
LOW
);

924 
	`pöMode
(
SPEK_BIND_POWER
, 
INPUT
);

925 
	`digôÆWrôe
(
SPEK_BIND_POWER
,
LOW
);

926 
	`pöMode
(
SPEK_BIND_POWER
,
OUTPUT
);

929 
	`blökLED
(4,255,1);

930 
	`digôÆWrôe
(
SPEK_BIND_POWER
,
LOW
);

931 
	`pöMode
(
SPEK_BIND_DATA
, 
OUTPUT
);

932 
	`digôÆWrôe
(
SPEK_BIND_DATA
,
LOW
);

933 
	`dñay
(1000);

934 
	`blökLED
(4,255,1);

936 
	`digôÆWrôe
(
SPEK_BIND_POWER
,
HIGH
);

937 
	`dñay
(10);

938 
	`digôÆWrôe
(
SPEK_BIND_DATA
,
HIGH
);

939 
	`dñay
(60);

941 
	`noI¡îru±s
();

942 
byã
 
i
 = 0; i < 
SPEK_BIND_PULSES
; i++) {

943 
	`digôÆWrôe
(
SPEK_BIND_DATA
,
LOW
);

944 
	`dñayMi¸o£c⁄ds
(118);

945 
	`digôÆWrôe
(
SPEK_BIND_DATA
,
HIGH
);

946 
	`dñayMi¸o£c⁄ds
(122);

948 
	`öãºu±s
();

949 
	`dñay
(60000);

951 
	}
}

	@RX.h

1 #i‚de‡
RX_H_


2 
	#RX_H_


	)

4 
c⁄figuªRe˚ivî
();

5 
compuãRC
();

6 
uöt16_t
 
ªadRawRC
(
uöt8_t
 
ch™
);

7 
ªadSîül_RX
();

8 #i‡
deföed
(
OPENLRSv2MULTI
)

9 
öôO≥nLRS
();

10 
Ród_O≥nLRS_RC
();

12 #i‡
deföed
(
SPEK_BIND
)

13 
•ekBöd
();

	@SDcard.cpp

7 
	~"Arduöo.h
"

8 
	~"c⁄fig.h
"

9 
	~"def.h
"

10 
	~"ty≥s.h
"

11 
	~"EEPROM.h
"

12 
	~"SDˇrd.h
"

13 
	~"Mu…iWii.h
"

14 
	~"Aœrms.h
"

15 
	~"GPS.h
"

17 #ifde‡
MWI_SDCARD


18 
	~<SPI.h
>

19 
	~<SdF©.h
>

20 
SdF©
 
	gsd
;

21 
SdFûe
 
	ggps_d©a
;

22 
SdFûe
 
	g≥rm™ít
;

23 
	#PERMANENT_LOG_FILENAME
 "PERM.TXT"

	)

24 
	#GPS_LOG_FILENAME
 "GPS_DATA.RAW"

	)

26 
	$öô_SD
(){

27 i‡(!
sd
.
	`begö
(
SDCARD_CSPIN
, 
SPI_HALF_SPEED
)) {

28 
f
.
SDCARD
 = 0;

29 
debug
[1] = 999;

32 
f
.
SDCARD
 = 1;

33 
debug
[1] = 000;

35 
	}
}

39 #ifde‡
UBLOX


40 
	$wrôeGPSLog
(
uöt32_t
 
gp°ime
, 
öt32_t
 
œtôude
, i¡32_à
l⁄gôude
, i¡32_à
Ætôude
) {

42 
	$wrôeGPSLog
(
öt32_t
 
œtôude
, i¡32_à
l⁄gôude
, i¡32_à
Ætôude
) {

44 i‡(
f
.
SDCARD
 == 0) ;

45 i‡(
gps_d©a
.
	`›í
(
GPS_LOG_FILENAME
, 
O_WRITE
 | 
O_CREAT
 | 
O_APPEND
)) {

46 #ifde‡
UBLOX


47 
gps_d©a
.
	`¥öt
(
gp°ime
); gps_d©a.
	`wrôe
(',');

49 
gps_d©a
.
	`¥öt
(
œtôude
); gps_d©a.
	`wrôe
(',');

50 
gps_d©a
.
	`¥öt
(
l⁄gôude
); gps_d©a.
	`wrôe
(',');

51 
gps_d©a
.
	`¥öt
(
Ætôude
); gps_d©a.
	`¥öén
();

52 
gps_d©a
.
	`˛o£
();

56 
	}
}

58 
	$wrôePLogToSD
() {

59 i‡(
f
.
SDCARD
 == 0) ;

60 
∂og
.
checksum
 = 
	`ˇlcuœã_sum
((
uöt8_t
*)&plog, (plog));

61 i‡(
≥rm™ít
.
	`›í
(
PERMANENT_LOG_FILENAME
, 
O_WRITE
 | 
O_CREAT
 | 
O_TRUNC
)) {

62 
≥rm™ít
.
	`¥öt
(
	`F
("¨m="));Öîm™ít.
	`¥öén
(
∂og
.
¨m
);

63 
≥rm™ít
.
	`¥öt
(
	`F
("dißrm="));Öîm™ít.
	`¥öén
(
∂og
.
dißrm
);

64 
≥rm™ít
.
	`¥öt
(
	`F
("°¨t="));Öîm™ít.
	`¥öén
(
∂og
.
°¨t
);

65 
≥rm™ít
.
	`¥öt
(
	`F
("¨med_time="));Öîm™ít.
	`¥öén
(
∂og
.
¨med_time
);

66 
≥rm™ít
.
	`¥öt
(
	`F
("li„time="));Öîm™ít.
	`¥öén
(
∂og
.
li„time
, 
DEC
);

67 
≥rm™ít
.
	`¥öt
(
	`F
("Áûß„="));Öîm™ít.
	`¥öén
(
∂og
.
Áûß„
);

68 
≥rm™ít
.
	`¥öt
(
	`F
("i2c="));Öîm™ít.
	`¥öén
(
∂og
.
i2c
);

69 
≥rm™ít
.
	`¥öt
(
	`F
("ru¬ög="));Öîm™ít.
	`¥öén
(
∂og
.
ru¬ög
, 
DEC
);

70 
≥rm™ít
.
	`¥öt
(
	`F
("checksum="));Öîm™ít.
	`¥öén
(
∂og
.
checksum
, 
DEC
);

71 
≥rm™ít
.
	`¥öt
(
	`F
("debug="));Öîm™ít.¥öt(
debug
[0]);

72 
≥rm™ít
.
	`¥öt
(
	`F
(","));Öîm™ít.¥öt(
debug
[1]);

73 
≥rm™ít
.
	`¥öt
(
	`F
(","));Öîm™ít.¥öt(
debug
[2]);

74 
≥rm™ít
.
	`¥öt
(
	`F
(","));Öîm™ít.
	`¥öén
(
debug
[3]);

75 
≥rm™ít
.
	`¥öén
();

76 
≥rm™ít
.
	`˛o£
();

80 
	}
}

82 
	$fûlPlogSåu˘
(* 
key
, * 
vÆue
) {

83 i‡(
	`°rcmp
(
key
, "¨m"Ë=0Ë
	`ssˇnf
(
vÆue
, "%u", &
∂og
.
¨m
);

84 i‡(
	`°rcmp
(
key
, "dißrm"Ë=0Ë
	`ssˇnf
(
vÆue
, "%u", &
∂og
.
dißrm
);

85 i‡(
	`°rcmp
(
key
, "°¨t"Ë=0Ë
	`ssˇnf
(
vÆue
, "%u", &
∂og
.
°¨t
);

86 i‡(
	`°rcmp
(
key
, "¨med_time"Ë=0Ë
	`ssˇnf
(
vÆue
, "%lu", &
∂og
.
¨med_time
);

87 i‡(
	`°rcmp
(
key
, "li„time"Ë=0Ë
	`ssˇnf
(
vÆue
, "%lu", &
∂og
.
li„time
);

88 i‡(
	`°rcmp
(
key
, "Áûß„"Ë=0Ë
	`ssˇnf
(
vÆue
, "%u", &
∂og
.
Áûß„
);

89 i‡(
	`°rcmp
(
key
, "i2c"Ë=0Ë
	`ssˇnf
(
vÆue
, "%u", &
∂og
.
i2c
);

90 i‡(
	`°rcmp
(
key
, "ru¬ög"Ë=0Ë
	`ssˇnf
(
vÆue
, "%hhu", &
∂og
.
ru¬ög
);

91 i‡(
	`°rcmp
(
key
, "checksum"Ë=0Ë
	`ssˇnf
(
vÆue
, "%hhu", &
∂og
.
checksum
);

92 
	}
}

94 
	$ªadPLogFromSD
() {

95 i‡(
f
.
SDCARD
 == 0) ;

96 
SdFûe
 
myfûe
;

97 
key
[12];

98 
vÆue
[32];

99 * 
èbPå
 = 
key
;

100 
c
;

101 
uöt8_t
 
i
 = 0;

103 i‡(
myfûe
.
	`›í
(
PERMANENT_LOG_FILENAME
, 
O_READ
)) {

104 
myfûe
.
	`avaûabÀ
()) {

105 
c
 = 
myfûe
.
	`ªad
();

106 ()
c
) {

110 *
èbPå
 = '\0';

111 
èbPå
 = 
vÆue
;

114 *
èbPå
 = '\0';

115 
èbPå
 = 
key
;

116 
i
 = 0;

117 
	`fûlPlogSåu˘
(
key
, 
vÆue
);

118 
	`mem£t
(
key
, '\0', (key));

119 
	`mem£t
(
vÆue
, '\0', (value));

122 
i
++;

123 i‡(
i
 <= 12) {

124 *
èbPå
 = ()
c
;

125 
èbPå
++;

131 i‡(
	`ˇlcuœã_sum
((
uöt8_t
*)&
∂og
, ’log)Ë!∂og.
checksum
) {

132 #i‡
	`deföed
(
BUZZER
)

133 
Æ¨mAºay
[7] = 3;

134 
	`blökLED
(9, 100, 3);

137 
∂og
.
¨m
 =Ölog.
dißrm
 =Ölog.
°¨t
 =Ölog.
Áûß„
 =Ölog.
i2c
 = 11;

138 
∂og
.
ru¬ög
 = 1;

139 
∂og
.
li„time
 =Ölog.
¨med_time
 = 3;

140 
	`wrôePLogToSD
();

142 
	}
}

	@SDcard.h

1 #i‚de‡
SDCARD_H_


2 
	#SDCARD_H_


	)

3 #ifde‡
MWI_SDCARD


4 
öô_SD
();

5 #ifde‡
UBLOX


6 
wrôeGPSLog
(
uöt32_t
 
gtime
, 
öt32_t
 
œtôude
, i¡32_à
l⁄gôude
, i¡32_à
Ætôude
);

8 
wrôeGPSLog
(
öt32_t
 
œtôude
, i¡32_à
l⁄gôude
, i¡32_à
Ætôude
);

10 
wrôePLogToSD
();

11 
fûlPlogSåu˘
(* 
key
, * 
vÆue
);

12 
ªadPLogFromSD
();

	@Sensors.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"ty≥s.h
"

5 
	~"Mu…iWii.h
"

6 
	~"Aœrms.h
"

7 
	~"EEPROM.h
"

8 
	~"IMU.h
"

9 
	~"LCD.h
"

10 
	~"Sís‹s.h
"

12 
Devi˚_Mag_gëADC
();

13 
B¨o_öô
();

14 
Mag_öô
();

15 
ACC_öô
();

21 #i‡!
deföed
(
ACC_ORIENTATION
)

22 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = X; imu.accADC[
PITCH
] = Y; imu.accADC[
YAW
] = Z;}

	)

24 #i‡!
deföed
(
GYRO_ORIENTATION
)

25 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = Y; imu.gyroADC[
YAW
] = Z;}

	)

27 #i‡!
deföed
(
MAG_ORIENTATION
)

28 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = Z;}

	)

33 #i‡
deföed
(
GYRO_LPF_256HZ
Ë|| deföed(
GYRO_LPF_188HZ
Ë|| deföed(
GYRO_LPF_98HZ
Ë|| deföed(
GYRO_LPF_42HZ
Ë|| deföed(
GYRO_LPF_20HZ
Ë|| deföed(
GYRO_LPF_10HZ
Ë|| deföed(
GYRO_LPF_5HZ
)

34 #i‡
deföed
(
GYRO_LPF_256HZ
)

35 
	#GYRO_DLPF_CFG
 0

	)

37 #i‡
deföed
(
GYRO_LPF_188HZ
)

38 
	#GYRO_DLPF_CFG
 1

	)

40 #i‡
deföed
(
GYRO_LPF_98HZ
)

41 
	#GYRO_DLPF_CFG
 2

	)

43 #i‡
deföed
(
GYRO_LPF_42HZ
)

44 
	#GYRO_DLPF_CFG
 3

	)

46 #i‡
deföed
(
GYRO_LPF_20HZ
)

47 
	#GYRO_DLPF_CFG
 4

	)

49 #i‡
deföed
(
GYRO_LPF_10HZ
)

50 
	#GYRO_DLPF_CFG
 5

	)

52 #i‡
deföed
(
GYRO_LPF_5HZ
)

53 
	#GYRO_DLPF_CFG
 6

	)

56 
	#GYRO_DLPF_CFG
 0

58 

	)

59 
uöt8_t
 
	gøwADC
[6];

60 #i‡
deföed
(
WMP
)

61 
uöt32_t
 
	g√uåÆizeTime
 = 0;

68 
	$i2c_öô
() {

69 #i‡
	`deföed
(
INTERNAL_I2C_PULLUPS
)

70 
I2C_PULLUPS_ENABLE


72 
I2C_PULLUPS_DISABLE


74 
TWSR
 = 0;

75 
TWBR
 = ((
F_CPU
 / 400000) - 16) / 2;

76 
TWCR
 = 1<<
TWEN
;

77 
i2c_îr‹s_cou¡
 = 0;

78 
	}
}

80 
__©åibuã__
 ((
noölöe
)Ë
	$waôTønsmissi⁄I2C
(
uöt8_t
 
tw¸
) {

81 
TWCR
 = 
tw¸
;

82 
uöt8_t
 
cou¡
 = 255;

83 !(
TWCR
 & (1<<
TWINT
))) {

84 
cou¡
--;

85 i‡(
cou¡
==0) {

86 
TWCR
 = 0;

87 #i‡
	`deföed
(
WMP
)

88 
√uåÆizeTime
 = 
	`mi¸os
();

90 
i2c_îr‹s_cou¡
++;

94 
	}
}

96 
	$i2c_ªp_°¨t
(
uöt8_t
 
addªss
) {

97 
	`waôTønsmissi⁄I2C
((1<<
TWINT
Ë| (1<<
TWSTA
Ë| (1<<
TWEN
));

98 
TWDR
 = 
addªss
;

99 
	`waôTønsmissi⁄I2C
((1<<
TWINT
Ë| (1<<
TWEN
));

100 
	}
}

102 
	$i2c_°›
() {

103 
TWCR
 = (1 << 
TWINT
Ë| (1 << 
TWEN
Ë| (1 << 
TWSTO
);

105 
	}
}

107 
	$i2c_wrôe
(
uöt8_t
 
d©a
 ) {

108 
TWDR
 = 
d©a
;

109 
	`waôTønsmissi⁄I2C
((1<<
TWINT
Ë| (1<<
TWEN
));

110 
	}
}

112 
uöt8_t
 
	$i2c_ªadAck
() {

113 
	`waôTønsmissi⁄I2C
((1<<
TWINT
Ë| (1<<
TWEN
Ë| (1<<
TWEA
));

114  
TWDR
;

115 
	}
}

117 
uöt8_t
 
	$i2c_ªadNak
() {

118 
	`waôTønsmissi⁄I2C
((1<<
TWINT
Ë| (1<<
TWEN
));

119 
uöt8_t
 
r
 = 
TWDR
;

120 
	`i2c_°›
();

121  
r
;

122 
	}
}

124 
	$i2c_ªad_ªg_to_buf
(
uöt8_t
 
add
, uöt8_à
ªg
, uöt8_à*
buf
, uöt8_à
size
) {

125 
	`i2c_ªp_°¨t
(
add
<<1);

126 
	`i2c_wrôe
(
ªg
);

127 
	`i2c_ªp_°¨t
((
add
<<1) | 1);

128 
uöt8_t
 *
b
 = 
buf
;

129 --
size
Ë*
b
++ = 
	`i2c_ªadAck
();

130 *
b
 = 
	`i2c_ªadNak
();

131 
	}
}

133 
	$i2c_gëSixRawADC
(
uöt8_t
 
add
, uöt8_à
ªg
) {

134 
	`i2c_ªad_ªg_to_buf
(
add
, 
ªg
, 
øwADC
, 6);

135 
	}
}

137 
	$i2c_wrôeReg
(
uöt8_t
 
add
, uöt8_à
ªg
, uöt8_à
vÆ
) {

138 
	`i2c_ªp_°¨t
(
add
<<1);

139 
	`i2c_wrôe
(
ªg
);

140 
	`i2c_wrôe
(
vÆ
);

141 
	`i2c_°›
();

142 
	}
}

144 
uöt8_t
 
	$i2c_ªadReg
(
uöt8_t
 
add
, uöt8_à
ªg
) {

145 
uöt8_t
 
vÆ
;

146 
	`i2c_ªad_ªg_to_buf
(
add
, 
ªg
, &
vÆ
, 1);

147  
vÆ
;

148 
	}
}

153 
	$GYRO_Comm⁄
() {

154 
öt16_t
 
¥eviousGyroADC
[3] = {0,0,0};

155 
öt32_t
 
g
[3];

156 
uöt8_t
 
axis
, 
tût
=0;

158 #i‡
deföed
 
MMGYRO


161 
öt16_t
 
medüMobûeGyroADC
[3][
MMGYROVECTORLENGTH
];

162 
öt32_t
 
medüMobûeGyroADCSum
[3];

163 
uöt8_t
 
medüMobûeGyroIDX
;

167 i‡(
ˇlibøtögG
>0) {

168 #i‡
	`deföed
(
FIXEDWING
Ë&& deföed(
SERVO_FIELD_TRIM
)

169 i‡(
imu
.
accSmoŸh
[2] < -
ACC_1G
 / 2 && 
ˇlibøtögG
==1){

170 
i
=
PRI_SERVO_FROM
-1;i<
PRI_SERVO_TO
;i++Ë
c⁄f
.
£rvoC⁄f
[i].
middÀ
 = 
	`c⁄°øö
(
£rvo
[i],
MIDRC
-100,MIDRC+100);

171 
	`wrôeP¨ams
(0);

174 
axis
 = 0;áxis < 3;áxis++) {

175 i‡(
ˇlibøtögG
 == 512) {

176 
g
[
axis
]=0;

177 #i‡
	`deföed
(
GYROCALIBRATIONFAILSAFE
)

178 
¥eviousGyroADC
[
axis
] = 
imu
.
gyroADC
[axis];

180 i‡(
ˇlibøtögG
 % 10 == 0) {

181 if(
	`abs
(
imu
.
gyroADC
[
axis
] - 
¥eviousGyroADC
[axis]Ë> 8Ë
tût
=1;

182 
¥eviousGyroADC
[
axis
] = 
imu
.
gyroADC
[axis];

185 
g
[
axis
] +=
imu
.
gyroADC
[axis];

186 
gyroZîo
[
axis
]=
g
[axis]>>9;

187 i‡(
ˇlibøtögG
 == 1) {

188 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_ELSE
);

191 #i‡
	`deföed
(
GYROCALIBRATIONFAILSAFE
)

192 if(
tût
) {

193 
ˇlibøtögG
=1000;

194 
LEDPIN_ON
;

196 
ˇlibøtögG
--;

197 
LEDPIN_OFF
;

201 
ˇlibøtögG
--;

205 #ifde‡
MMGYRO


206 
medüMobûeGyroIDX
 = ++medüMobûeGyroIDX % 
c⁄f
.
mmgyro
;

207 
axis
 = 0;áxis < 3;áxis++) {

208 
imu
.
gyroADC
[
axis
] -
gyroZîo
[axis];

209 
medüMobûeGyroADCSum
[
axis
] -
medüMobûeGyroADC
[axis][
medüMobûeGyroIDX
];

211 
medüMobûeGyroADC
[
axis
][
medüMobûeGyroIDX
] = 
	`c⁄°øö
(
imu
.
gyroADC
[axis],
¥eviousGyroADC
[axis]-800,previousGyroADC[axis]+800);

212 
medüMobûeGyroADCSum
[
axis
] +
medüMobûeGyroADC
[axis][
medüMobûeGyroIDX
];

213 
imu
.
gyroADC
[
axis
] = 
medüMobûeGyroADCSum
[axis] / 
c⁄f
.
mmgyro
;

215 
axis
 = 0;áxis < 3;áxis++) {

216 
imu
.
gyroADC
[
axis
] -
gyroZîo
[axis];

218 
imu
.
gyroADC
[
axis
] = 
	`c⁄°øö
(imu.gyroADC[axis],
¥eviousGyroADC
[axis]-800,previousGyroADC[axis]+800);

220 
¥eviousGyroADC
[
axis
] = 
imu
.
gyroADC
[axis];

223 #i‡
	`deföed
(
SENSORS_TILT_45DEG_LEFT
)

224 
öt16_t
 
ãmp
 = ((
imu
.
gyroADC
[
PITCH
] - imu.gyroADC[
ROLL
] )*7)/10;

225 
imu
.
gyroADC
[
ROLL
] = ((imu.gyroADC[ROLL] + imu.gyroADC[
PITCH
])*7)/10;

226 
imu
.
gyroADC
[
PITCH
]
ãmp
;

228 #i‡
	`deföed
(
SENSORS_TILT_45DEG_RIGHT
)

229 
öt16_t
 
ãmp
 = ((
imu
.
gyroADC
[
PITCH
] + imu.gyroADC[
ROLL
] )*7)/10;

230 
imu
.
gyroADC
[
ROLL
] = ((imu.gyroADC[ROLL] - imu.gyroADC[
PITCH
])*7)/10;

231 
imu
.
gyroADC
[
PITCH
]
ãmp
;

233 
	}
}

238 
	$ACC_Comm⁄
() {

239 
öt32_t
 
a
[3];

240 i‡(
ˇlibøtögA
>0) {

241 
ˇlibøtögA
--;

242 
uöt8_t
 
axis
 = 0;áxis < 3;áxis++) {

243 i‡(
ˇlibøtögA
 =511Ë
a
[
axis
]=0;

244 
a
[
axis
] +=
imu
.
accADC
[axis];

245 
globÆ_c⁄f
.
accZîo
[
axis
] = 
a
[axis]>>9;

247 i‡(
ˇlibøtögA
 == 0) {

248 
globÆ_c⁄f
.
accZîo
[
YAW
] -
ACC_1G
;

249 
c⁄f
.
™gÀTrim
[
ROLL
] = 0;

250 
c⁄f
.
™gÀTrim
[
PITCH
] = 0;

251 
	`wrôeGlobÆSë
(1);

254 #i‡
	`deföed
(
INFLIGHT_ACC_CALIBRATION
)

255 
öt32_t
 
b
[3];

256 
öt16_t
 
accZîo_ßved
[3] = {0,0,0};

257 
öt16_t
 
™gÀTrim_ßved
[2] = {0, 0};

259 i‡(
InÊightˇlibøtögA
==50) {

260 
accZîo_ßved
[
ROLL
] = 
globÆ_c⁄f
.
accZîo
[ROLL] ;

261 
accZîo_ßved
[
PITCH
] = 
globÆ_c⁄f
.
accZîo
[PITCH];

262 
accZîo_ßved
[
YAW
] = 
globÆ_c⁄f
.
accZîo
[YAW] ;

263 
™gÀTrim_ßved
[
ROLL
] = 
c⁄f
.
™gÀTrim
[ROLL] ;

264 
™gÀTrim_ßved
[
PITCH
] = 
c⁄f
.
™gÀTrim
[PITCH] ;

266 i‡(
InÊightˇlibøtögA
>0) {

267 
uöt8_t
 
axis
 = 0;áxis < 3;áxis++) {

269 i‡(
InÊightˇlibøtögA
 =50Ë
b
[
axis
]=0;

271 
b
[
axis
] +=
imu
.
accADC
[axis];

273 
imu
.
accADC
[
axis
]=0;

274 
globÆ_c⁄f
.
accZîo
[
axis
]=0;

277 i‡(
InÊightˇlibøtögA
 == 1) {

278 
AccInÊightCÆibøti⁄A˘ive
 = 0;

279 
AccInÊightCÆibøti⁄MósuªmítD⁄e
 = 1;

280 
	`SET_ALARM_BUZZER
(
ALRM_FAC_CONFIRM
, 
ALRM_LVL_CONFIRM_1
);

282 
globÆ_c⁄f
.
accZîo
[
ROLL
] = 
accZîo_ßved
[ROLL] ;

283 
globÆ_c⁄f
.
accZîo
[
PITCH
] = 
accZîo_ßved
[PITCH];

284 
globÆ_c⁄f
.
accZîo
[
YAW
] = 
accZîo_ßved
[YAW] ;

285 
c⁄f
.
™gÀTrim
[
ROLL
] = 
™gÀTrim_ßved
[ROLL] ;

286 
c⁄f
.
™gÀTrim
[
PITCH
] = 
™gÀTrim_ßved
[PITCH] ;

288 
InÊightˇlibøtögA
--;

291 i‡(
AccInÊightCÆibøti⁄SavëoEEProm
 == 1){

292 
AccInÊightCÆibøti⁄SavëoEEProm
 = 0;

293 
globÆ_c⁄f
.
accZîo
[
ROLL
] = 
b
[ROLL]/50;

294 
globÆ_c⁄f
.
accZîo
[
PITCH
] = 
b
[PITCH]/50;

295 
globÆ_c⁄f
.
accZîo
[
YAW
] = 
b
[YAW]/50-
ACC_1G
;

296 
c⁄f
.
™gÀTrim
[
ROLL
] = 0;

297 
c⁄f
.
™gÀTrim
[
PITCH
] = 0;

298 
	`wrôeGlobÆSë
(1);

301 
imu
.
accADC
[
ROLL
] -
globÆ_c⁄f
.
accZîo
[ROLL] ;

302 
imu
.
accADC
[
PITCH
] -
globÆ_c⁄f
.
accZîo
[PITCH];

303 
imu
.
accADC
[
YAW
] -
globÆ_c⁄f
.
accZîo
[YAW] ;

305 #i‡
	`deföed
(
SENSORS_TILT_45DEG_LEFT
)

306 
öt16_t
 
ãmp
 = ((
imu
.
accADC
[
PITCH
] - imu.accADC[
ROLL
] )*7)/10;

307 
imu
.
accADC
[
ROLL
] = ((imu.accADC[ROLL] + imu.accADC[
PITCH
])*7)/10;

308 
imu
.
accADC
[
PITCH
] = 
ãmp
;

310 #i‡
	`deföed
(
SENSORS_TILT_45DEG_RIGHT
)

311 
öt16_t
 
ãmp
 = ((
imu
.
accADC
[
PITCH
] + imu.accADC[
ROLL
] )*7)/10;

312 
imu
.
accADC
[
ROLL
] = ((imu.accADC[ROLL] - imu.accADC[
PITCH
])*7)/10;

313 
imu
.
accADC
[
PITCH
] = 
ãmp
;

315 
	}
}

320 #i‡
BARO


321 
	$B¨o_Comm⁄
() {

322 
öt32_t
 
b¨oHi°Tab
[
BARO_TAB_SIZE
];

323 
uöt8_t
 
b¨oHi°Idx
;

325 
uöt8_t
 
ödex∂us1
 = (
b¨oHi°Idx
 + 1);

326 i‡(
ödex∂us1
 =
BARO_TAB_SIZE
) indexplus1 = 0;

327 
b¨oHi°Tab
[
b¨oHi°Idx
] = 
b¨oPªssuª
;

328 
b¨oPªssuªSum
 +
b¨oHi°Tab
[
b¨oHi°Idx
];

329 
b¨oPªssuªSum
 -
b¨oHi°Tab
[
ödex∂us1
];

330 
b¨oHi°Idx
 = 
ödex∂us1
;

331 
	}
}

346 #i‡
deföed
(
BMP085
)

347 
	#BMP085_ADDRESS
 0x77

	)

351 
öt16_t
 
	mac1
, 
	mac2
, 
	mac3
;

352 
uöt16_t
 
	mac4
, 
	mac5
, 
	mac6
;

353 
öt16_t
 
	mb1
, 
	mb2
, 
	mmb
, 
	mmc
, 
	mmd
;

354 uni⁄ {
uöt16_t
 
	mvÆ
; 
uöt8_t
 
	møw
[2]; } 
	mut
;

355 uni⁄ {
uöt32_t
 
	mvÆ
; 
uöt8_t
 
	møw
[4]; } 
	mup
;

356 
uöt8_t
 
	m°©e
;

357 
uöt32_t
 
	mdódlöe
;

358 } 
	gbmp085_˘x
;

359 
	#OSS
 3

	)

363 
	$sw≠_ídü¬ess
(*
buf
, 
size_t
 
size
) {

367 
uöt8_t
 
åay
;

368 
uöt8_t
 *
‰om
;

369 
uöt8_t
 *
to
;

371 
‰om
 = (
uöt8_t
*)
buf
, 
to
 = &‰om[
size
-1]; from <Åo; from++,Åo--) {

372 
åay
 = *
‰om
;

373 *
‰om
 = *
to
;

374 *
to
 = 
åay
;

376 
	}
}

378 
	$i2c_BMP085_ªadCÆibøti⁄
(){

379 
	`dñay
(10);

381 
size_t
 
s_byãs
 = (
uöt8_t
*)&
bmp085_˘x
.
md
 - (uöt8_t*)&bmp085_˘x.
ac1
 + (bmp085_ctx.ac1);

382 
	`i2c_ªad_ªg_to_buf
(
BMP085_ADDRESS
, 0xAA, (
uöt8_t
*)&
bmp085_˘x
.
ac1
, 
s_byãs
);

384 
öt16_t
 *
p
;

385 
p
 = &
bmp085_˘x
.
ac1
;Ö <&bmp085_˘x.
md
;Ö++) {

386 
	`sw≠_ídü¬ess
(
p
, (*p));

388 
	}
}

391 
	$i2c_BMP085_UT_Sèπ
() {

392 
	`i2c_wrôeReg
(
BMP085_ADDRESS
,0xf4,0x2e);

393 
	`i2c_ªp_°¨t
(
BMP085_ADDRESS
<<1);

394 
	`i2c_wrôe
(0xF6);

395 
	`i2c_°›
();

396 
	}
}

399 
	$i2c_BMP085_UP_Sèπ
 () {

400 
	`i2c_wrôeReg
(
BMP085_ADDRESS
,0xf4,0x34+(
OSS
<<6));

401 
	`i2c_ªp_°¨t
(
BMP085_ADDRESS
<<1);

402 
	`i2c_wrôe
(0xF6);

403 
	`i2c_°›
();

404 
	}
}

408 
	$i2c_BMP085_UP_Ród
 () {

409 
	`i2c_ªp_°¨t
((
BMP085_ADDRESS
<<1) | 1);

410 
bmp085_˘x
.
up
.
øw
[2] = 
	`i2c_ªadAck
();

411 
bmp085_˘x
.
up
.
øw
[1] = 
	`i2c_ªadAck
();

412 
bmp085_˘x
.
up
.
øw
[0] = 
	`i2c_ªadNak
();

413 
	}
}

417 
	$i2c_BMP085_UT_Ród
() {

418 
	`i2c_ªp_°¨t
((
BMP085_ADDRESS
<<1) | 1);

419 
bmp085_˘x
.
ut
.
øw
[1] = 
	`i2c_ªadAck
();

420 
bmp085_˘x
.
ut
.
øw
[0] = 
	`i2c_ªadNak
();

421 
	}
}

423 
	$i2c_BMP085_CÆcuœã
() {

424 
öt32_t
 
x1
, 
x2
, 
x3
, 
b3
, 
b5
, 
b6
, 
p
, 
tmp
;

425 
uöt32_t
 
b4
, 
b7
;

427 
x1
 = ((
öt32_t
)
bmp085_˘x
.
ut
.
vÆ
 - bmp085_˘x.
ac6
Ë* bmp085_˘x.
ac5
 >> 15;

428 
x2
 = ((
öt32_t
)
bmp085_˘x
.
mc
 << 11Ë/ (
x1
 + bmp085_˘x.
md
);

429 
b5
 = 
x1
 + 
x2
;

430 
b¨oTem≥øtuª
 = (
b5
 * 10 + 8) >> 4;

432 
b6
 = 
b5
 - 4000;

433 
x1
 = (
bmp085_˘x
.
b2
 * (
b6
 * b6 >> 12)) >> 11;

434 
x2
 = 
bmp085_˘x
.
ac2
 * 
b6
 >> 11;

435 
x3
 = 
x1
 + 
x2
;

436 
tmp
 = 
bmp085_˘x
.
ac1
;

437 
tmp
 = (tmp*4 + 
x3
Ë<< 
OSS
;

438 
b3
 = (
tmp
+2)/4;

439 
x1
 = 
bmp085_˘x
.
ac3
 * 
b6
 >> 13;

440 
x2
 = (
bmp085_˘x
.
b1
 * (
b6
 * b6 >> 12)) >> 16;

441 
x3
 = ((
x1
 + 
x2
) + 2) >> 2;

442 
b4
 = (
bmp085_˘x
.
ac4
 * (
uöt32_t
)(
x3
 + 32768)) >> 15;

443 
b7
 = ((
uöt32_t
Ë(
bmp085_˘x
.
up
.
vÆ
 >> (8-
OSS
)Ë- 
b3
) * (50000 >> OSS);

444 
p
 = 
b7
 < 0x80000000 ? (b7 * 2Ë/ 
b4
 : (b7 / b4) * 2;

445 
x1
 = (
p
 >> 8) * (p >> 8);

446 
x1
 = (x1 * 3038) >> 16;

447 
x2
 = (-7357 * 
p
) >> 16;

448 
b¨oPªssuª
 = 
p
 + ((
x1
 + 
x2
 + 3791) >> 4);

449 
	}
}

451 
	$B¨o_öô
() {

452 
	`dñay
(10);

453 
	`i2c_BMP085_ªadCÆibøti⁄
();

454 
	`dñay
(5);

455 
	`i2c_BMP085_UT_Sèπ
();

456 
bmp085_˘x
.
dódlöe
 = 
cuºítTime
+5000;

457 
	}
}

460 
uöt8_t
 
	$B¨o_upd©e
() {

461 i‡(
cuºítTime
 < 
bmp085_˘x
.
dódlöe
)  0;

462 
bmp085_˘x
.
dódlöe
 = 
cuºítTime
+6000;

463 i‡(
bmp085_˘x
.
°©e
 == 0) {

464 
	`i2c_BMP085_UT_Ród
();

465 
	`i2c_BMP085_UP_Sèπ
();

466 
bmp085_˘x
.
°©e
 = 1;

467 
	`B¨o_Comm⁄
();

468 
bmp085_˘x
.
dódlöe
 += 21000;

471 
	`i2c_BMP085_UP_Ród
();

472 
	`i2c_BMP085_UT_Sèπ
();

473 
	`i2c_BMP085_CÆcuœã
();

474 
bmp085_˘x
.
°©e
 = 0;

477 
	}
}

486 #i‡
deföed
(
MS561101BA
)

487 #i‡!
deföed
(
MS561101BA_ADDRESS
)

488 
	#MS561101BA_ADDRESS
 0x77

491 

	)

493 
	#MS561101BA_PRESSURE
 0x40

	)

494 
	#MS561101BA_TEMPERATURE
 0x50

	)

495 
	#MS561101BA_RESET
 0x1E

	)

498 
	#MS561101BA_OSR_256
 0x00

	)

499 
	#MS561101BA_OSR_512
 0x02

	)

500 
	#MS561101BA_OSR_1024
 0x04

	)

501 
	#MS561101BA_OSR_2048
 0x06

	)

502 
	#MS561101BA_OSR_4096
 0x08

	)

504 
	#OSR
 
MS561101BA_OSR_4096


	)

508 
uöt16_t
 
	mc
[7];

509 
uöt32_t
 
	mut
;

510 
uöt32_t
 
	mup
;

511 
uöt8_t
 
	m°©e
;

512 
uöt16_t
 
	mdódlöe
;

513 } 
	gms561101ba_˘x
;

515 
	$B¨o_öô
() {

517 
	`i2c_wrôeReg
(
MS561101BA_ADDRESS
, 
MS561101BA_RESET
, 0);

518 
	`dñay
(100);

521 uni⁄ {
uöt16_t
 
vÆ
; 
uöt8_t
 
øw
[2]; } 
d©a
;

522 
uöt8_t
 
i
=0;i<6;i++) {

523 
	`i2c_ªp_°¨t
(
MS561101BA_ADDRESS
<<1);

524 
	`i2c_wrôe
(0xA2+2*
i
);

525 
	`i2c_ªp_°¨t
((
MS561101BA_ADDRESS
<<1) | 1);

526 
d©a
.
øw
[1] = 
	`i2c_ªadAck
();

527 
d©a
.
øw
[0] = 
	`i2c_ªadNak
();

528 
ms561101ba_˘x
.
c
[
i
+1] = 
d©a
.
vÆ
;

530 
	}
}

533 
	$i2c_MS561101BA_UT_‹_UP_Sèπ
(
uöt8_t
 
ªg
) {

534 
	`i2c_ªp_°¨t
(
MS561101BA_ADDRESS
<<1);

535 
	`i2c_wrôe
(
ªg
);

536 
	`i2c_°›
();

537 
	}
}

539 
	$i2c_MS561101BA_UT_‹_UP_Ród
(
uöt32_t
* 
vÆ
) {

540 uni⁄ {
uöt32_t
 
vÆ
; 
uöt8_t
 
øw
[4]; } 
d©a
;

541 
	`i2c_ªp_°¨t
(
MS561101BA_ADDRESS
<<1);

542 
	`i2c_wrôe
(0);

543 
	`i2c_ªp_°¨t
((
MS561101BA_ADDRESS
<<1) | 1);

544 
d©a
.
øw
[2] = 
	`i2c_ªadAck
();

545 
d©a
.
øw
[1] = 
	`i2c_ªadAck
();

546 
d©a
.
øw
[0] = 
	`i2c_ªadNak
();

547 *
vÆ
 = 
d©a
.val;

548 
	}
}

552 
	$i2c_MS561101BA_CÆcuœã
() {

553 
öt32_t
 
dñt
;

555 
dT
 = (
öt32_t
)
ms561101ba_˘x
.
ut
 - (öt32_t)((
uöt32_t
)ms561101ba_˘x.
c
[5] << 8);

556 
off
 = ((
uöt32_t
)
ms561101ba_˘x
.
c
[2] <<16Ë+ ((
dT
 * ms561101ba_ctx.c[4]) /((uint32_t)1<<7));

557 
£ns
 = ((
uöt32_t
)
ms561101ba_˘x
.
c
[1] <<15Ë+ ((
dT
 * ms561101ba_ctx.c[3]) /((uint32_t)1<<8));

558 
dñt
 = (
dT
 * 
ms561101ba_˘x
.
c
[6])/((
uöt32_t
)1<<23);

559 
b¨oTem≥øtuª
 = 
dñt
 + 2000;

560 i‡(
dñt
 < 0) {

561 
dñt
 *= 5 * delt;

562 
off
 -
dñt
>>1;

563 
£ns
 -
dñt
>>2;

565 
b¨oPªssuª
 = (–(
ms561101ba_˘x
.
up
 * 
£ns
 ) /((
uöt32_t
)1<<21)Ë- 
off
)/((uint32_t)1<<15);

566 
	}
}

569 
uöt8_t
 
	$B¨o_upd©e
() {

570 
uöt32_t
* 
øwVÆPoöãr
;

571 
uöt8_t
 
comm™dRegi°î
;

573 i‡(
ms561101ba_˘x
.
°©e
 == 2) {

574 
ms561101ba_˘x
.
°©e
 = 0;

575 
	`i2c_MS561101BA_CÆcuœã
();

578 i‡((
öt16_t
)(
cuºítTime
 - 
ms561101ba_˘x
.
dódlöe
)<0)  0;

579 
ms561101ba_˘x
.
dódlöe
 = 
cuºítTime
+10000;

580 i‡(
ms561101ba_˘x
.
°©e
 == 0) {

581 
	`B¨o_Comm⁄
();

582 
øwVÆPoöãr
 = &
ms561101ba_˘x
.
ut
;

583 
comm™dRegi°î
 = 
MS561101BA_PRESSURE
 + 
OSR
;

585 
øwVÆPoöãr
 = &
ms561101ba_˘x
.
up
;

586 
comm™dRegi°î
 = 
MS561101BA_TEMPERATURE
 + 
OSR
;

588 
ms561101ba_˘x
.
°©e
++;

589 
	`i2c_MS561101BA_UT_‹_UP_Ród
(
øwVÆPoöãr
);

590 
	`i2c_MS561101BA_UT_‹_UP_Sèπ
(
comm™dRegi°î
);

592 
	}
}

598 #i‡
deföed
(
MMA7455
)

599 #i‡!
deföed
(
MMA7455_ADDRESS
)

600 
	#MMA7455_ADDRESS
 0x1D

	)

603 
	$ACC_öô
 () {

604 
	`dñay
(10);

605 
	`i2c_wrôeReg
(
MMA7455_ADDRESS
,0x16,0x21);

606 
	}
}

608 
	$ACC_gëADC
 () {

609 
	`i2c_gëSixRawADC
(
MMA7455_ADDRESS
,0x00);

611 
	`ACC_ORIENTATION
–((
	`öt8_t
(
øwADC
[1])<<8) | int8_t(rawADC[0])) ,

612 ((
	`öt8_t
(
øwADC
[3])<<8) | int8_t(rawADC[2])) ,

613 ((
	`öt8_t
(
øwADC
[5])<<8) | int8_t(rawADC[4])) );

614 
	`ACC_Comm⁄
();

615 
	}
}

621 #i‡
deföed
(
MMA8451Q
)

623 #i‡!
deföed
(
MMA8451Q_ADDRESS
)

624 
	#MMA8451Q_ADDRESS
 0x1C

	)

628 
	$ACC_öô
 () {

629 
	`dñay
(10);

630 
	`i2c_wrôeReg
(
MMA8451Q_ADDRESS
,0x2A,0x05);

631 
	`dñay
(10);

632 
	`i2c_wrôeReg
(
MMA8451Q_ADDRESS
,0x0E,0x02);

633 
	}
}

635 
	$ACC_gëADC
 () {

636 
	`i2c_gëSixRawADC
(
MMA8451Q_ADDRESS
,0x00);

638 
	`ACC_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0])/32 ,

639 ((
øwADC
[3]<<8) |ÑawADC[2])/32 ,

640 ((
øwADC
[5]<<8) |ÑawADC[4])/32);

641 
	`ACC_Comm⁄
();

642 
	}
}

656 #i‡
deföed
(
ADXL345
)

657 #i‡!
deföed
(
ADXL345_ADDRESS
)

658 
	#ADXL345_ADDRESS
 0x1D

	)

662 
	$ACC_öô
 () {

663 
	`dñay
(10);

664 
	`i2c_wrôeReg
(
ADXL345_ADDRESS
,0x2D,1<<3);

665 
	`i2c_wrôeReg
(
ADXL345_ADDRESS
,0x31,0x0B);

666 
	`i2c_wrôeReg
(
ADXL345_ADDRESS
,0x2C,0x09);

667 
	}
}

669 
	$ACC_gëADC
 () {

670 
	`i2c_gëSixRawADC
(
ADXL345_ADDRESS
,0x32);

672 
	`ACC_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0]) ,

673 ((
øwADC
[3]<<8) |ÑawADC[2]) ,

674 ((
øwADC
[5]<<8) |ÑawADC[4]) );

675 
	`ACC_Comm⁄
();

676 
	}
}

695 #i‡
deföed
(
BMA180
)

696 #i‡!
deföed
(
BMA180_ADDRESS
)

697 
	#BMA180_ADDRESS
 0x40

	)

701 
	$ACC_öô
 () {

702 
	`dñay
(10);

704 
	`i2c_wrôeReg
(
BMA180_ADDRESS
,0x0D,1<<4);

705 
	`dñay
(5);

706 
uöt8_t
 
c⁄åﬁ
 = 
	`i2c_ªadReg
(
BMA180_ADDRESS
, 0x20);

707 
c⁄åﬁ
 = control & 0x0F;

709 
c⁄åﬁ
 = control | (0x00 << 4);

710 
	`i2c_wrôeReg
(
BMA180_ADDRESS
, 0x20, 
c⁄åﬁ
);

711 
	`dñay
(5);

712 
c⁄åﬁ
 = 
	`i2c_ªadReg
(
BMA180_ADDRESS
, 0x30);

713 
c⁄åﬁ
 = control & 0xFC;

714 
c⁄åﬁ
 = control | 0x00;

715 
	`i2c_wrôeReg
(
BMA180_ADDRESS
, 0x30, 
c⁄åﬁ
);

716 
	`dñay
(5);

717 
c⁄åﬁ
 = 
	`i2c_ªadReg
(
BMA180_ADDRESS
, 0x35);

718 
c⁄åﬁ
 = control & 0xF1;

719 
c⁄åﬁ
 = control | (0x05 << 1);

720 
	`i2c_wrôeReg
(
BMA180_ADDRESS
, 0x35, 
c⁄åﬁ
);

721 
	`dñay
(5);

722 
	}
}

724 
	$ACC_gëADC
 () {

725 
	`i2c_gëSixRawADC
(
BMA180_ADDRESS
,0x02);

727 
	`ACC_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0])>>4 ,

728 ((
øwADC
[3]<<8) |ÑawADC[2])>>4 ,

729 ((
øwADC
[5]<<8) |ÑawADC[4])>>4 );

730 
	`ACC_Comm⁄
();

731 
	}
}

737 #i‡
deföed
(
BMA280
)

738 #i‡!
deföed
(
BMA280_ADDRESS
)

739 
	#BMA280_ADDRESS
 0x18

742 

	)

743 
	$ACC_öô
 () {

744 
	`dñay
(10);

745 
	`i2c_wrôeReg
(
BMA280_ADDRESS
, 0x10, 0x09);

746 
	`dñay
(5);

747 
	`i2c_wrôeReg
(
BMA280_ADDRESS
, 0x0F, 0x08);

748 
	}
}

750 
	$ACC_gëADC
 () {

751 
	`i2c_gëSixRawADC
(
BMA280_ADDRESS
,0x02);

753 
	`ACC_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0])>>4 ,

754 ((
øwADC
[3]<<8) |ÑawADC[2])>>4 ,

755 ((
øwADC
[5]<<8) |ÑawADC[4])>>4 );

756 
	`ACC_Comm⁄
();

757 
	}
}

776 #i‡
deföed
(
BMA020
)

777 
	$ACC_öô
(){

778 
	`i2c_wrôeReg
(0x38,0x15,0x80);

779 
uöt8_t
 
c⁄åﬁ
 = 
	`i2c_ªadReg
(0x70, 0x14);

780 
c⁄åﬁ
 = control & 0xE0;

781 
c⁄åﬁ
 = control | (0x02 << 3);

782 
c⁄åﬁ
 = control | 0x00;

783 
	`i2c_wrôeReg
(0x38,0x14,
c⁄åﬁ
);

784 
	}
}

786 
	$ACC_gëADC
(){

787 
	`i2c_gëSixRawADC
(0x38,0x02);

788 
	`ACC_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0])>>6 ,

789 ((
øwADC
[3]<<8) |ÑawADC[2])>>6 ,

790 ((
øwADC
[5]<<8) |ÑawADC[4])>>6 );

791 
	`ACC_Comm⁄
();

792 
	}
}

798 #i‡
deföed
(
LIS3LV02
)

799 
	#LIS3A
 0x1D

	)

801 
	$ACC_öô
(){

802 
	`i2c_wrôeReg
(
LIS3A
 ,0x20 ,0xD7 );

803 
	`i2c_wrôeReg
(
LIS3A
 ,0x21 ,0x50 );

804 
	}
}

806 
	$ACC_gëADC
(){

807 
	`i2c_gëSixRawADC
(
LIS3A
,0x28+0x80);

808 
	`ACC_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0])>>2 ,

809 ((
øwADC
[3]<<8) |ÑawADC[2])>>2 ,

810 ((
øwADC
[5]<<8) |ÑawADC[4])>>2);

811 
	`ACC_Comm⁄
();

812 
	}
}

818 #i‡
deföed
(
LSM303DLx_ACC
)

819 
	$ACC_öô
 () {

820 
	`dñay
(10);

821 
	`i2c_wrôeReg
(0x18,0x20,0x27);

822 
	`i2c_wrôeReg
(0x18,0x23,0x30);

823 
	`i2c_wrôeReg
(0x18,0x21,0x00);

824 
	}
}

826 
	$ACC_gëADC
 () {

827 
	`i2c_gëSixRawADC
(0x18,0xA8);

829 
	`ACC_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0])>>4 ,

830 ((
øwADC
[3]<<8) |ÑawADC[2])>>4 ,

831 ((
øwADC
[5]<<8) |ÑawADC[4])>>4 );

832 
	`ACC_Comm⁄
();

833 
	}
}

839 #i‡
deföed
(
ADCACC
)

840 
	$ACC_öô
(){

841 
	`pöMode
(
A1
,
INPUT
);

842 
	`pöMode
(
A2
,
INPUT
);

843 
	`pöMode
(
A3
,
INPUT
);

844 
	}
}

846 
	$ACC_gëADC
() {

847 
	`ACC_ORIENTATION
–
	`™ÆogRód
(
A1
) ,

848 
	`™ÆogRód
(
A2
) ,

849 
	`™ÆogRód
(
A3
) );

850 
	`ACC_Comm⁄
();

851 
	}
}

857 #i‡
deföed
(
L3G4200D
)

858 
	#L3G4200D_ADDRESS
 0x69

	)

859 
	$Gyro_öô
() {

860 
	`dñay
(100);

861 
	`i2c_wrôeReg
(
L3G4200D_ADDRESS
 ,0x20 ,0x8F );

862 
	`dñay
(5);

863 
	`i2c_wrôeReg
(
L3G4200D_ADDRESS
 ,0x24 ,0x02 );

864 
	`dñay
(5);

865 
	`i2c_wrôeReg
(
L3G4200D_ADDRESS
 ,0x23 ,0x30);

866 
	}
}

868 
	$Gyro_gëADC
 () {

869 
	`i2c_gëSixRawADC
(
L3G4200D_ADDRESS
,0x80|0x28);

871 
	`GYRO_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0])>>2 ,

872 ((
øwADC
[3]<<8) |ÑawADC[2])>>2 ,

873 ((
øwADC
[5]<<8) |ÑawADC[4])>>2 );

874 
	`GYRO_Comm⁄
();

875 
	}
}

889 #i‡
deföed
(
ITG3200
Ë|| deföed(
ITG3050
Ë|| deföed(
MPU3050
)

890 #i‡!
deföed
(
GYRO_ADDRESS
)

891 
	#GYRO_ADDRESS
 0X68

	)

895 
	$Gyro_öô
() {

896 
	`i2c_wrôeReg
(
GYRO_ADDRESS
, 0x3E, 0x80);

897 
	`dñay
(5);

898 
	`i2c_wrôeReg
(
GYRO_ADDRESS
, 0x16, 0x18 + 
GYRO_DLPF_CFG
);

899 
	`dñay
(5);

900 
	`i2c_wrôeReg
(
GYRO_ADDRESS
, 0x3E, 0x03);

901 
	`dñay
(100);

902 
	}
}

904 
	$Gyro_gëADC
 () {

905 
	`i2c_gëSixRawADC
(
GYRO_ADDRESS
,0X1D);

906 
	`GYRO_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1])>>2 ,

907 ((
øwADC
[2]<<8) |ÑawADC[3])>>2 ,

908 ((
øwADC
[4]<<8) |ÑawADC[5])>>2 );

909 
	`GYRO_Comm⁄
();

910 
	}
}

917 #i‡
MAG


918 
	gmagGaö
[3] = {1.0,1.0,1.0};

920 
uöt8_t
 
	$Mag_gëADC
() {

921 
uöt32_t
 
t
,
tCÆ
 = 0;

922 
öt16_t
 
magZîoTempMö
[3],
magZîoTempMax
[3];

923 
uöt8_t
 
axis
;

925 i‡–
cuºítTime
 < 
t
 )  0;

926 
t
 = 
cuºítTime
 + 100000;

927 
	`Devi˚_Mag_gëADC
();

929 
axis
=0;axis<3;axis++) {

930 
imu
.
magADC
[
axis
] = imu.magADC[axis] * 
magGaö
[axis];

931 i‡(!
f
.
CALIBRATE_MAG
Ë
imu
.
magADC
[
axis
] -
globÆ_c⁄f
.
magZîo
[axis];

934 i‡(
f
.
CALIBRATE_MAG
) {

935 i‡(
tCÆ
 == 0)

936 
tCÆ
 = 
t
;

937 i‡((
t
 - 
tCÆ
) < 30000000) {

938 
LEDPIN_TOGGLE
;

939 
axis
=0;axis<3;axis++) {

940 if(
tCÆ
 =
t
) {

941 
magZîoTempMö
[
axis
] = 
imu
.
magADC
[axis];

942 
magZîoTempMax
[
axis
] = 
imu
.
magADC
[axis];

944 i‡(
imu
.
magADC
[
axis
] < 
magZîoTempMö
[axis]Ë{magZîoTempMö[axis] = imu.magADC[axis]; 
	`SET_ALARM
(
ALRM_FAC_TOGGLE
, 
ALRM_LVL_TOGGLE_1
);}

945 i‡(
imu
.
magADC
[
axis
] > 
magZîoTempMax
[axis]Ë{magZîoTempMax[axis] = imu.magADC[axis]; 
	`SET_ALARM
(
ALRM_FAC_TOGGLE
, 
ALRM_LVL_TOGGLE_1
);}

946 
globÆ_c⁄f
.
magZîo
[
axis
] = (
magZîoTempMö
[axis] + 
magZîoTempMax
[axis])>>1;

949 
f
.
CALIBRATE_MAG
 = 0;

950 
tCÆ
 = 0;

951 
	`wrôeGlobÆSë
(1);

955 #i‡
	`deföed
(
SENSORS_TILT_45DEG_LEFT
)

956 
öt16_t
 
ãmp
 = ((
imu
.
magADC
[
PITCH
] - imu.magADC[
ROLL
] )*7)/10;

957 
imu
.
magADC
[
ROLL
] = ((imu.magADC[ROLL] + imu.magADC[
PITCH
])*7)/10;

958 
imu
.
magADC
[
PITCH
] = 
ãmp
;

960 #i‡
	`deföed
(
SENSORS_TILT_45DEG_RIGHT
)

961 
öt16_t
 
ãmp
 = ((
imu
.
magADC
[
PITCH
] + imu.magADC[
ROLL
] )*7)/10;

962 
imu
.
magADC
[
ROLL
] = ((imu.magADC[ROLL] - imu.magADC[
PITCH
])*7)/10;

963 
imu
.
magADC
[
PITCH
] = 
ãmp
;

967 
	}
}

975 #i‡
deföed
(
MAG3110
)

976 
	#MAG_ADDRESS
 0x0E

	)

977 
	#MAG_DATA_REGISTER
 0x01

	)

978 
	#MAG_CTRL_REG1
 0x10

	)

979 
	#MAG_CTRL_REG2
 0x11

	)

981 
	$Mag_öô
() {

982 
	`dñay
(100);

983 
	`i2c_wrôeReg
(
MAG_ADDRESS
,
MAG_CTRL_REG2
,0x80);

984 
	`dñay
(100);

985 
	`i2c_wrôeReg
(
MAG_ADDRESS
,
MAG_CTRL_REG1
,0x11);

986 
	`dñay
(100);

987 
	}
}

989 #i‡!
deföed
(
MPU6050_I2C_AUX_MASTER
 || 
MPU9250
)

990 
	$Devi˚_Mag_gëADC
() {

991 
	`i2c_gëSixRawADC
(
MAG_ADDRESS
,
MAG_DATA_REGISTER
);

992 
	`MAG_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1]) ,

993 ((
øwADC
[2]<<8) |ÑawADC[3]) ,

994 ((
øwADC
[4]<<8) |ÑawADC[5]) );

995 
	}
}

1006 #i‡
deföed
(
HMC5883
)

1008 
	#HMC58X3_R_CONFA
 0

	)

1009 
	#HMC58X3_R_CONFB
 1

	)

1010 
	#HMC58X3_R_MODE
 2

	)

1011 
	#HMC58X3_X_SELF_TEST_GAUSS
 (+1.16)

1012 
	#HMC58X3_Y_SELF_TEST_GAUSS
 (+1.16)

1013 
	#HMC58X3_Z_SELF_TEST_GAUSS
 (+1.08)

1014 
	#SELF_TEST_LOW_LIMIT
 (243.0/390.0)

1015 
	#SELF_TEST_HIGH_LIMIT
 (575.0/390.0)

1016 
	#HMC_POS_BIAS
 1

	)

1017 
	#HMC_NEG_BIAS
 2

	)

1019 
	#MAG_ADDRESS
 0x1E

	)

1020 
	#MAG_DATA_REGISTER
 0x03

	)

1022 
öt32_t
 
	gxyz_tŸÆ
[3]={0,0,0};

1024 
	$gëADC
() {

1025 
	`i2c_gëSixRawADC
(
MAG_ADDRESS
,
MAG_DATA_REGISTER
);

1026 
	`MAG_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1]) ,

1027 ((
øwADC
[4]<<8) |ÑawADC[5]) ,

1028 ((
øwADC
[2]<<8) |ÑawADC[3]) );

1029 
	}
}

1031 
uöt8_t
 
	$büs_cﬁÀ˘
(
uöt8_t
 
büs
) {

1032 
öt16_t
 
abs_magADC
;

1034 
	`i2c_wrôeReg
(
MAG_ADDRESS
, 
HMC58X3_R_CONFA
, 
büs
);

1035 
uöt8_t
 
i
=0; i<10; i++) {

1036 
	`i2c_wrôeReg
(
MAG_ADDRESS
,
HMC58X3_R_MODE
, 1);

1037 
	`dñay
(100);

1038 
	`gëADC
();

1039 
uöt8_t
 
axis
=0;áxis<3;áxis++) {

1040 
abs_magADC
 = 
	`abs
(
imu
.
magADC
[
axis
]);

1041 
xyz_tŸÆ
[
axis
]+
abs_magADC
;

1042 i‡((
öt16_t
)(1<<12Ë< 
abs_magADC
Ë 
Ál£
;

1045  
åue
;

1046 
	}
}

1048 
	$Mag_öô
() {

1049 
boﬁ
 
bªt
=
åue
;

1053 
	`i2c_wrôeReg
(
MAG_ADDRESS
, 
HMC58X3_R_CONFB
, 2 << 5);

1054 
	`i2c_wrôeReg
(
MAG_ADDRESS
,
HMC58X3_R_MODE
, 1);

1055 
	`dñay
(100);

1056 
	`gëADC
();

1058 i‡(!
	`büs_cﬁÀ˘
(0x010 + 
HMC_POS_BIAS
)Ë
bªt
 = 
Ál£
;

1059 i‡(!
	`büs_cﬁÀ˘
(0x010 + 
HMC_NEG_BIAS
)Ë
bªt
 = 
Ál£
;

1061 i‡(
bªt
)

1062 
uöt8_t
 
axis
=0;áxis<3;áxis++)

1063 
magGaö
[
axis
]=820.0*
HMC58X3_X_SELF_TEST_GAUSS
*2.0*10.0/
xyz_tŸÆ
[axis];

1066 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,
HMC58X3_R_CONFA
 ,0x70 );

1067 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,
HMC58X3_R_CONFB
 ,0x20 );

1068 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,
HMC58X3_R_MODE
 ,0x00 );

1069 
	`dñay
(100);

1070 
	}
}

1072 #i‡!
deföed
(
MPU6050_I2C_AUX_MASTER
 || 
MPU9250
)

1073 
	$Devi˚_Mag_gëADC
() {

1074 
	`gëADC
();

1075 
	}
}

1084 #i‡
deföed
(
HMC5843
)

1085 
	#MAG_ADDRESS
 0x1E

	)

1086 
	#MAG_DATA_REGISTER
 0x03

	)

1088 
	$gëADC
() {

1089 
	`i2c_gëSixRawADC
(
MAG_ADDRESS
,
MAG_DATA_REGISTER
);

1090 
	`MAG_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1]) ,

1091 ((
øwADC
[2]<<8) |ÑawADC[3]) ,

1092 ((
øwADC
[4]<<8) |ÑawADC[5]) );

1093 
	}
}

1095 
	$Mag_öô
() {

1096 
	`dñay
(100);

1098 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,0x00 ,0x71 );

1099 
	`dñay
(50);

1101 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,0x01 ,0x60 );

1102 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,0x02 ,0x01 );

1107 
	`dñay
(100);

1108 
	`gëADC
();

1109 
	`dñay
(10);

1110 
magGaö
[
ROLL
] = 1000.0 / 
	`abs
(
imu
.
magADC
[ROLL]);

1111 
magGaö
[
PITCH
] = 1000.0 / 
	`abs
(
imu
.
magADC
[PITCH]);

1112 
magGaö
[
YAW
] = 1000.0 / 
	`abs
(
imu
.
magADC
[YAW]);

1115 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,0x00 ,0x70 );

1116 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,0x01 ,0x20 );

1117 
	`i2c_wrôeReg
(
MAG_ADDRESS
 ,0x02 ,0x00 );

1118 
	}
}

1120 #i‡!
deföed
(
MPU6050_I2C_AUX_MASTER
)

1121 
	$Devi˚_Mag_gëADC
() {

1122 
	`gëADC
();

1123 
	}
}

1133 #i‡
deföed
(
AK8975
)

1134 
	#MAG_ADDRESS
 0x0C

	)

1135 
	#MAG_DATA_REGISTER
 0x03

	)

1137 
	$Mag_öô
() {

1138 
	`dñay
(100);

1139 
	`i2c_wrôeReg
(
MAG_ADDRESS
,0x0a,0x01);

1140 
	`dñay
(100);

1141 
	}
}

1143 
	$Devi˚_Mag_gëADC
() {

1144 
	`i2c_gëSixRawADC
(
MAG_ADDRESS
,
MAG_DATA_REGISTER
);

1145 
	`MAG_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0]) ,

1146 ((
øwADC
[3]<<8) |ÑawADC[2]) ,

1147 ((
øwADC
[5]<<8) |ÑawADC[4]) );

1149 
	`i2c_wrôeReg
(
MAG_ADDRESS
,0x0a,0x01);

1150 
	}
}

1156 #i‡
deföed
(
MPU6050
)

1157 #i‡!
deföed
(
MPU6050_ADDRESS
)

1158 
	#MPU6050_ADDRESS
 0x68

1161 

	)

1164 
	$Gyro_öô
() {

1165 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x6B, 0x80);

1166 
	`dñay
(50);

1167 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x6B, 0x03);

1168 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x1A, 
GYRO_DLPF_CFG
);

1169 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x1B, 0x18);

1171 #i‡
	`deföed
(
MAG
)

1172 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x37, 0x02);

1174 
	}
}

1176 
	$Gyro_gëADC
 () {

1177 
	`i2c_gëSixRawADC
(
MPU6050_ADDRESS
, 0x43);

1178 
	`GYRO_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1])>>2 ,

1179 ((
øwADC
[2]<<8) |ÑawADC[3])>>2 ,

1180 ((
øwADC
[4]<<8) |ÑawADC[5])>>2 );

1181 
	`GYRO_Comm⁄
();

1182 
	}
}

1184 
	$ACC_öô
 () {

1185 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x1C, 0x10);

1189 #i‡
	`deföed
(
MPU6050_I2C_AUX_MASTER
)

1192 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x6A, 0b00100000);

1193 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x37, 0x00);

1194 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x24, 0x0D);

1195 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x25, 0x80|
MAG_ADDRESS
);

1196 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x26, 
MAG_DATA_REGISTER
);

1197 
	`i2c_wrôeReg
(
MPU6050_ADDRESS
, 0x27, 0x86);

1199 
	}
}

1201 
	$ACC_gëADC
 () {

1202 
	`i2c_gëSixRawADC
(
MPU6050_ADDRESS
, 0x3B);

1203 
	`ACC_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1])>>3 ,

1204 ((
øwADC
[2]<<8) |ÑawADC[3])>>3 ,

1205 ((
øwADC
[4]<<8) |ÑawADC[5])>>3 );

1206 
	`ACC_Comm⁄
();

1207 
	}
}

1210 #i‡
deföed
(
MPU6050_I2C_AUX_MASTER
)

1211 
	$Devi˚_Mag_gëADC
() {

1212 
	`i2c_gëSixRawADC
(
MPU6050_ADDRESS
, 0x49);

1213 #i‡
	`deföed
(
HMC5843
)

1214 
	`MAG_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1]) ,

1215 ((
øwADC
[2]<<8) |ÑawADC[3]) ,

1216 ((
øwADC
[4]<<8) |ÑawADC[5]) );

1218 #i‡
	`deföed
 (
HMC5883
)

1219 
	`MAG_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1]) ,

1220 ((
øwADC
[4]<<8) |ÑawADC[5]) ,

1221 ((
øwADC
[2]<<8) |ÑawADC[3]) );

1223 #i‡
	`deföed
 (
MAG3110
)

1224 
	`MAG_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1]) ,

1225 ((
øwADC
[2]<<8) |ÑawADC[3]) ,

1226 ((
øwADC
[4]<<8) |ÑawADC[5]) );

1228 
	}
}

1235 #i‡
deföed
(
LSM330
)

1236 #i‡!
deföed
(
LSM330_ACC_ADDRESS
)

1237 
	#LSM330_ACC_ADDRESS
 0x18

1240 #i‡!
	`deföed
(
LSM330_GYRO_ADDRESS
)

	)

1241 
	#LSM330_GYRO_ADDRESS
 0x6A

1244 

	)

1248 
	$ACC_öô
 () {

1250 
	`dñay
(10);

1253 
	`i2c_wrôeReg
(
LSM330_ACC_ADDRESS
 ,0x20 ,0x37 );

1257 
	`dñay
(5);

1260 
	`i2c_wrôeReg
(
LSM330_ACC_ADDRESS
 ,0x23 ,0x28 );

1263 
	`dñay
(5);

1264 
	`i2c_wrôeReg
(
LSM330_ACC_ADDRESS
,0x21,0x00);

1265 
	}
}

1268 
	#ACC_DELIMITER
 4

1271 

	)

1272 
	$ACC_gëADC
 () {

1273 
	`i2c_gëSixRawADC
(
LSM330_ACC_ADDRESS
,0x80|0x28);

1275 
	`ACC_ORIENTATION
–((
øwADC
[1]<<8Ë|ÑawADC[0])>>
ACC_DELIMITER
 ,

1276 ((
øwADC
[3]<<8Ë|ÑawADC[2])>>
ACC_DELIMITER
 ,

1277 ((
øwADC
[5]<<8Ë|ÑawADC[4])>>
ACC_DELIMITER
 );

1278 
	`ACC_Comm⁄
();

1279 
	}
}

1287 
	$Gyro_öô
() {

1288 
	`dñay
(100);

1289 
	`i2c_wrôeReg
(
LSM330_GYRO_ADDRESS
 ,0x20 ,0x8F );

1290 
	`dñay
(5);

1291 
	`i2c_wrôeReg
(
LSM330_GYRO_ADDRESS
 ,0x24 ,0x02 );

1292 
	`dñay
(5);

1293 
	`i2c_wrôeReg
(
LSM330_GYRO_ADDRESS
 ,0x23 ,0x30);

1294 
	}
}

1296 
	$Gyro_gëADC
 () {

1297 
	`i2c_gëSixRawADC
(
LSM330_GYRO_ADDRESS
,0x80|0x28);

1299 
	`GYRO_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0])>>2 ,

1300 ((
øwADC
[3]<<8) |ÑawADC[2])>>2 ,

1301 ((
øwADC
[5]<<8) |ÑawADC[4])>>2 );

1302 
	`GYRO_Comm⁄
();

1303 
	}
}

1318 #i‡
deföed
(
MPU9250
)

1320 #i‡!
deföed
(
MPU9250_ADDRESS
)

1321 
	#MPU9250_ADDRESS
 0x68

1324 
	#MAG_ADDRESS
 0x0C

	)

1325 
	#MAG_DATA_REGISTER
 0x03

	)

1333 
	$Gyro_öô
() {

1334 
TWBR
 = ((
F_CPU
 / 400000L) - 16) / 2;

1335 
	`i2c_wrôeReg
(
MPU9250_ADDRESS
, 0x6B, 0x80);

1336 
	`dñay
(5);

1337 
	`i2c_wrôeReg
(
MPU9250_ADDRESS
, 0x6B, 0x03);

1338 
	`i2c_wrôeReg
(
MPU9250_ADDRESS
, 0x1A, 
GYRO_DLPF_CFG
);

1339 
	`i2c_wrôeReg
(
MPU9250_ADDRESS
, 0x1B, 0x18);

1341 
	`i2c_wrôeReg
(
MPU9250_ADDRESS
, 0x37, 0x02);

1342 
	}
}

1344 
	$Gyro_gëADC
 () {

1345 
	`i2c_gëSixRawADC
(
MPU9250_ADDRESS
, 0x43);

1346 
	`GYRO_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1])/4 ,

1347 ((
øwADC
[2]<<8) |ÑawADC[3])/4 ,

1348 ((
øwADC
[4]<<8) |ÑawADC[5])/4 );

1349 
	`GYRO_Comm⁄
();

1350 
	}
}

1360 
	$ACC_öô
 () {

1361 
	`i2c_wrôeReg
(
MPU9250_ADDRESS
, 0x1C, 0x10);

1362 
	}
}

1364 
	$ACC_gëADC
 () {

1365 
	`i2c_gëSixRawADC
(
MPU9250_ADDRESS
, 0x3B);

1366 
	`ACC_ORIENTATION
–((
øwADC
[0]<<8) |ÑawADC[1])/8 ,

1367 ((
øwADC
[2]<<8) |ÑawADC[3])/8 ,

1368 ((
øwADC
[4]<<8) |ÑawADC[5])/8 );

1369 
	`ACC_Comm⁄
();

1370 
	}
}

1380 
	$Mag_öô
() {

1381 
	`dñay
(100);

1382 
	`i2c_wrôeReg
(
MAG_ADDRESS
,0x0a,0x01);

1383 
	`dñay
(100);

1384 
	}
}

1385 
	$Devi˚_Mag_gëADC
() {

1386 
	`i2c_gëSixRawADC
(
MAG_ADDRESS
, 0x03);

1387 
	`MAG_ORIENTATION
–((
øwADC
[1]<<8) |ÑawADC[0]) ,

1388 ((
øwADC
[3]<<8) |ÑawADC[2]) ,

1389 ((
øwADC
[5]<<8) |ÑawADC[4]) );

1391 
	`i2c_wrôeReg
(
MAG_ADDRESS
,0x0a,0x01);

1392 
	}
}

1403 #i‡
deföed
(
WMP
)

1410 
	#WMP_ADDRESS_1
 0x53

	)

1411 
	#WMP_ADDRESS_2
 0x52

	)

1413 
	$Gyro_öô
() {

1414 
	`dñay
(250);

1415 
	`i2c_wrôeReg
(
WMP_ADDRESS_1
, 0xF0, 0x55);

1416 
	`dñay
(250);

1417 
	`i2c_wrôeReg
(
WMP_ADDRESS_1
, 0xFE, 0x05);

1418 
	`dñay
(250);

1419 
	}
}

1421 
	$Gyro_gëADC
() {

1422 
uöt8_t
 
axis
;

1423 
TWBR
 = ((
F_CPU
 / 
I2C_SPEED
) - 16) / 2;

1424 
	`i2c_gëSixRawADC
(
WMP_ADDRESS_2
,0x00);

1425 
TWBR
 = ((
F_CPU
 / 400000) - 16) / 2;

1427 i‡(
	`mi¸os
(Ë< (
√uåÆizeTime
 + 
NEUTRALIZE_DELAY
)) {

1428 
axis
 = 0;áxi†< 3;áxis++Ë{
imu
.
gyroADC
[axis]=0;imu.
accADC
[axis]=0;}

1429 
imu
.
accADC
[
YAW
] = 
ACC_1G
;

1433 i‡–(
øwADC
[5]&0x03) == 0x02 ) {

1435 
imu
.
gyroADC
[
ROLL
] = - ( ((
øwADC
[5]>>2)<<8) |ÑawADC[2] );

1436 
imu
.
gyroADC
[
PITCH
] = - ( ((
øwADC
[4]>>2)<<8) |ÑawADC[1] );

1437 
imu
.
gyroADC
[
YAW
] = - ( ((
øwADC
[3]>>2)<<8) |ÑawADC[0] );

1438 
	`GYRO_Comm⁄
();

1440 
imu
.
gyroADC
[
ROLL
] = (
øwADC
[3]&0x01) ? imu.gyroADC[ROLL]/5 : imu.gyroADC[ROLL];

1441 
imu
.
gyroADC
[
PITCH
] = (
øwADC
[4]&0x02)>>1 ? imu.gyroADC[PITCH]/5 : imu.gyroADC[PITCH];

1442 
imu
.
gyroADC
[
YAW
] = (
øwADC
[3]&0x02)>>1 ? imu.gyroADC[YAW]/5 : imu.gyroADC[YAW];

1444 
	}
}

1453 #i‡
deföed
(
SRF02
Ë|| deföed(
SRF08
Ë|| deföed(
SRF10
Ë|| deföed(
SRC235
)

1459 #i‡!
deföed
(
SRF08_DEFAULT_ADDRESS
)

1460 
	#SRF08_DEFAULT_ADDRESS
 (0xE0>>1)

	)

1463 #i‡!
deföed
(
SRF08_RANGE_WAIT
)

1464 
	#SRF08_RANGE_WAIT
 70000

1466 

	)

1467 #i‡!
deföed
(
SRF08_RANGE_SLEEP
)

1468 
	#SRF08_RANGE_SLEEP
 5000

1470 

	)

1471 #i‡!
deföed
(
SRF08_SENSOR_FIRST
)

1472 
	#SRF08_SENSOR_FIRST
 (0xF0>>1)

1474 

	)

1475 #i‡!
deföed
(
SRF08_MAX_SENSORS
)

1476 
	#SRF08_MAX_SENSORS
 4

1478 

	)

1482 
	#SRF08_REV_COMMAND
 0

	)

1483 
	#SRF08_LIGHT_GAIN
 1

	)

1484 
	#SRF08_ECHO_RANGE
 2

	)

1489 
öt32_t
 
	mønge
[
SRF08_MAX_SENSORS
];

1490 
öt8_t
 
	m£ns‹s
;

1491 
öt8_t
 
	mcuºít
;

1492 
uöt8_t
 
	m°©e
;

1493 
uöt32_t
 
	mdódlöe
;

1494 } 
	g§f08_˘x
;

1498 
	$S⁄¨_öô
() {

1499 
	`mem£t
(&
§f08_˘x
, 0, (srf08_ctx));

1500 
§f08_˘x
.
dódlöe
 = 4000000;

1501 
	}
}

1506 
uöt16_t
 
	$i2c_åy_ªadReg
(
uöt8_t
 
add
, uöt8_à
ªg
) {

1507 
uöt16_t
 
cou¡
 = 255;

1508 
	`i2c_ªp_°¨t
(
add
<<1);

1509 
	`i2c_wrôe
(
ªg
);

1510 
	`i2c_ªp_°¨t
((
add
<<1)|1);

1511 
TWCR
 = (1<<
TWINT
Ë| (1<<
TWEN
);

1512 !(
TWCR
 & (1<<
TWINT
))) {

1513 
cou¡
--;

1514 i‡(
cou¡
==0) {

1515 
TWCR
 = 0;

1519 
uöt8_t
 
r
 = 
TWDR
;

1520 
	`i2c_°›
();

1521  
r
;

1522 
	}
}

1525 
uöt16_t
 
	$i2c_ªadReg16
(
öt8_t
 
addr
, i¡8_à
ªg
) {

1526 
uöt8_t
 
b
[2];

1527 
	`i2c_ªad_ªg_to_buf
(
addr
, 
ªg
, (
uöt8_t
*)&
b
, (b));

1528  (
b
[0]<<8) | b[1];

1529 
	}
}

1531 
	$i2c_§f08_ch™ge_addr
(
öt8_t
 
cuºít
, i¡8_à
movëo
) {

1534 
	`i2c_wrôeReg
(
cuºít
, 
SRF08_REV_COMMAND
, 0xA0); 
	`dñay
(30);

1535 
	`i2c_wrôeReg
(
cuºít
, 
SRF08_REV_COMMAND
, 0xAA); 
	`dñay
(30);

1536 
	`i2c_wrôeReg
(
cuºít
, 
SRF08_REV_COMMAND
, 0xA5); 
	`dñay
(30);

1537 
	`i2c_wrôeReg
(
cuºít
, 
SRF08_REV_COMMAND
, 
movëo
); 
	`dñay
(30);

1538 
	}
}

1541 
	$i2c_§f08_discovî
() {

1542 
uöt8_t
 
addr
;

1543 
uöt16_t
 
x
;

1545 
§f08_˘x
.
£ns‹s
=0;

1546 
addr
 = 
SRF08_SENSOR_FIRST
;

1547 
uöt8_t
 
i
=0; i<
SRF08_MAX_SENSORS
 && 
x
!=0xff; i++) {

1548 
x
 = 
	`i2c_åy_ªadReg
(
addr
, 
SRF08_REV_COMMAND
);

1549 if(
x
!=0xffff) {

1550 
	`i2c_wrôeReg
(
addr
, 
SRF08_LIGHT_GAIN
, 0x15);

1551 
	`i2c_wrôeReg
(
addr
, 
SRF08_ECHO_RANGE
, 46);

1552 
§f08_˘x
.
£ns‹s
++;

1553 
addr
 += 1;

1556 if(
§f08_˘x
.
£ns‹s
 < 
SRF08_MAX_SENSORS
) {

1558 
x
 = 
	`i2c_åy_ªadReg
(
SRF08_DEFAULT_ADDRESS
, 
SRF08_REV_COMMAND
);

1559 if(
x
!=0xffff) {

1560 
	`i2c_§f08_ch™ge_addr
(
SRF08_DEFAULT_ADDRESS
, 
addr
<<1);

1561 
§f08_˘x
.
£ns‹s
++;

1564 
	}
}

1566 
	$S⁄¨_upd©e
() {

1567 i‡((
öt32_t
)(
cuºítTime
 - 
§f08_˘x
.
dódlöe
)<0) ;

1568 
§f08_˘x
.
dódlöe
 = 
cuºítTime
;

1569 
§f08_˘x
.
°©e
) {

1571 
	`i2c_§f08_discovî
();

1572 if(
§f08_˘x
.
£ns‹s
>0Ë§f08_˘x.
°©e
++;

1573 
§f08_˘x
.
dódlöe
 += 5000000;

1576 
§f08_˘x
.
cuºít
=0;

1577 
§f08_˘x
.
°©e
++;

1578 
§f08_˘x
.
dódlöe
 +
SRF08_RANGE_SLEEP
;

1580 #i‡
	`deföed
(
SONAR_MULTICAST_PING
)

1583 
	`i2c_wrôeReg
(0, 
SRF08_REV_COMMAND
, 0x51);

1584 
§f08_˘x
.
°©e
++;

1585 
§f08_˘x
.
dódlöe
 +
SRF08_RANGE_WAIT
;

1588 
§f08_˘x
.
ønge
[§f08_˘x.
cuºít
] = 
	`i2c_ªadReg16
–
SRF08_SENSOR_FIRST
+§f08_˘x.cuºít, 
SRF08_ECHO_RANGE
);

1589 
§f08_˘x
.
cuºít
++;

1590 if(
§f08_˘x
.
cuºít
 >§f08_˘x.
£ns‹s
Ë§f08_˘x.
°©e
=1;

1595 
	`i2c_wrôeReg
(
SRF08_SENSOR_FIRST
+
§f08_˘x
.
cuºít
, 
SRF08_REV_COMMAND
, 0x51);

1596 
§f08_˘x
.
°©e
++;

1597 
§f08_˘x
.
dódlöe
 +
SRF08_RANGE_WAIT
;

1600 
§f08_˘x
.
ønge
[§f08_˘x.
cuºít
] = 
	`i2c_ªadReg16
(
SRF08_SENSOR_FIRST
+§f08_˘x.cuºít, 
SRF08_ECHO_RANGE
);

1601 
§f08_˘x
.
cuºít
++;

1602 if(
§f08_˘x
.
cuºít
 >§f08_˘x.
£ns‹s
Ë§f08_˘x.
°©e
=1;

1603 
§f08_˘x
.
°©e
=2;

1607 
s⁄¨A…
 = 
§f08_˘x
.
ønge
[0];

1608 
	}
}

1610 #i‡
deföed
(
SONAR_GENERIC_ECHOPULSE
)

1614 vﬁ©ûê
	gSONAR_GEP_°¨tTime
 = 0;

1615 vﬁ©ûê
	gSONAR_GEP_echoTime
 = 0;

1616 vﬁ©ûê
öt32_t
 
	gãmpS⁄¨A…
 = 0;

1618 
	$S⁄¨_öô
() {

1619 
SONAR_GEP_EchoPö_PCICR
;

1620 
SONAR_GEP_EchoPö_PCMSK
;

1621 
SONAR_GEP_EchoPö_PINMODE_IN
;

1622 
SONAR_GEP_TriggîPö_PINMODE_OUT
;

1623 
	}
}

1625 
uöt8_t
 
	$S⁄¨_upd©e
() {

1626 
s⁄¨A…
 = 1 + 
ãmpS⁄¨A…
;

1627 
SONAR_GEP_TriggîPö_PIN_LOW
;

1628 
	`dñayMi¸o£c⁄ds
(2);

1629 
SONAR_GEP_TriggîPö_PIN_HIGH
;

1630 
	`dñayMi¸o£c⁄ds
(10);

1631 
SONAR_GEP_TriggîPö_PIN_LOW
;

1633  
s⁄¨A…
;

1634 
	}
}

1636 
	$ISR
(
SONAR_GEP_EchoPö_PCINT_ve˘
) {

1637 i‡(
SONAR_GEP_EchoPö_PIN
 & (1 << 
SONAR_GEP_EchoPö_PCINT
)) {

1638 
SONAR_GEP_°¨tTime
 = 
	`mi¸os
();

1641 
SONAR_GEP_echoTime
 = 
	`mi¸os
(Ë- 
SONAR_GEP_°¨tTime
;

1642 i‡(
SONAR_GEP_echoTime
 <
SONAR_GENERIC_MAX_RANGE
*
SONAR_GENERIC_SCALE
)

1643 
ãmpS⁄¨A…
 = 
SONAR_GEP_echoTime
 / 
SONAR_GENERIC_SCALE
;

1645 
ãmpS⁄¨A…
 = -1;

1647 
	}
}

1649 
	$S⁄¨_öô
(Ë{
	}
}

1650 
uöt8_t
 
	$S⁄¨_upd©e
(Ë{
	}
}

1654 #i‡
deföed
(
AIRSPEED
)

1657 
	$AúPªssuª_ªad
(&
whîëo
) {

1659 
whîëo
 = ((
	`™ÆogRód
(
AIRSPEED_PIN
) / 1024.0f) - 0.5f ) + whereto * 0.8f ;

1660 
	}
}

1662 
	$Aú•ìd_upd©e
() {

1663 
	`AúPªssuª_ªad
(
aúPªssuªRaw
);

1664 if(
aúPªssuªRaw
 <
aúPªssuªOff£t
)

1665 
aú•ìdS≥ed
 = 0;

1667 
aú•ìdS≥ed
 = 
	`sqπ
((
aúPªssuªRaw
 - 
aúPªssuªOff£t
Ë* 
AIRSPEED_FACTOR
) * 100;

1668 
	}
}

1670 
	$Aú•ìd_öô
() {

1672 
uöt8_t
 
aú•ìdI
=0;áirspeedI < 100;áirspeedI++){

1673 
	`dñay
(10);

1674 
	`AúPªssuª_ªad
(
aúPªssuªOff£t
);

1676 
	}
}

1681 
	$öôS
() {

1682 
	`i2c_öô
();

1683 i‡(
GYRO
Ë
	`Gyro_öô
();

1684 i‡(
BARO
Ë
	`B¨o_öô
();

1685 i‡(
MAG
Ë
	`Mag_öô
();

1686 i‡(
ACC
Ë
	`ACC_öô
();

1687 i‡(
SONAR
Ë
	`S⁄¨_öô
();

1688 #i‡
	`deföed
(
AIRSPEED
)

1689 
	`Aú•ìd_öô
();

1691 
	}
}

1693 
	$öôSís‹s
() {

1694 
uöt8_t
 
c
 = 5;

1695 #i‡!
	`deföed
(
DISABLE_POWER_PIN
)

1696 
POWERPIN_ON
;

1697 
	`dñay
(200);

1699 
c
) {

1700 
c
--;

1701 
	`öôS
();

1702 i‡(
i2c_îr‹s_cou¡
 == 0) ;

1704 
	}
}

	@Sensors.h

1 #i‚de‡
SENSORS_H_


2 
	#SENSORS_H_


	)

4 
ACC_gëADC
 ();

5 
Gyro_gëADC
 ();

6 
uöt8_t
 
Mag_gëADC
();

7 
uöt8_t
 
B¨o_upd©e
();

8 
uöt8_t
 
S⁄¨_upd©e
();

9 #i‡
deföed
(
AIRSPEED
)

10 
Aú•ìd_upd©e
();

13 
öôSís‹s
();

14 
i2c_ªp_°¨t
(
uöt8_t
 
addªss
);

15 
i2c_wrôe
(
uöt8_t
 
d©a
 );

16 
i2c_°›
();

17 
i2c_wrôe
(
uöt8_t
 
d©a
 );

18 
i2c_wrôeReg
(
uöt8_t
 
add
, uöt8_à
ªg
, uöt8_à
vÆ
);

19 
uöt8_t
 
i2c_ªadReg
(uöt8_à
add
, uöt8_à
ªg
);

20 
uöt8_t
 
i2c_ªadAck
();

21 
uöt8_t
 
i2c_ªadNak
();

23 
i2c_ªad_ªg_to_buf
(
uöt8_t
 
add
, uöt8_à
ªg
, uöt8_à*
buf
, uöt8_à
size
);

25 #i‡
deföed
(
MMA7455
)

26 
	#ACC_1G
 64

	)

28 #i‡
deföed
(
MMA8451Q
)

29 
	#ACC_1G
 512

	)

31 #i‡
deföed
(
ADXL345
)

32 
	#ACC_1G
 265

	)

34 #i‡
deföed
(
BMA180
Ë|| deföed(
BMA280
Ë|| deföed(
LIS3LV02
Ë|| deföed(
LSM303DLx_ACC
Ë|| deföed(
LSM330
)

35 
	#ACC_1G
 255

	)

37 #i‡
deföed
(
BMA020
)

38 
	#ACC_1G
 63

	)

40 #i‡
deföed
(
ADCACC
)

41 
	#ACC_1G
 75

	)

43 #i‡
deföed
(
MPU6050
Ë|| deföed(
MPU9250
)

44 #i‡
deföed
(
FREEIMUv04
)

45 
	#ACC_1G
 255

	)

47 
	#ACC_1G
 512

	)

51 #i‡!
deföed
(
ACC_1G
)

52 
	#ACC_1G
 256

	)

54 
	#ACCZ_25deg
 (
öt16_t
)(
ACC_1G
 * 0.90631)

55 
	#ACC_VñSˇÀ
 (9.80665‡/ 10000.0‡/ 
ACC_1G
)

	)

58 #i‡
deföed
(
ITG3050
)

59 
	#GYRO_SCALE
 (4 / 16.0 * 
PI
 / 180.0 / 1000000.0)

61 #i‡
	`deföed
(
MPU6050
Ë|| deföed(
MPU3050
Ë|| deföed(
MPU9250
)

	)

62 
	#GYRO_SCALE
 (4 / 16.4 * 
PI
 / 180.0 / 1000000.0)

64 #i‡
	`deföed
(
ITG3200
)

	)

65 
	#GYRO_SCALE
 (4 / 14.375 * 
PI
 / 180.0 / 1000000.0)

67 #i‡
	`deföed
(
L3G4200D
Ë|| deföed(
LSM330
)

	)

68 
	#GYRO_SCALE
 ((4.0‡* 
PI
 * 70.0f)/(1000.0f * 180.0f * 1000000.0f))

70 #i‡
	`deföed
(
WMP
)

	)

71 
	#GYRO_SCALE
 (1.0f/200e6f)

	)

	@Serial.cpp

1 
	~"Arduöo.h
"

2 
	~"c⁄fig.h
"

3 
	~"def.h
"

4 
	~"Sîül.h
"

5 
	~"Mu…iWii.h
"

7 vﬁ©ûê
uöt8_t
 
	g£rülHódRX
[
UART_NUMBER
],
	g£rülTaûRX
[UART_NUMBER];

8 
uöt8_t
 
	g£rülBuf„rRX
[
RX_BUFFER_SIZE
][
UART_NUMBER
];

9 vﬁ©ûê
uöt8_t
 
	g£rülHódTX
[
UART_NUMBER
],
	g£rülTaûTX
[UART_NUMBER];

10 
uöt8_t
 
	g£rülBuf„rTX
[
TX_BUFFER_SIZE
][
UART_NUMBER
];

17 #i‡
deföed
(
TEENSY20
)

18 
	$T_USB_AvaûabÀ
(){

19 
n
 = 
Sîül
.
	`avaûabÀ
();

20 i‡(
n
 > 255)Ç = 255;

21  
n
;

22 
	}
}

30 #i‡
deföed
(
PROMINI
Ë|| deföed(
MEGA
)

31 #i‡
deföed
(
PROMINI
)

32 
	$ISR
(
USART_UDRE_ve˘
) {

34 #i‡
	`deföed
(
MEGA
)

35 
	$ISR
(
USART0_UDRE_ve˘
) {

37 
uöt8_t
 
t
 = 
£rülTaûTX
[0];

38 i‡(
£rülHódTX
[0] !
t
) {

39 i‡(++
t
 >
TX_BUFFER_SIZE
)Å = 0;

40 
UDR0
 = 
£rülBuf„rTX
[
t
][0];

41 
£rülTaûTX
[0] = 
t
;

43 i‡(
t
 =
£rülHódTX
[0]Ë
UCSR0B
 &~(1<<
UDRIE0
);

44 
	}
}

46 #i‡
deföed
(
MEGA
Ë|| deföed(
PROMICRO
)

47 
	$ISR
(
USART1_UDRE_ve˘
) {

48 
uöt8_t
 
t
 = 
£rülTaûTX
[1];

49 i‡(
£rülHódTX
[1] !
t
) {

50 i‡(++
t
 >
TX_BUFFER_SIZE
)Å = 0;

51 
UDR1
 = 
£rülBuf„rTX
[
t
][1];

52 
£rülTaûTX
[1] = 
t
;

54 i‡(
t
 =
£rülHódTX
[1]Ë
UCSR1B
 &~(1<<
UDRIE1
);

55 
	}
}

57 #i‡
deföed
(
MEGA
)

58 
	$ISR
(
USART2_UDRE_ve˘
) {

59 
uöt8_t
 
t
 = 
£rülTaûTX
[2];

60 i‡(
£rülHódTX
[2] !
t
) {

61 i‡(++
t
 >
TX_BUFFER_SIZE
)Å = 0;

62 
UDR2
 = 
£rülBuf„rTX
[
t
][2];

63 
£rülTaûTX
[2] = 
t
;

65 i‡(
t
 =
£rülHódTX
[2]Ë
UCSR2B
 &~(1<<
UDRIE2
);

66 
	}
}

67 
	$ISR
(
USART3_UDRE_ve˘
) {

68 
uöt8_t
 
t
 = 
£rülTaûTX
[3];

69 i‡(
£rülHódTX
[3] !
t
) {

70 i‡(++
t
 >
TX_BUFFER_SIZE
)Å = 0;

71 
UDR3
 = 
£rülBuf„rTX
[
t
][3];

72 
£rülTaûTX
[3] = 
t
;

74 i‡(
t
 =
£rülHódTX
[3]Ë
UCSR3B
 &~(1<<
UDRIE3
);

75 
	}
}

78 
	$U¨tSídD©a
(
uöt8_t
 
p‹t
) {

79 #i‡
	`deföed
(
PROMINI
)

80 
UCSR0B
 |(1<<
UDRIE0
);

82 #i‡
	`deföed
(
PROMICRO
)

83 
p‹t
) {

85 
£rülHódTX
[0] !
£rülTaûTX
[0]) {

86 i‡(++
£rülTaûTX
[0] >
TX_BUFFER_SIZE
) serialTailTX[0] = 0;

87 #i‡!
	`deföed
(
TEENSY20
)

88 
	`USB_Síd
(
USB_CDC_TX
,
£rülBuf„rTX
[
£rülTaûTX
[0]],1);

90 
Sîül
.
	`wrôe
(
£rülBuf„rTX
[
£rülTaûTX
[0]],1);

94 1: 
UCSR1B
 |(1<<
UDRIE1
); ;

97 #i‡
	`deföed
(
MEGA
)

98 
p‹t
) {

99 0: 
UCSR0B
 |(1<<
UDRIE0
); ;

100 1: 
UCSR1B
 |(1<<
UDRIE1
); ;

101 2: 
UCSR2B
 |(1<<
UDRIE2
); ;

102 3: 
UCSR3B
 |(1<<
UDRIE3
); ;

105 
	}
}

107 #i‡
deföed
(
GPS_SERIAL
)

108 
boﬁ
 
	$SîülTX‰ì
(
uöt8_t
 
p‹t
) {

109  (
£rülHódTX
[
p‹t
] =
£rülTaûTX
[port]);

110 
	}
}

113 
	$SîülO≥n
(
uöt8_t
 
p‹t
, 
uöt32_t
 
baud
) {

114 
uöt8_t
 
h
 = ((
F_CPU
 / 4 / 
baud
 -1) / 2) >> 8;

115 
uöt8_t
 
l
 = ((
F_CPU
 / 4 / 
baud
 -1) / 2);

116 
p‹t
) {

117 #i‡
	`deföed
(
PROMINI
)

118 0: 
UCSR0A
 = (1<<
U2X0
); 
UBRR0H
 = 
h
; 
UBRR0L
 = 
l
; 
UCSR0B
 |(1<<
RXEN0
)|(1<<
TXEN0
)|(1<<
RXCIE0
); ;

120 #i‡
	`deföed
(
PROMICRO
)

121 #i‡(
ARDUINO
 >100Ë&& !
	`deföed
(
TEENSY20
)

122 0: 
UDIEN
 &~(1<<
SOFE
); ;

124 1: 
UCSR1A
 = (1<<
U2X1
); 
UBRR1H
 = 
h
; 
UBRR1L
 = 
l
; 
UCSR1B
 |(1<<
RXEN1
)|(1<<
TXEN1
)|(1<<
RXCIE1
); ;

126 #i‡
	`deföed
(
MEGA
)

127 0: 
UCSR0A
 = (1<<
U2X0
); 
UBRR0H
 = 
h
; 
UBRR0L
 = 
l
; 
UCSR0B
 |(1<<
RXEN0
)|(1<<
TXEN0
)|(1<<
RXCIE0
); ;

128 1: 
UCSR1A
 = (1<<
U2X1
); 
UBRR1H
 = 
h
; 
UBRR1L
 = 
l
; 
UCSR1B
 |(1<<
RXEN1
)|(1<<
TXEN1
)|(1<<
RXCIE1
); ;

129 2: 
UCSR2A
 = (1<<
U2X2
); 
UBRR2H
 = 
h
; 
UBRR2L
 = 
l
; 
UCSR2B
 |(1<<
RXEN2
)|(1<<
TXEN2
)|(1<<
RXCIE2
); ;

130 3: 
UCSR3A
 = (1<<
U2X3
); 
UBRR3H
 = 
h
; 
UBRR3L
 = 
l
; 
UCSR3B
 |(1<<
RXEN3
)|(1<<
TXEN3
)|(1<<
RXCIE3
); ;

133 
	}
}

135 
	$SîülEnd
(
uöt8_t
 
p‹t
) {

136 
p‹t
) {

137 #i‡
	`deföed
(
PROMINI
)

138 0: 
UCSR0B
 &~((1<<
RXEN0
)|(1<<
TXEN0
)|(1<<
RXCIE0
)|(1<<
UDRIE0
)); ;

140 #i‡
	`deföed
(
PROMICRO
)

141 1: 
UCSR1B
 &~((1<<
RXEN1
)|(1<<
TXEN1
)|(1<<
RXCIE1
)|(1<<
UDRIE1
)); ;

143 #i‡
	`deföed
(
MEGA
)

144 0: 
UCSR0B
 &~((1<<
RXEN0
)|(1<<
TXEN0
)|(1<<
RXCIE0
)|(1<<
UDRIE0
)); ;

145 1: 
UCSR1B
 &~((1<<
RXEN1
)|(1<<
TXEN1
)|(1<<
RXCIE1
)|(1<<
UDRIE1
)); ;

146 2: 
UCSR2B
 &~((1<<
RXEN2
)|(1<<
TXEN2
)|(1<<
RXCIE2
)|(1<<
UDRIE2
)); ;

147 3: 
UCSR3B
 &~((1<<
RXEN3
)|(1<<
TXEN3
)|(1<<
RXCIE3
)|(1<<
UDRIE3
)); ;

150 
	}
}

153 
	$°‹e_u¨t_ö_buf
(
uöt8_t
 
d©a
, uöt8_à
p‹äum
) {

154 #i‡
	`deföed
(
SERIAL_RX
)

155 i‡(
p‹äum
 =
RX_SERIAL_PORT
) {

156 i‡(!
•ekFømeFœgs
) {

157 
	`£i
();

158 
uöt32_t
 
•ekTimeNow
 = (
timî0_ovîÊow_cou¡
 << 8Ë* (64 / 
	`˛ockCy˛esPîMi¸o£c⁄d
());

159 
uöt32_t
 
•ekI¡îvÆ
 = 
•ekTimeNow
 - 
•ekTimeLa°
;

160 
•ekTimeLa°
 = 
•ekTimeNow
;

161 i‡(
•ekI¡îvÆ
 > 2500) {

162 
£rülTaûRX
[
p‹äum
] = 0;

163 
£rülHódRX
[
p‹äum
] = 0;

164 
•ekFømeFœgs
 = 0x01;

166 
	`˛i
();

171 
uöt8_t
 
h
 = 
£rülHódRX
[
p‹äum
];

172 
£rülBuf„rRX
[
h
++][
p‹äum
] = 
d©a
;

173 i‡(
h
 >
RX_BUFFER_SIZE
) h = 0;

174 
£rülHódRX
[
p‹äum
] = 
h
;

175 
	}
}

177 #i‡
deföed
(
PROMINI
)

178 
	$ISR
(
USART_RX_ve˘
Ë{ 
	`°‹e_u¨t_ö_buf
(
UDR0
, 0); 
	}
}

180 #i‡
deföed
(
PROMICRO
)

181 
	$ISR
(
USART1_RX_ve˘
Ë{ 
	`°‹e_u¨t_ö_buf
(
UDR1
, 1); 
	}
}

183 #i‡
deföed
(
MEGA
)

184 
	$ISR
(
USART0_RX_ve˘
Ë{ 
	`°‹e_u¨t_ö_buf
(
UDR0
, 0); 
	}
}

185 
	$ISR
(
USART1_RX_ve˘
Ë{ 
	`°‹e_u¨t_ö_buf
(
UDR1
, 1); 
	}
}

186 
	$ISR
(
USART2_RX_ve˘
Ë{ 
	`°‹e_u¨t_ö_buf
(
UDR2
, 2); 
	}
}

187 
	$ISR
(
USART3_RX_ve˘
Ë{ 
	`°‹e_u¨t_ö_buf
(
UDR3
, 3); 
	}
}

190 
uöt8_t
 
	$SîülRód
(
uöt8_t
 
p‹t
) {

191 #i‡
	`deföed
(
PROMICRO
)

192 #i‡
	`deföed
(
TEENSY20
)

193 if(
p‹t
 =0Ë 
Sîül
.
	`ªad
();

195 #i‡(
ARDUINO
 >= 100)

196 if(
p‹t
 =0Ë
	`USB_Flush
(
USB_CDC_TX
);

198 if(
p‹t
 =0Ë 
	`USB_Recv
(
USB_CDC_RX
);

201 
uöt8_t
 
t
 = 
£rülTaûRX
[
p‹t
];

202 
uöt8_t
 
c
 = 
£rülBuf„rRX
[
t
][
p‹t
];

203 i‡(
£rülHódRX
[
p‹t
] !
t
) {

204 i‡(++
t
 >
RX_BUFFER_SIZE
)Å = 0;

205 
£rülTaûRX
[
p‹t
] = 
t
;

207  
c
;

208 
	}
}

210 #i‡
deföed
(
SERIAL_RX
)

211 
uöt8_t
 
	$SîülPìk
(
uöt8_t
 
p‹t
) {

212 
uöt8_t
 
c
 = 
£rülBuf„rRX
[
£rülTaûRX
[
p‹t
]][port];

213 i‡((
£rülHódRX
[
p‹t
] !
£rülTaûRX
[p‹t])Ë 
c
;  0;

214 
	}
}

217 
uöt8_t
 
	$SîülAvaûabÀ
(
uöt8_t
 
p‹t
) {

218 #i‡
	`deföed
(
PROMICRO
)

219 #i‡!
	`deföed
(
TEENSY20
)

220 if(
p‹t
 =0Ë 
	`USB_AvaûabÀ
(
USB_CDC_RX
);

222 if(
p‹t
 =0Ë 
	`T_USB_AvaûabÀ
();

225  ((
uöt8_t
)(
£rülHódRX
[
p‹t
] - 
£rülTaûRX
[p‹t]))%
RX_BUFFER_SIZE
;

226 
	}
}

228 
uöt8_t
 
	$SîülU£dTXBuff
(
uöt8_t
 
p‹t
) {

229  ((
uöt8_t
)(
£rülHódTX
[
p‹t
] - 
£rülTaûTX
[p‹t]))%
TX_BUFFER_SIZE
;

230 
	}
}

232 
	$SîülSîülize
(
uöt8_t
 
p‹t
,uöt8_à
a
) {

233 
uöt8_t
 
t
 = 
£rülHódTX
[
p‹t
];

234 i‡(++
t
 >
TX_BUFFER_SIZE
)Å = 0;

235 
£rülBuf„rTX
[
t
][
p‹t
] = 
a
;

236 
£rülHódTX
[
p‹t
] = 
t
;

237 
	}
}

239 
	$SîülWrôe
(
uöt8_t
 
p‹t
,uöt8_à
c
){

240 
	`SîülSîülize
(
p‹t
,
c
);
	`U¨tSídD©a
(port);

241 
	}
}

	@Serial.h

1 #i‚de‡
SERIAL_H_


2 
	#SERIAL_H_


	)

4 #i‡
deföed
(
MEGA
)

5 
	#UART_NUMBER
 4

	)

6 #ñi‡
deföed
(
PROMICRO
)

7 
	#UART_NUMBER
 2

	)

9 
	#UART_NUMBER
 1

	)

11 
	#RX_BUFFER_SIZE
 256

12 
	#TX_BUFFER_SIZE
 128

	)

14 
SîülO≥n
(
uöt8_t
 
p‹t
, 
uöt32_t
 
baud
);

15 
uöt8_t
 
SîülRód
(uöt8_à
p‹t
);

16 
SîülWrôe
(
uöt8_t
 
p‹t
,uöt8_à
c
);

17 
uöt8_t
 
SîülAvaûabÀ
(uöt8_à
p‹t
);

18 
SîülEnd
(
uöt8_t
 
p‹t
);

19 
uöt8_t
 
SîülPìk
(uöt8_à
p‹t
);

20 
boﬁ
 
SîülTX‰ì
(
uöt8_t
 
p‹t
);

21 
uöt8_t
 
SîülU£dTXBuff
(uöt8_à
p‹t
);

22 
SîülSîülize
(
uöt8_t
 
p‹t
,uöt8_à
a
);

23 
U¨tSídD©a
(
uöt8_t
 
p‹t
);

25 
SîülWrôe16
(
uöt8_t
 
p‹t
, 
öt16_t
 
vÆ
);

26 
SîülWrôe32
(
uöt8_t
 
p‹t
, 
öt32_t
 
vÆ
);

	@Telemetry.cpp

18 
	~"Arduöo.h
"

19 
	~"c⁄fig.h
"

20 
	~"def.h
"

21 
	~"ty≥s.h
"

22 
	~"Mu…iWii.h
"

23 
	~"Sís‹s.h
"

24 
	~"Sîül.h
"

25 
	~"Tñemëry.h
"

27 #i‡
deföed
(
FRSKY_TELEMETRY
)

29 
	$öô_ãÀmëry
()

31 
	`SîülO≥n
(
TELEMETRY_SERIAL
,
TELEMETRY_BAUD
);

32 
	}
}

34 
	$wrôe_FrSky8
(
uöt8_t
 
D©a
)

36 
	`SîülWrôe
(
TELEMETRY_SERIAL
, 
D©a
);

37 
	}
}

39 
	$check_FrSky_°uffög
(
uöt8_t
 
D©a
)

41 i‡(
D©a
 == 0x5E) {

42 
	`wrôe_FrSky8
(0x5D);

43 
	`wrôe_FrSky8
(0x3E);

45 i‡(
D©a
 == 0x5D) {

46 
	`wrôe_FrSky8
(0x5D);

47 
	`wrôe_FrSky8
(0x3D);

50 
	`wrôe_FrSky8
(
D©a
);

52 
	}
}

54 
	$wrôe_FrSky16
(
uöt16_t
 
D©a
)

56 
uöt8_t
 
D©a_£nd
;

57 
D©a_£nd
 = 
D©a
;

58 
	`check_FrSky_°uffög
(
D©a_£nd
);

59 
D©a_£nd
 = 
D©a
 >> 8 & 0xff;

60 
	`check_FrSky_°uffög
(
D©a_£nd
);

61 
	}
}

63 
	$£ndD©aHód
(
uöt8_t
 
D©a_id
)

65 
	`wrôe_FrSky8
(
PrŸocﬁ_Hódî
);

66 
	`wrôe_FrSky8
(
D©a_id
);

67 
	}
}

69 
	$£ndD©aTaû
()

71 
	`wrôe_FrSky8
(
PrŸocﬁ_Taû
);

72 
	}
}

79 
ölöe
 
	$£nd_Tem≥øtuª
()

81 #i‡
BARO


82 
öt16_t
 
D©a_Tem≥øtuª1
;

83 
D©a_Tem≥øtuª1
 = (
b¨oTem≥øtuª
 + 50) / 100;

84 
	`£ndD©aHód
(
ID_Tem≥øtuª1
);

85 
	`wrôe_FrSky16
(
D©a_Tem≥øtuª1
);

87 #i‡
GPS


88 
öt16_t
 
D©a_NumS©s
;

89 i‡(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 4) {

90 
D©a_NumS©s
 = 
GPS_numS©
;

91 
	`£ndD©aHód
(
ID_Tem≥øtuª2
);

92 
	`wrôe_FrSky16
(
D©a_NumS©s
);

95 
	}
}

98 
ölöe
 
	$£nd_RPM
()

100 #i‡
GPS


101 
uöt16_t
 
D©a_RPM
;

102 i‡(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 4) {

103 
D©a_RPM
 = 
GPS_di°™˚ToHome
;

104 
	`£ndD©aHód
(
ID_RPM
);

105 
	`wrôe_FrSky16
(
D©a_RPM
);

108 
	}
}

111 
ölöe
 
	$£nd_Fuñ
()

113 #i‡
	`deföed
(
POWERMETER
)

114 
uöt16_t
 
D©a_Fuñ
;

115 i‡((
pMëî
[
PMOTOR_SUM
] < (
pAœrm
 / 4)) || (pAlarm == 0))

116 
D©a_Fuñ
 = 100;

117 i‡(
pMëî
[
PMOTOR_SUM
] < (
pAœrm
 / 2))

118 
D©a_Fuñ
 = 75;

119 i‡(
pMëî
[
PMOTOR_SUM
] < (3 * 
pAœrm
 / 4))

120 
D©a_Fuñ
 = 50;

121 i‡(
pMëî
[
PMOTOR_SUM
] < 
pAœrm
)

122 
D©a_Fuñ
 = 25;

124 
D©a_Fuñ
 = 0;

125 
	`£ndD©aHód
(
ID_Fuñ_Àvñ
);

126 
	`wrôe_FrSky16
(
D©a_Fuñ
);

128 
	}
}

131 
ölöe
 
	$£nd_˚Œ_vﬁt
()

133 #i‡
	`deföed
(
VBAT_CELLS
)

134 
uöt16_t
 
D©a_Vﬁt
;

135 
uöt16_t
 
ãmp
;

136 
uöt8_t
 
˚Œ_cou¡î
 = 0;

139 
ãmp
 = 50 * 
™Æog
.
vb©˚Œs
[
˚Œ_cou¡î
];

140 
D©a_Vﬁt
 = (
ãmp
 << 8Ë+ (ãm∞>> 8Ë+ (
˚Œ_cou¡î
 << 4);

141 i‡(++
˚Œ_cou¡î
 >
VBAT_CELLS_NUM
)

142 
˚Œ_cou¡î
 = 0;

143 
	`£ndD©aHód
(
ID_Vﬁt
);

144 
	`wrôe_FrSky16
(
D©a_Vﬁt
);

146 
	}
}

149 
ölöe
 
	$£nd_A…ôude
()

151 #i‡
	`deföed
(
TELEMETRY_ALT_BARO
Ë
™d
 
BARO


152 #i‡
	`deföed
(
FRSKY_FLD02
)

153 
öt16_t
 
D©a_Ætôude
;

154 
D©a_Ætôude
 = (
Æt
.
E°A…
 + 50) / 100;

155 
	`£ndD©aHód
(
ID_A…ôude_bp
);

156 
	`wrôe_FrSky16
(
D©a_Ætôude
);

158 #i‡
deföed
 
OPENTX


159 
öt16_t
 
D©a_Ætôude_bp
, 
D©a_Ætôude_≠
;

160 
D©a_Ætôude_bp
 = 
Æt
.
E°A…
 / 100;

161 
	`£ndD©aHód
(
ID_A…ôude_bp
);

162 
	`wrôe_FrSky16
(
D©a_Ætôude_bp
);

163 
D©a_Ætôude_≠
 = 
Æt
.
E°A…
 - 
D©a_Ætôude_bp
 * 100;

164 
	`£ndD©aHód
(
ID_A…ôude_≠
);

165 
	`wrôe_FrSky16
(
D©a_Ætôude_≠
);

168 #i‡
	`deföed
(
TELEMETRY_ALT_GPS
Ë
™d
 
GPS


169 #i‡
	`deföed
(
FRSKY_FLD02
)

170 #i‡
nŸ
 
	`deföed
(
TELEMETRY_ALT_BARO
)

171 
öt16_t
 
D©a_Ætôude
;

172 i‡(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 4) {

173 
D©a_Ætôude
 = 
GPS_Ætôude
;

174 
	`£ndD©aHód
(
ID_A…ôude_bp
);

175 
	`wrôe_FrSky16
(
D©a_Ætôude
);

179 
öt16_t
 
D©a_GPS_Ætôude_bp
;

180 
uöt16_t
 
D©a_GPS_Ætôude_≠
;

181 i‡(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 4) {

182 
D©a_GPS_Ætôude_bp
 = 
GPS_Ætôude
;

183 
D©a_GPS_Ætôude_≠
 = 0;

184 
	`£ndD©aHód
(
ID_GPS_A…ôude_bp
);

185 
	`wrôe_FrSky16
(
D©a_GPS_Ætôude_bp
);

186 
	`£ndD©aHód
(
ID_GPS_A…ôude_≠
);

187 
	`wrôe_FrSky16
(
D©a_GPS_Ætôude_≠
);

191 
	}
}

194 
ölöe
 
	$£nd_Cour£
()

196 #i‡
nŸ
 
	`deföed
(
FRSKY_FLD02
)

197 #i‡
deföed
 
TELEMETRY_COURSE_GPS
 
™d
 
GPS


198 
uöt16_t
 
D©a_Cour£_bp
;

199 
uöt16_t
 
D©a_Cour£_≠
;

200 i‡(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 4) {

201 
D©a_Cour£_bp
 = 
GPS_ground_cour£
 / 10;

202 
D©a_Cour£_≠
 = 
GPS_ground_cour£
 - 
D©a_Cour£_bp
 * 10;

203 
	`£ndD©aHód
(
ID_Cour£_bp
);

204 
	`wrôe_FrSky16
(
D©a_Cour£_bp
);

205 
	`£ndD©aHód
(
ID_Cour£_≠
);

206 
	`wrôe_FrSky16
(
D©a_Cour£_≠
);

208 #ñi‡
deföed
 
TELEMETRY_COURSE_MAG
 
™d
 
MAG


209 
uöt16_t
 
D©a_Cour£_bp
;

210 
uöt16_t
 
D©a_Cour£_≠
;

211 
D©a_Cour£_bp
 = 
©t
.
hódög
;

212 
D©a_Cour£_≠
 = 0;

213 
	`£ndD©aHód
(
ID_Cour£_bp
);

214 
	`wrôe_FrSky16
(
D©a_Cour£_bp
);

215 
	`£ndD©aHód
(
ID_Cour£_≠
);

216 
	`wrôe_FrSky16
(
D©a_Cour£_≠
);

219 
	}
}

222 
ölöe
 
	$£nd_GPS_•ìd
()

224 #i‡
GPS


225 
uöt16_t
 
D©a_GPS_•ìd_bp
;

226 
uöt16_t
 
D©a_GPS_•ìd_≠
;

227 
uöt16_t
 
ãmp
;

228 i‡(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 4) {

229 #i‡
deföed
 
KILOMETER_HOUR


230 
ãmp
 = (
GPS_•ìd
 * 36) / 10;

232 #ifde‡
ArdH©


233 
ãmp
 = (
GPS_•ìd
 * 40) / 203;

235 
ãmp
 = (
GPS_•ìd
 * 40 + 102) / 203;

238 
D©a_GPS_•ìd_bp
 = 
ãmp
 / 10;

239 
D©a_GPS_•ìd_≠
 = 
ãmp
 - 
D©a_GPS_•ìd_bp
 * 10;

240 
	`£ndD©aHód
(
ID_GPS_•ìd_bp
);

241 
	`wrôe_FrSky16
(
D©a_GPS_•ìd_bp
);

242 
	`£ndD©aHód
(
ID_GPS_•ìd_≠
);

243 
	`wrôe_FrSky16
(
D©a_GPS_•ìd_≠
);

246 
	}
}

249 
ölöe
 
	$£nd_GPS_l⁄gôude
()

251 #i‡
GPS


252 
uöt16_t
 
D©a_L⁄gôude_bp
;

253 
uöt16_t
 
D©a_L⁄gôude_≠
;

254 
uöt16_t
 
D©a_E_W
;

255 
uöt32_t
 
ãmp
, 
ª°
, 
decimÆ
;

256 i‡(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 4) {

257 
ãmp
 = 
	`abs
(
GPS_co‹d
[
LON
]);

258 #i‡
	`deföed
(
COORDFORMAT_DECIMALMINUTES
)

259 
decimÆ
 = 
ãmp
 / 10000000;

260 
ãmp
 -
decimÆ
 * 10000000;

261 
ãmp
 *= 6;

262 
ª°
 = 
ãmp
;

263 
ãmp
 /= 1000000;

264 
ª°
 -
ãmp
 * 1000000;

265 
D©a_L⁄gôude_bp
 = 
decimÆ
 * 100 + 
ãmp
;

266 
D©a_L⁄gôude_≠
 = 
ª°
 / 100;

268 
decimÆ
 = 
ãmp
 / 100000;

269 
ª°
 = 
ãmp
 - 
decimÆ
 * 100000;

270 
D©a_L⁄gôude_bp
 = 
decimÆ
;

271 
D©a_L⁄gôude_≠
 = 
ª°
 / 100;

273 
D©a_E_W
 = 
GPS_co‹d
[
LON
] < 0 ? 'W' : 'E';

274 
	`£ndD©aHód
(
ID_L⁄gôude_bp
);

275 
	`wrôe_FrSky16
(
D©a_L⁄gôude_bp
);

276 
	`£ndD©aHód
(
ID_L⁄gôude_≠
);

277 
	`wrôe_FrSky16
(
D©a_L⁄gôude_≠
);

278 
	`£ndD©aHód
(
ID_E_W
);

279 
	`wrôe_FrSky16
(
D©a_E_W
);

282 
	}
}

284 
ölöe
 
	$£nd_GPS_œtôude
()

286 #i‡
GPS


287 
uöt16_t
 
D©a_L©ôude_bp
;

288 
uöt16_t
 
D©a_L©ôude_≠
;

289 
uöt16_t
 
D©a_N_S
;

290 
uöt32_t
 
ãmp
, 
ª°
, 
decimÆ
;

291 i‡(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 4) {

292 
ãmp
 = 
	`abs
(
GPS_co‹d
[
LAT
]);

293 #i‡
	`deföed
(
COORDFORMAT_DECIMALMINUTES
)

294 
decimÆ
 = 
ãmp
 / 10000000;

295 
ãmp
 -
decimÆ
 * 10000000;

296 
ãmp
 *= 6;

297 
ª°
 = 
ãmp
;

298 
ãmp
 /= 1000000;

299 
ª°
 -
ãmp
 * 1000000;

300 
D©a_L©ôude_bp
 = 
decimÆ
 * 100 + 
ãmp
;

301 
D©a_L©ôude_≠
 = 
ª°
 / 100;

303 
decimÆ
 = 
ãmp
 / 100000;

304 
ª°
 = 
ãmp
 - 
decimÆ
 * 100000;

305 
D©a_L©ôude_bp
 = 
decimÆ
 * 100 + 
ãmp
;

306 
D©a_L©ôude_≠
 = 
ª°
 / 100;

308 
D©a_N_S
 = 
GPS_co‹d
[
LAT
] < 0 ? 'S' : 'N';

309 
	`£ndD©aHód
(
ID_L©ôude_bp
);

310 
	`wrôe_FrSky16
(
D©a_L©ôude_bp
);

311 
	`£ndD©aHód
(
ID_L©ôude_≠
);

312 
	`wrôe_FrSky16
(
D©a_L©ôude_≠
);

313 
	`£ndD©aHód
(
ID_N_S
);

314 
	`wrôe_FrSky16
(
D©a_N_S
);

317 
	}
}

320 
ölöe
 
	$£nd_Time
()

322 
uöt16_t
 
£c⁄ds_sö˚_°¨t
;

323 
uöt16_t
 
D©a_ª°
;

324 
uöt16_t
 
D©a_hours
;

325 
uöt16_t
 
D©a_möuãs
;

326 
uöt16_t
 
D©a_£c⁄ds
;

327 i‡(
f
.
ARMED
) {

328 
£c⁄ds_sö˚_°¨t
 = 
¨medTime
 / 1000000;

329 
D©a_hours
 = 
£c⁄ds_sö˚_°¨t
 / 3600;

330 
D©a_ª°
 = 
£c⁄ds_sö˚_°¨t
 - 
D©a_hours
 * 3600;

331 
D©a_möuãs
 = 
D©a_ª°
 / 60;

332 
D©a_£c⁄ds
 = 
D©a_ª°
 - 
D©a_möuãs
 * 60;

333 
	`£ndD©aHód
(
ID_Hour_Möuã
);

334 
	`wrôe_FrSky16
(
D©a_hours
 + 
D©a_möuãs
 * 256);

335 
	`£ndD©aHód
(
ID_Sec⁄d
);

336 
	`wrôe_FrSky16
(
D©a_£c⁄ds
);

338 
	}
}

341 
ölöe
 
	$£nd_Ac˚l
()

343 #i‡
ACC


344 
öt16_t
 
D©a_Acc_X
;

345 
öt16_t
 
D©a_Acc_Y
;

346 
öt16_t
 
D©a_Acc_Z
;

347 
D©a_Acc_X
 = (()
imu
.
accSmoŸh
[0] / 
ACC_1G
) * 1000;

348 
D©a_Acc_Y
 = (()
imu
.
accSmoŸh
[1] / 
ACC_1G
) * 1000;

349 
D©a_Acc_Z
 = (()
imu
.
accSmoŸh
[2] / 
ACC_1G
) * 1000;

350 
	`£ndD©aHód
(
ID_Acc_X
);

351 
	`wrôe_FrSky16
(
D©a_Acc_X
);

352 
	`£ndD©aHód
(
ID_Acc_Y
);

353 
	`wrôe_FrSky16
(
D©a_Acc_Y
);

354 
	`£ndD©aHód
(
ID_Acc_Z
);

355 
	`wrôe_FrSky16
(
D©a_Acc_Z
);

357 
	}
}

360 
ölöe
 
	$£nd_Vﬁège_am≥ª
()

362 #i‡
	`deföed
 (
VBAT
Ë
™d
 
nŸ
 deföed(
FRSKY_FLD02
)

363 #i‡
deföed
 
OPENTX


364 
uöt16_t
 
vﬁège
;

365 
vﬁège
 = 
™Æog
.
vb©
 * 10;

366 
	`£ndD©aHód
(
ID_VFAS
);

367 
	`wrôe_FrSky16
(
vﬁège
);

369 
uöt16_t
 
vﬁège
;

370 
uöt16_t
 
D©a_Vﬁège_vB©_bp
;

371 
uöt16_t
 
D©a_Vﬁège_vB©_≠
;

372 
vﬁège
 = ((
™Æog
.
vb©
 * 110) / 21);

373 
D©a_Vﬁège_vB©_bp
 = 
vﬁège
 / 100;

374 
	`£ndD©aHód
(
ID_Vﬁège_Amp_bp
);

375 
	`wrôe_FrSky16
(
D©a_Vﬁège_vB©_bp
);

376 
D©a_Vﬁège_vB©_≠
 = ((
vﬁège
 % 100) + 5) / 10;

377 
	`£ndD©aHód
(
ID_Vﬁège_Amp_≠
);

378 
	`wrôe_FrSky16
(
D©a_Vﬁège_vB©_≠
);

382 #i‡
	`deföed
(
POWERMETER
)

383 
uöt16_t
 
D©a_Vﬁège_I_MŸ‹
;

384 
D©a_Vﬁège_I_MŸ‹
 = 
™Æog
.
am≥øge
;

385 
	`£ndD©aHód
(
ID_Cuºít
);

386 
	`wrôe_FrSky16
(
D©a_Vﬁège_I_MŸ‹
);

388 
	}
}

391 
	$run_ãÀmëry
()

393 
uöt32_t
 
œ°Time
;

394 
uöt8_t
 
ãÀ_lo›
;

395 i‡((
	`mûlis
(Ë- 
œ°Time
) > 125) {

397 
œ°Time
 = 
	`mûlis
();

398 
ãÀ_lo›
++;

399 
ãÀ_lo›
) {

401 
	`£nd_Vﬁège_am≥ª
();

402 
	`£nd_Ac˚l
();

405 
	`£nd_Fuñ
();

406 
	`£nd_GPS_l⁄gôude
();

409 
	`£nd_Tem≥øtuª
();

410 
	`£nd_Ac˚l
();

413 
	`£nd_A…ôude
();

414 
	`£nd_GPS_•ìd
();

415 
	`£nd_Cour£
();

418 
	`£nd_Vﬁège_am≥ª
();

419 
	`£nd_Ac˚l
();

422 
	`£nd_RPM
();

423 
	`£nd_GPS_œtôude
();

426 
	`£nd_GPS_•ìd
();

427 
	`£nd_Ac˚l
();

428 
	`£nd_˚Œ_vﬁt
();

431 
	`£nd_A…ôude
();

432 
	`£nd_Time
();

433 
ãÀ_lo›
 = 0;

436 
	`£ndD©aTaû
();

438 
	}
}

441 #i‡
deföed
(
SPORT_TELEMETRY
)

443 
	g_FrSkySp‹t_¸c
;

444 
	g_cuºítGPSVÆue
;

446 
	$FrSkySp‹t_£ndByã
(
uöt8_t
 
byã
)

449 
_FrSkySp‹t_¸c
 +
byã
;

450 
_FrSkySp‹t_¸c
 += _FrSkySport_crc >> 8;

451 
_FrSkySp‹t_¸c
 &= 0x00ff;

452 
_FrSkySp‹t_¸c
 += _FrSkySport_crc >> 8;

453 
_FrSkySp‹t_¸c
 &= 0x00ff;

455 i‡–(
byã
 =
FRSKY_START_STOP
Ë|| (byã =
FRSKY_BYTESTUFF
) ) {

456 
	`SîülWrôe
(
TELEMETRY_SERIAL
, 
FRSKY_BYTESTUFF
);

457 
byã
 &~
FRSKY_STUFF_MASK
;

460 
	`SîülWrôe
(
TELEMETRY_SERIAL
, 
byã
);

461 
	}
}

463 
	$FrSkySp‹t_£ndCrc
()

465 
	`FrSkySp‹t_£ndByã
(0xFF - 
_FrSkySp‹t_¸c
);

466 
	}
}

468 
	$FrSkySp‹t_£ndVÆue
(
uöt16_t
 
id
, 
uöt32_t
 
vÆue
)

470 
_FrSkySp‹t_¸c
 = 0;

471 
	`FrSkySp‹t_£ndByã
(0x10);

472 
uöt8_t
 *
byãs
 = (uöt8_t*)&
id
;

473 
	`FrSkySp‹t_£ndByã
(
byãs
[0]);

474 
	`FrSkySp‹t_£ndByã
(
byãs
[1]);

475 
byãs
 = (
uöt8_t
*)&
vÆue
;

476 
	`FrSkySp‹t_£ndByã
(
byãs
[0]);

477 
	`FrSkySp‹t_£ndByã
(
byãs
[1]);

478 
	`FrSkySp‹t_£ndByã
(
byãs
[2]);

479 
	`FrSkySp‹t_£ndByã
(
byãs
[3]);

480 
	`FrSkySp‹t_£ndCrc
();

481 
	}
}

483 
	$FrSkySp‹t_£ndA2vﬁège
()

485 #ifde‡
VBAT


486 
uöt32_t
 
›ítx_vÆ
 = (255.0 * ()(
™Æog
.
vb©
 / ()
FRSKY_SPORT_A2_MAX
));

487 
	`FrSkySp‹t_£ndVÆue
(
FRSKY_SPORT_ADC2_ID
, (
›ítx_vÆ
));

489 
	}
}

491 
uöt32_t
 
	$FrSkySp‹t_EncodeCo‹dö©e
(
œtL⁄
, 
boﬁ
 
isL©
)

493 #i‡
GPS


494 
uöt32_t
 
Ÿx_co‹d
 = 0;

495 i‡(!
isL©
)

497 
Ÿx_co‹d
 = 
	`abs
(
œtL⁄
);

498 
Ÿx_co‹d
 = (otx_coord + otx_coord / 2) / 25 | 0x80000000;

499 i‡(
œtL⁄
 < 0Ë
Ÿx_co‹d
 |= 0x40000000;

502 
Ÿx_co‹d
 = 
	`abs
(
œtL⁄
);

503 
Ÿx_co‹d
 = (otx_coord + otx_coord / 2) / 25;

504 i‡(
œtL⁄
 < 0Ë
Ÿx_co‹d
 |= 0x40000000;

506  
Ÿx_co‹d
;

508 
	}
}

510 
	$FrSkySp‹t_£ndGPSCo‹dö©e
()

512 #i‡
GPS


513 
uöt32_t
 
GPSVÆueToSíd
 = 0;

515 i‡(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 4)

517 
_cuºítGPSVÆue
)

520 
GPSVÆueToSíd
 = 
	`FrSkySp‹t_EncodeCo‹dö©e
(
GPS_co‹d
[
LON
], 
Ál£
);

521 
_cuºítGPSVÆue
 = 1;

524 
GPSVÆueToSíd
 = 
	`FrSkySp‹t_EncodeCo‹dö©e
(
GPS_co‹d
[
LAT
], 
åue
);

525 
_cuºítGPSVÆue
 = 0;

528 
	`FrSkySp‹t_£ndVÆue
(
FRSKY_SPORT_GPS_LONG_LATI_ID
, 
GPSVÆueToSíd
);

531 
	}
}

533 
	$FrSkySp‹t_£ndGPSA…ôude
()

535 #i‡
	`deföed
(
TELEMETRY_ALT_GPS
Ë
™d
 
GPS


536 i‡(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 4)

538 
	`FrSkySp‹t_£ndVÆue
(
FRSKY_SPORT_GPS_ALT_ID
, (
öt32_t
)(
GPS_Ætôude
));

541 
	}
}

543 
	$FrSkySp‹t_£ndGPSS≥ed
() {

544 #i‡
GPS


545 i‡(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 4)

547 
uöt32_t
 
•ìd
 = (()
GPS_•ìd
 * 100);

548 
	`FrSkySp‹t_£ndVÆue
(
FRSKY_SPORT_GPS_SPEED_ID
, 
•ìd
);

551 
	}
}

553 
	$FrSkySp‹t_£ndA…ôude
()

555 #i‡
	`deföed
(
TELEMETRY_ALT_BARO
Ë
™d
 
BARO


556 
	`FrSkySp‹t_£ndVÆue
(
FRSKY_SPORT_ALT_ID
, (
öt32_t
)(
Æt
.
E°A…
) * 100);

558 
	}
}

560 
	$FrSkySp‹t_£ndHódög
()

562 #i‡
	`deföed
(
TELEMETRY_COURSE_MAG
Ë
	`‹
 (deföed(
TELEMETRY_COURSE_GPS
Ë
™d
 
GPS
)

563 #i‡
	`deföed
(
TELEMETRY_COURSE_MAG
)

564 
uöt32_t
 
Ÿx_hódög
 = (uöt32_t)(
©t
.
hódög
 + 360) % 360 * 100;

565 
	`FrSkySp‹t_£ndVÆue
(
FRSKY_SPORT_GPS_COURS_ID
, 
Ÿx_hódög
);

566 #ñi‡
	`deföed
(
TELEMETRY_COURSE_GPS
Ë&& deföed(
GPS
)

567 i‡(
f
.
GPS_FIX
 && 
GPS_numS©
 >= 4)

569 
uöt32_t
 
Ÿx_hódög
 = (uöt32_t)(
GPS_ground_cour£
 + 360) % 360 * 100;

570 
	`FrSkySp‹t_£ndVÆue
(
FRSKY_SPORT_GPS_COURS_ID
, 
Ÿx_hódög
);

574 
	}
}

576 
	$FrSkySp‹t_£ndACCX
()

578 #ifde‡
ACC


579 
	`FrSkySp‹t_£ndVÆue
(
FRSKY_SPORT_ACCX_ID
, 
imu
.
accSmoŸh
[0] / 5);

581 
	}
}

583 
	$FrSkySp‹t_£ndACCY
()

585 #ifde‡
ACC


586 
	`FrSkySp‹t_£ndVÆue
(
FRSKY_SPORT_ACCY_ID
, 
imu
.
accSmoŸh
[1] / 5);

588 
	}
}

590 
	$FrSkySp‹t_£ndACCZ
()

592 #ifde‡
ACC


593 
	`FrSkySp‹t_£ndVÆue
(
FRSKY_SPORT_ACCZ_ID
, 
imu
.
accSmoŸh
[2] / 5);

595 
	}
}

597 
	$FrSkySp‹t_£ndA…V¨io
()

599 #ifde‡
VARIOMETER


600 
	`FrSkySp‹t_£ndVÆue
(
FRSKY_SPORT_VARIO_ID
, ((
uöt32_t
)
Æt
.
v¨io
));

602 
	}
}

604 
	$öô_ãÀmëry
()

606 
_cuºítGPSVÆue
 = 0;

607 
	`SîülO≥n
(
TELEMETRY_SERIAL
,
TELEMETRY_BAUD
);

608 
	}
}

610 
	$run_ãÀmëry
()

612 
uöt8_t
 
œ°Rx
 = 0;

613 
uöt8_t
 
c
 = 
	`SîülAvaûabÀ
(
TELEMETRY_SERIAL
);

615 
c
--) {

616 
rx
 = 
	`SîülRód
(
TELEMETRY_SERIAL
);

617 i‡(
œ°Rx
 =
FRSKY_START_STOP
)

619 
debug
[1] = 
rx
;

620 
rx
)

622 
FRSKY_SPORT_DEVICE_4
:

623 
	`FrSkySp‹t_£ndA2vﬁège
();

625 
FRSKY_SPORT_DEVICE_8
:

626 
	`FrSkySp‹t_£ndACCX
();

628 
FRSKY_SPORT_DEVICE_9
:

629 
	`FrSkySp‹t_£ndACCY
();

631 
FRSKY_SPORT_DEVICE_10
:

632 
	`FrSkySp‹t_£ndACCZ
();

634 
FRSKY_SPORT_DEVICE_11
:

635 
	`FrSkySp‹t_£ndA…ôude
();

637 
FRSKY_SPORT_DEVICE_12
:

638 
	`FrSkySp‹t_£ndA…V¨io
();

640 
FRSKY_SPORT_DEVICE_13
:

641 
	`FrSkySp‹t_£ndHódög
();

643 
FRSKY_SPORT_DEVICE_14
:

644 
	`FrSkySp‹t_£ndGPSS≥ed
();

646 
FRSKY_SPORT_DEVICE_15
:

647 
	`FrSkySp‹t_£ndGPSA…ôude
();

649 
FRSKY_SPORT_DEVICE_16
:

650 
	`FrSkySp‹t_£ndGPSCo‹dö©e
();

654 
œ°Rx
 = 
rx
;

656 
	}
}

	@Telemetry.h

1 #i‚de‡
TELEMETRY_H_


2 
	#TELEMETRY_H_


	)

17 #i‡
deföed
(
FRSKY_TELEMETRY
)

19 
	#TELEMETRY_BAUD
 9600

	)

22 
	#PrŸocﬁ_Hódî
 0x5E

	)

23 
	#PrŸocﬁ_Taû
 0x5E

	)

27 
	#ID_GPS_A…ôude_bp
 0x01

	)

28 
	#ID_GPS_A…ôude_≠
 0x09

	)

29 
	#ID_Tem≥øtuª1
 0x02

	)

30 
	#ID_RPM
 0x03

	)

31 
	#ID_Fuñ_Àvñ
 0x04

	)

32 
	#ID_Tem≥øtuª2
 0x05

	)

33 
	#ID_Vﬁt
 0x06

	)

34 
	#ID_A…ôude_bp
 0x10

	)

35 
	#ID_A…ôude_≠
 0x21

	)

36 
	#ID_GPS_•ìd_bp
 0x11

	)

37 
	#ID_GPS_•ìd_≠
 0x19

	)

38 
	#ID_L⁄gôude_bp
 0x12

	)

39 
	#ID_L⁄gôude_≠
 0x1A

	)

40 
	#ID_E_W
 0x22

	)

41 
	#ID_L©ôude_bp
 0x13

	)

42 
	#ID_L©ôude_≠
 0x1B

	)

43 
	#ID_N_S
 0x23

	)

44 
	#ID_Cour£_bp
 0x14

	)

45 
	#ID_Cour£_≠
 0x1C

	)

46 
	#ID_D©e_M⁄th
 0x15

	)

47 
	#ID_Yór
 0x16

	)

48 
	#ID_Hour_Möuã
 0x17

	)

49 
	#ID_Sec⁄d
 0x18

	)

50 
	#ID_Acc_X
 0x24

	)

51 
	#ID_Acc_Y
 0x25

	)

52 
	#ID_Acc_Z
 0x26

	)

53 
	#ID_Vﬁège_Amp_bp
 0x3A

	)

54 
	#ID_Vﬁège_Amp_≠
 0x3B

	)

55 
	#ID_Cuºít
 0x28

	)

56 
	#ID_VFAS
 0x39

	)

59 #i‡
deföed
(
SPORT_TELEMETRY
)

61 
	#TELEMETRY_BAUD
 57600

	)

62 
	#FRSKY_START_STOP
 0x7e

	)

63 
	#FRSKY_BYTESTUFF
 0x7d

	)

64 
	#FRSKY_STUFF_MASK
 0x20

	)

67 
	#FRSKY_SPORT_RSSI_ID
 0xf101

	)

68 
	#FRSKY_SPORT_ADC1_ID
 0xf102

69 
	#FRSKY_SPORT_ADC2_ID
 0xf103

70 
	#FRSKY_SPORT_BATT_ID
 0xf104

	)

71 
	#FRSKY_SPORT_SWR_ID
 0xf105

	)

72 
	#FRSKY_SPORT_T1_ID
 0x0400

	)

73 
	#FRSKY_SPORT_T2_ID
 0x0410

	)

74 
	#FRSKY_SPORT_RPM_ID
 0x0500

	)

75 
	#FRSKY_SPORT_FUEL_ID
 0x0600

	)

76 
	#FRSKY_SPORT_ALT_ID
 0x0100

	)

77 
	#FRSKY_SPORT_VARIO_ID
 0x0110

	)

78 
	#FRSKY_SPORT_ACCX_ID
 0x0700

	)

79 
	#FRSKY_SPORT_ACCY_ID
 0x0710

	)

80 
	#FRSKY_SPORT_ACCZ_ID
 0x0720

	)

81 
	#FRSKY_SPORT_CURR_ID
 0x0200

	)

82 
	#FRSKY_SPORT_VFAS_ID
 0x0210

	)

83 
	#FRSKY_SPORT_CELLS_ID
 0x0300

	)

84 
	#FRSKY_SPORT_GPS_LONG_LATI_ID
 0x0800

	)

85 
	#FRSKY_SPORT_GPS_ALT_ID
 0x0820

	)

86 
	#FRSKY_SPORT_GPS_SPEED_ID
 0x0830

	)

87 
	#FRSKY_SPORT_GPS_COURS_ID
 0x0840

	)

88 
	#FRSKY_SPORT_GPS_TIME_DATE_ID
 0x0850

	)

92 
	#FRSKY_SPORT_DEVICE_1
 0xa1

	)

93 
	#FRSKY_SPORT_DEVICE_2
 0x22

	)

94 
	#FRSKY_SPORT_DEVICE_3
 0x83

	)

95 
	#FRSKY_SPORT_DEVICE_4
 0xe4

	)

96 
	#FRSKY_SPORT_DEVICE_5
 0x45

	)

97 
	#FRSKY_SPORT_DEVICE_6
 0xc6

	)

98 
	#FRSKY_SPORT_DEVICE_7
 0x67

	)

99 
	#FRSKY_SPORT_DEVICE_8
 0x48

	)

100 
	#FRSKY_SPORT_DEVICE_9
 0xe9

	)

101 
	#FRSKY_SPORT_DEVICE_10
 0x6a

	)

102 
	#FRSKY_SPORT_DEVICE_11
 0xcb

	)

103 
	#FRSKY_SPORT_DEVICE_12
 0xac

	)

104 
	#FRSKY_SPORT_DEVICE_13
 0xd

	)

105 
	#FRSKY_SPORT_DEVICE_14
 0x8e

	)

106 
	#FRSKY_SPORT_DEVICE_15
 0x2f

	)

107 
	#FRSKY_SPORT_DEVICE_16
 0xd0

	)

108 
	#FRSKY_SPORT_DEVICE_17
 0x71

	)

109 
	#FRSKY_SPORT_DEVICE_18
 0xf2

	)

110 
	#FRSKY_SPORT_DEVICE_19
 0x53

	)

111 
	#FRSKY_SPORT_DEVICE_20
 0x34

	)

112 
	#FRSKY_SPORT_DEVICE_21
 0x95

	)

113 
	#FRSKY_SPORT_DEVICE_22
 0x16

	)

114 
	#FRSKY_SPORT_DEVICE_23
 0xb7

	)

115 
	#FRSKY_SPORT_DEVICE_24
 0x98

	)

116 
	#FRSKY_SPORT_DEVICE_25
 0x39

	)

117 
	#FRSKY_SPORT_DEVICE_26
 0xba

	)

118 
	#FRSKY_SPORT_DEVICE_27
 0x1b

	)

123 
uöt32_t
 
¨medTime
;

126 
öô_ãÀmëry
();

127 
run_ãÀmëry
();

	@config.h

1 #i‚de‡
CONFIG_H_


2 
	#CONFIG_H_


	)

41 
	#STAY_IN_MISSION


42 

	)

50 
	#SERVO_FIELD_TRIM


	)

94 
	#AIRPLANE


	)

109 
	#MINTHROTTLE
 1150

110 

	)

113 
	#MAXTHROTTLE
 1850

	)

118 
	#MINCOMMAND
 1000

	)

121 
	#I2C_SPEED
 100000L

123 

	)

129 
	#LOOP_TIME
 2800

	)

214 
	#HOPLIST
 {13,54,23}

	)

215 
	#OLRS_HEADER
 {'O','L','R','S'}

	)

226 
	#MPU9250


227 

	)

283 
	#PID_CONTROLLER
 1

	)

286 
	#YAW_DIRECTION
 1

	)

289 
	#ONLYARMWHENFLAT


290 

	)

294 
	#ALLOW_ARM_DISARM_VIA_TX_YAW


	)

307 
	#DISABLE_SERVOS_WHEN_UNARMED


	)

325 
	#CAM_TIME_HIGH
 1000

326 

	)

329 
	#ROLLRATE
 0.5f

	)

330 
	#PITCHRATE
 0.5f

	)

333 
	#USE_THROTTLESERVO


334 

	)

335 
	#FLAPPERONS
 
AUX2


336 
	#FLAPPERON_EP
 { 1020, 2000 }

337 
	#FLAPPERON_INVERT
 { -1, 1 }

338 

	)

343 
	#AUTOFLAPS_V_RETRACTED
 500

344 
	#AUTOFLAPS_V_EXTENDED
 350

345 

	)

356 
	#YAW_COLL_PRECOMP
 10

357 
	#YAW_COLL_PRECOMP_DEADBAND
 120

358 

	)

363 
	#COLLECTIVE_PITCH
 
THROTTLE


	)

366 
	#COLLECTIVE_RANGE
 { 80, 0, 80 }

367 
	#YAWMOTOR
 0

368 

	)

371 
	#SERVO_NICK
 { +10, -10, 0 }

	)

372 
	#SERVO_LEFT
 { +10, +5, +10 }

	)

373 
	#SERVO_RIGHT
 { +10, +5, -10 }

	)

376 
	#CONTROL_RANGE
 { 100, 100 }

377 

	)

419 
	#EXTENDED_AUX_STATES


	)

465 
	#SBUS_MID_OFFSET
 988

466 

	)

473 
	#STICK_SCALING_FACTOR
 1.1

	)

495 
	#RCAUXPIN12


	)

570 
	#SERIAL0_COM_SPEED
 115200

	)

571 
	#SERIAL1_COM_SPEED
 115200

	)

572 
	#SERIAL2_COM_SPEED
 115200

	)

573 
	#SERIAL3_COM_SPEED
 115200

	)

577 
	#NEUTRALIZE_DELAY
 100000

	)

623 
	#ALTITUDE_RESET_ON_ARM


	)

648 
	#GYROCALIBRATIONFAILSAFE


	)

653 
	#AP_MODE
 40

654 

	)

659 
	#ACROTRAINER_MODE
 200

660 

	)

668 
	#FAILSAFE


669 
	#FAILSAFE_DELAY
 10

670 
	#FAILSAFE_OFF_DELAY
 200

671 
	#FAILSAFE_THROTTLE
 (
MINTHROTTLE
 + 200)

672 

	)

673 
	#FAILSAFE_DETECT_TRESHOLD
 985

	)

722 
	#DEADBAND
 6

	)

737 
	#GPS_SERIAL
 1

740 

	)

748 
	#GPS_BAUD
 57600

749 

	)

758 
	#UBLOX


	)

782 
	#USE_MSP_WP


	)

790 
	#NAV_CONTROLS_HEADING
 1

792 
	#NAV_TAIL_FIRST
 0

794 
	#NAV_SET_TAKEOFF_HEADING
 1

795 

	)

800 
	#MAG_DECLINATION
 15.03f

801 

	)

803 
	#GPS_LEAD_FILTER


804 

	)

810 
	#GPS_WP_RADIUS
 100

811 

	)

814 
	#SAFE_WP_DISTANCE
 500

815 

	)

817 
	#MAX_NAV_ALTITUDE
 100

818 

	)

820 
	#NAV_SPEED_MIN
 100

822 
	#NAV_SPEED_MAX
 400

824 
	#NAV_SLOW_NAV
 0

826 
	#CROSSTRACK_GAIN
 .4

828 
	#NAV_BANK_MAX
 3000

829 

	)

831 
	#RTH_ALTITUDE
 50

833 
	#WAIT_FOR_RTH_ALT
 1

834 

	)

836 
	#NAV_TAKEOVER_BARO
 0

837 

	)

839 
	#IGNORE_THROTTLE
 1

840 

	)

843 
	#FENCE_DISTANCE
 600

	)

846 
	#LAND_SPEED
 100

	)

871 
	#LCD_SERIAL_PORT
 0

872 

	)

890 
	#LCD_MENU_PREV
 'p'

	)

891 
	#LCD_MENU_NEXT
 'n'

	)

892 
	#LCD_VALUE_UP
 'u'

	)

893 
	#LCD_VALUE_DOWN
 'd'

	)

895 
	#LCD_MENU_SAVE_EXIT
 's'

	)

896 
	#LCD_MENU_ABORT
 'x'

	)

964 
	#TELEMETRY_SERIAL
 3

965 
	#COORDFORMAT_DECIMALMINUTES


966 

	)

998 
	#VBAT


999 
	#VBATSCALE
 134

1001 
	#VBATNOMINAL
 126

1002 
	#VBATLEVEL_WARN1
 107

1003 
	#VBATLEVEL_WARN2
 99

1004 
	#VBATLEVEL_CRIT
 93

1005 
	#NO_VBAT
 16

1006 
	#VBAT_OFFSET
 0

1007 

	)

1012 
	#VBAT_CELLS_NUM
 0

1013 
	#VBAT_CELLS_PINS
 {
A0
, 
A1
, 
A2
, 
A3
, 
A4
, 
A5
 }

1014 
	#VBAT_CELLS_OFFSETS
 {0, 50, 83, 121, 149, 177 }

1015 
	#VBAT_CELLS_DIVS
 { 75, 122, 98, 18, 30, 37 }

1016 

	)

1029 
	#PSENSORNULL
 510

	)

1031 
	#PINT2mA
 132

	)

1042 
	#ALT_HOLD_THROTTLE_NEUTRAL_ZONE
 50

	)

1063 
	#AIR_MAXSPEED
 30

1064 

	)

1111 
	#BOARD_NAME
 "Mu…iWiò V-.--"

	)

1118 
	#NO_FLASH_CHECK


	)

1126 
	#VBAT_PRESCALER
 16

1127 

	)

1155 
	#MIDRC
 1500

	)

1159 
	#SERVO_RFR_50HZ


	)

1180 
	#MEGA_HW_PWM_SERVOS


	)

1193 
	#SERVO_RFR_RATE
 100

1196 

	)

1245 
	#LOG_PERMANENT


	)

1250 
	#DISARM_AT_STARTUP


1251 

	)

1255 
	#MWI_SDCARD


1256 
	#LOG_PERMANENT_SD_ONLY


1257 
	#LOG_GPS_POSITION
 2

1258 
	#SDCARD_CSPIN
 53

1259 

	)

1295 
	#ESC_CALIB_LOW
 
MINCOMMAND


	)

1296 
	#ESC_CALIB_HIGH
 2000

	)

1304 
	#LCD_TELEMETRY_FREQ
 23

1305 
	#LCD_TELEMETRY_AUTO_FREQ
 967

1306 
	#PSENSOR_SMOOTH
 16

1307 
	#VBAT_SMOOTH
 16

1308 
	#RSSI_SMOOTH
 16

1309 

	)

1346 
	#DISABLE_POWER_PIN


	)

1348 #¥agm®
ªgi⁄
 
SECTION
 9 - 
ADDITIONAL
 
PARAMETERS


1355 #¥agm®
ªgi⁄


1357 
	#INFLIGHT_PID_TUNING


	)

1358 
	#INFLIGHT_PID_TUNING_TYPE
 0

1363 

	)

1366 
	#CLEANFLIGHT


	)

1370 
	#AUTOTUNE


	)

1372 #¥agm®
ídªgi⁄


1374 #¥agm®
ªgi⁄


1384 
	#SONAR_GENERIC_SCALE
 58

1385 
	#SONAR_GENERIC_MAX_RANGE
 500

1386 
	#SONAR_GENERIC_TRIGGER_PIN
 12

1387 
	#SONAR_GENERIC_ECHO_PIN
 11

1388 

	)

1390 
	#SONAR_MAX_HOLD
 400

1391 

	)

1393 
	#SONAR_BARO_FUSION_LC
 100

1394 
	#SONAR_BARO_FUSION_HC
 
SONAR_MAX_HOLD


1395 
	#SONAR_BARO_FUSION_RATIO
 0.0

1396 
	#SONAR_BARO_LPF_LC
 0.9f

	)

1397 
	#SONAR_BARO_LPF_HC
 0.9f

	)

1398 #¥agm®
ídªgi⁄


1399 #¥agm®
ídªgi⁄


	@def.h

1 #i‚de‡
DEF_H_


2 
	#DEF_H_


	)

7 #i‡
COPTERTEST
 == 1

8 
	#QUADP


	)

9 
	#WMP


	)

10 #ñi‡
COPTERTEST
 == 2

11 
	#FLYING_WING


	)

12 
	#WMP


	)

13 
	#BMA020


	)

14 
	#FAILSAFE


	)

15 
	#LCD_CONF


	)

16 
	#LCD_TEXTSTAR


	)

17 
	#VBAT


	)

18 
	#POWERMETER_SOFT


	)

19 #ñi‡
COPTERTEST
 == 3

20 
	#TRI


	)

21 
	#FREEIMUv035_MS


	)

22 
	#BUZZER


	)

23 
	#VBAT


	)

24 
	#POWERMETER_HARD


	)

25 
	#LCD_CONF


	)

26 
	#LCD_CONF_AUX


	)

27 
	#LCD_VT100


	)

28 
	#LCD_TELEMETRY


	)

29 
	#LCD_TELEMETRY_STEP
 "01245"

	)

30 
	#LOG_VALUES
 1

	)

31 
	#SUPPRESS_BARO_ALTHOLD


	)

32 
	#VARIOMETER
 12

	)

33 #ñi‡
COPTERTEST
 == 4

34 
	#QUADX


	)

35 
	#CRIUS_SE


	)

36 
	#SPEKTRUM
 2048

	)

37 
	#LED_RING


	)

38 
	#GPS_SERIAL
 2

	)

39 
	#NMEA


	)

40 
	#LOG_VALUES
 2

	)

41 
	#LOG_PERMANENT


	)

42 
	#LOG_PERMANENT_SERVICE_LIFETIME
 36000

	)

43 #ñi‡
COPTERTEST
 == 5

44 
	#HELI_120_CCPM


	)

45 
	#CRIUS_LITE


	)

46 #unde‡
DISABLE_POWER_PIN


47 
	#RCAUXPIN8


	)

48 
	#OLED_I2C_128x64


	)

49 
	#LCD_TELEMETRY


	)

50 
	#LOG_VALUES
 3

	)

51 
	#DEBUG


	)

52 #unde‡
SERVO_RFR_50HZ


53 
	#SERVO_RFR_160HZ


	)

54 
	#VBAT


	)

55 
	#POWERMETER_SOFT


	)

56 
	#MMGYRO
 10

	)

57 
	#MMGYROVECTORLENGTH
 15

	)

58 
	#GYRO_SMOOTHING
 {45, 45, 50}

	)

59 
	#INFLIGHT_ACC_CALIBRATION


	)

60 
	#LOG_PERMANENT


	)

61 
	#LOG_PERMANENT_SHOW_AT_STARTUP


	)

62 
	#LOG_PERMANENT_SHOW_AT_L


	)

63 
	#LOG_PERMANENT_SERVICE_LIFETIME
 36000

	)

64 
	#GOVERNOR_P
 0

	)

65 
	#GOVERNOR_D
 10

	)

66 
	#YAW_COLL_PRECOMP
 15

	)

67 
	#YAW_COLL_PRECOMP_DEADBAND
 130

	)

68 
	#VOLTAGEDROP_COMPENSATION


	)

69 #ñi‡
COPTERTEST
 == 6

70 
	#HEX6H


	)

71 
	#DIYFLYING_MAGE_V1


	)

72 
	#BUZZER


	)

73 
	#RCOPTIONSBEEP


74 
	#ARMEDTIMEWARNING
 480

75 
	#VBAT


	)

76 
	#VOLTAGEDROP_COMPENSATION


	)

77 
	#MEGA_HW_PWM_SERVOS


	)

78 
	#SERVO_RFR_RATE
 300

79 
	#LOG_VALUES
 1

	)

80 
	#DEBUG


	)

81 
	#MULTIPLE_CONFIGURATION_PROFILES


	)

82 
	#DISPLAY_FONT_DSIZE


	)

83 
	#OLED_DIGOLE


	)

84 
	#LCD_CONF


	)

85 #ñi‡
COPTERTEST
 == 7

86 
	#HELI_120_CCPM


	)

87 
	#YAW_COLL_PRECOMP
 15

	)

88 
	#YAW_COLL_PRECOMP_DEADBAND
 130

	)

89 
	#NANOWII


	)

90 
	#FORCE_ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = X; imu.accADC[
PITCH
] = Y; imu.accADC[
YAW
] = Z;}

	)

91 
	#FORCE_GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -Y; imu.gyroADC[
PITCH
] = X; imu.gyroADC[
YAW
] = -Z;}

	)

92 
	#A32U4_4_HW_PWM_SERVOS


	)

93 
	#SERVO_RFR_RATE
 200

94 
	#SERVO_PIN5_RFR_RATE
 165

95 
	#SPEKTRUM
 1024

	)

96 
	#BUZZER


	)

97 
	#RCOPTIONSBEEP


98 
	#VBAT


	)

99 
	#LOG_VALUES
 1

	)

100 
	#DISPLAY_FONT_DSIZE


	)

101 
	#OLED_DIGOLE


	)

102 
	#LCD_CONF


	)

103 
	#LCD_TELEMETRY


	)

104 
	#LCD_TELEMETRY_AUTO
 "1"

	)

105 
	#LCD_TELEMETRY_STEP
 "F14$5R"

	)

106 
	#LOG_PERMANENT


	)

107 
	#LOG_PERMANENT_SHOW_AFTER_CONFIG


	)

108 
	#SUPPRESS_OTHER_SERIAL_COMMANDS


	)

109 
	#SUPPRESS_DEFAULTS_FROM_GUI


	)

110 
	#NO_FLASH_CHECK


	)

111 
	#DEBUG_FREE


	)

112 #ñi‡
COPTERTEST
 == 8

113 
	#BI


	)

114 
	#ITG3200


	)

115 
	#PID_CONTROLLER
 2

	)

116 
	#ESC_CALIB_CANNOT_FLY


	)

117 #ñi‡
COPTERTEST
 == 9

118 
	#AIRPLANE


	)

119 
	#FREEIMUv035


	)

120 
	#POWERMETER_HARD


	)

121 
	#WATTS


	)

122 
	#VBAT


	)

123 
	#VBAT_CELLS


	)

124 
	#VBAT_CELLS_NUM
 3

	)

125 
	#VBAT_CELLS_PINS
 {
A0
, 
A1
, 
A2
 }

	)

126 
	#VBAT_CELLS_OFFSETS
 {0, 50, 83 }

	)

127 
	#VBAT_CELLS_DIVS
 { 75, 122, 98 }

	)

128 #ñi‡
COPTERTEST
 == 10

129 
	#Y6


	)

130 
	#CRIUS_AIO_PRO


	)

131 
	#LCD_LCD03S


	)

132 
	#SERIAL0_COM_SPEED
 9600

	)

133 
	#LCD_CONF


	)

134 #ñi‡
COPTERTEST
 == 20

135 
	#QUADWING


	)

136 
	#CRIUS_AIO_PRO


	)

137 #ñi‡
COPTERTEST
 == 21

139 
	#AIRPLANE


	)

140 
	#OPENLRS_V2


	)

141 
	#RX_RSSI_CHAN
 9

	)

142 
	#MPU6050


	)

143 
	#FAILSAFE


	)

144 
	#FAILSAFE_DETECT_TRESHOLD
 995

	)

145 
	#MOTOR_STOP


	)

146 
	#MAXTHROTTLE
 2000

	)

148 
	#AP_MODE
 40

149 
	#GPS_SERIAL
 0

	)

150 
	#NMEA


	)

151 
	#USE_MSP_WP


152 

	)

153 #ñi‡
COPTERTEST
 == 11

155 
	#TESTBED


156 
	#SIMDEBUG


159 

	)

165 
	#AIRPLANE


	)

166 
	#SERIAL_SUM_PPM
 
ROLL
,
PITCH
,
THROTTLE
,
YAW
,
AUX1
,
AUX2
,
AUX3
,
AUX4
,8,9,10,11

167 
	#PPM_ON_THROTTLE


	)

168 
	#FAILSAFE


	)

169 
	#MOTOR_STOP


	)

170 
	#MAXTHROTTLE
 2000

	)

172 
	#INIT_MTK_GPS


	)

173 
	#CRIUS_AIO_PRO


	)

174 
	#GPS_SERIAL
 2

	)

175 
	#NMEA


	)

176 
	#GPS_BAUD
 115200

	)

177 
	#USE_MSP_WP


178 
	#AP_MODE
 40

179 
	#FAILSAFE


	)

180 
	#FAILSAFE_DETECT_TRESHOLD
 995

	)

183 #ñi‡
COPTERTEST
 == 99

185 
	#FLYING_WING


	)

187 
	#SERIAL_SUM_PPM
 
ROLL
,
PITCH
,
THROTTLE
,
YAW
,
AUX1
,
AUX2
,
AUX3
,
AUX4
,8,9,10,11

188 
	#PPM_ON_THROTTLE


	)

189 
	#FAILSAFE


	)

190 
	#MAXTHROTTLE
 2000

	)

202 
	#USE_MSP_WP


203 
	#AP_MODE
 40

204 
	#FAILSAFE


	)

205 
	#FAILSAFE_DETECT_TRESHOLD
 995

	)

206 
	#MOTOR_STOP


	)

209 #i‡
deföed
 (
FLYING_WING
)

210 
	#CRIUS_SE


	)

211 
	#GPS_SERIAL
 0

	)

212 
	#GPS_BAUD
 115200

	)

213 
	#NMEA


	)

214 
	#SERVO_MIN
 {1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020}

	)

215 
	#SERVO_MAX
 {2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000}

	)

216 
	#SERVO_MID
 {1500, 1500, 1500, 1412, 1445, 1500, 1572, 1500}

	)

217 
	#FORCE_SERVO_RATES
 {30, 30, 100, 0, 1, 100, 100, 100}

	)

220 #i‡
deföed
 (
AIRPLANE
)

222 
	#PATRIKE


	)

223 
	#MONGOOSE1_0


	)

224 
	#GPS_SERIAL
 0

	)

225 
	#GPS_BAUD
 115200

	)

231 
	#GPS_SERIAL
 0

	)

232 
	#GPS_BAUD
 115200

	)

233 
	#NMEA


	)

234 
	#FORCE_GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -X; imu.gyroADC[
PITCH
] = -Y; imu.gyroADC[
YAW
] = -Z;}

	)

235 
	#FORCE_ACC_ORIENTATION
(
Y
, 
X
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = Y; imu.accADC[
YAW
] = Z;}

	)

236 
	#FORCE_MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = Y; imu.magADC[
PITCH
] = -X; imu.magADC[
YAW
] = -Z;}

	)

238 
	#SERVO_MIN
 {1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020}

	)

239 
	#SERVO_MAX
 {2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000}

	)

240 
	#SERVO_MID
 {1500, 1500, 1500, 1592, 1549, 1500, 1572, 1500}

	)

241 
	#FORCE_SERVO_RATES
 {30, 30, 100, 89, 88, 100, 82, 100}

	)

244 #ñi‡
COPTERTEST
 == 100

245 
	#AIRPLANE


	)

246 
	#CRIUS_AIO_PRO


	)

247 
	#SERIAL_SUM_PPM
 
ROLL
,
PITCH
,
THROTTLE
,
YAW
,
AUX1
,
AUX2
,
AUX3
,
AUX4
,8,9,10,11

248 
	#PPM_ON_THROTTLE


	)

249 
	#FAILSAFE


	)

250 
	#MOTOR_STOP


	)

252 
	#GPS_SERIAL
 2

	)

253 
	#UBLOX


	)

254 
	#USE_MSP_WP


	)

256 
	#AIRSPEED
 15

	)

257 
	#AIRSPEED_PIN
 
A9


	)

259 #ñi‡
deföed
(
COPTERTEST
)

268 #i‡
deföed
(
__AVR_ATmega168__
Ë|| deföed(
__AVR_ATmega328P__
)

269 
	#PROMINI


	)

271 #i‡
deföed
(
__AVR_ATmega32U4__
Ë|| deföed(
TEENSY20
)

272 
	#PROMICRO


	)

274 #i‡
deföed
(
__AVR_ATmega1280__
Ë|| deföed(
__AVR_ATmega1281__
Ë|| deföed(
__AVR_ATmega2560__
Ë|| deföed(
__AVR_ATmega2561__
)

275 
	#MEGA


	)

284 #i‡
deföed
 (
AIRPLANE
Ë|| deföed(
FLYING_WING
Ë|| deföed(
QUADWING
)

285 
	#FIXEDWING


	)

286 #i‡
deföed
 (
GPS_SERIAL
Ë|| deföed(
I2C_GPS
)

287 
	~"GPS.h
"

292 
	#DONT_RESET_HOME_AT_ARM


	)

293 #unde‡
ONLYARMWHENFLAT


294 
	#SLIM_WING


	)

295 #i‡
deföed
(
FAILSAFE
)

296 
	#FAILSAFE_RTH
 1

	)

298 
	#FAILSAFE_RTH
 0

	)

303 #i‡
deföed
 (
STAY_IN_MISSION
)

304 
	#FAILSAFE_MISSION
 1

	)

306 
	#FAILSAFE_MISSION
 0

	)

309 #i‡
deföed
(
HELI_120_CCPM
Ë|| deföed(
HELI_90_DEG
)

310 
	#HELICOPTER


	)

313 #i‡
deföed
(
BI
Ë|| deföed(
TRI
Ë|| deföed(
FIXEDWING
Ë|| deföed(
HELICOPTER
Ë|| deföed(
SINGLECOPTER
)|| deföed(
DUALCOPTER
)

314 
	#COPTER_WITH_SERVO


	)

317 #i‡
deföed
(
COPTER_WITH_SERVO
Ë|| deföed(
SERVO_TILT
Ë|| deföed(
GIMBAL
Ë|| deföed(
CAMTRIG
Ë|| deföed(
SERVO_MIX_TILT
)

318 
	#SERVO


	)

321 #i‡
deföed
(
DYNBALANCE
)

322 
	#DYNBAL
 1

	)

324 
	#DYNBAL
 0

	)

326 #i‡
deföed
(
FLAPS
)

327 
	#FLAP
 1

	)

329 
	#FLAP
 0

	)

332 #i‡
deföed
(
MEGA
Ë&& deföed(
MEGA_HW_PWM_SERVOS
)

333 
	#TRI_SERVO
 4

	)

335 
	#TRI_SERVO
 6

	)

338 #i‡
deföed
(
GIMBAL
)

339 
	#NUMBER_MOTOR
 0

	)

340 
	#PRI_SERVO_FROM
 1

341 
	#PRI_SERVO_TO
 2

	)

342 #ñi‡
deföed
(
FLYING_WING
)

343 
	#PRI_SERVO_FROM
 4

	)

344 #i‡
deföed
 (
USE_THROTTLESERVO
)

345 
	#NUMBER_MOTOR
 0

	)

346 
	#PRI_SERVO_TO
 8

347 #ñ£

	)

348 
	#NUMBER_MOTOR
 1

	)

349 
	#PRI_SERVO_TO
 5

351 #ñi‡
	`deföed
(
QUADWING
)

	)

352 
	#PRI_SERVO_FROM
 1

353 
	#PRI_SERVO_TO
 5

	)

354 
	#NUMBER_MOTOR
 4

	)

355 #ñi‡
deföed
(
SINGLECOPTER
)

356 
	#NUMBER_MOTOR
 1

	)

357 
	#PRI_SERVO_FROM
 4

358 
	#PRI_SERVO_TO
 7

	)

359 #ñi‡
deföed
(
DUALCOPTER
)

360 
	#NUMBER_MOTOR
 2

	)

361 
	#PRI_SERVO_FROM
 5

362 
	#PRI_SERVO_TO
 6

	)

363 #ñi‡
deföed
(
AIRPLANE
)

364 #i‡
deföed
 (
USE_THROTTLESERVO
)

365 
	#NUMBER_MOTOR
 0

	)

366 
	#PRI_SERVO_TO
 8

	)

368 
	#NUMBER_MOTOR
 1

	)

369 
	#PRI_SERVO_TO
 7

	)

371 #i‡
deföed
(
FLAPS
)

372 
	#PRI_SERVO_FROM
 3

373 #unde‡
CAMTRIG


374 #ñ£

	)

375 
	#PRI_SERVO_FROM
 4

377 #ñi‡
	`deföed
(
BI
)

	)

378 
	#NUMBER_MOTOR
 2

	)

379 
	#PRI_SERVO_FROM
 5

380 
	#PRI_SERVO_TO
 6

	)

381 #ñi‡
deföed
(
TRI
)

382 
	#NUMBER_MOTOR
 3

	)

383 
	#PRI_SERVO_FROM
 
TRI_SERVO


384 
	#PRI_SERVO_TO
 
TRI_SERVO


	)

385 #ñi‡
deföed
(
QUADP
Ë|| deföed(
QUADX
Ë|| deföed(
Y4
)|| deföed(
VTAIL4
)

386 
	#NUMBER_MOTOR
 4

	)

387 #ñi‡
deföed
(
Y6
Ë|| deföed(
HEX6
Ë|| deföed(
HEX6X
Ë|| deföed(
HEX6H
)

388 
	#NUMBER_MOTOR
 6

	)

389 #ñi‡
deföed
(
OCTOX8
Ë|| deföed(
OCTOFLATP
Ë|| deföed(
OCTOFLATX
)

390 
	#NUMBER_MOTOR
 8

	)

391 #ñi‡
deföed
(
HELICOPTER
)

392 
	#PRI_SERVO_FROM
 4

	)

393 #ifde‡
HELI_USE_SERVO_FOR_THROTTLE


394 
	#NUMBER_MOTOR
 0

395 
	#PRI_SERVO_TO
 8

396 #ñ£

	)

397 
	#NUMBER_MOTOR
 1

398 
	#PRI_SERVO_TO
 7

401 

	)

402 #i‡(
deföed
(
SERVO_TILT
)|| deföed(
SERVO_MIX_TILT
))&& deföed(
CAMTRIG
)

403 
	#SEC_SERVO_FROM
 1

404 
	#SEC_SERVO_TO
 3

	)

406 #i‡
deföed
(
SERVO_TILT
)|| deföed(
SERVO_MIX_TILT
)

408 #i‡
deföed
(
A0_A1_PIN_HEX
Ë&& (
NUMBER_MOTOR
 =6Ë&& deföed(
PROMINI
)

409 
	#SEC_SERVO_FROM
 3

410 
	#SEC_SERVO_TO
 4

	)

412 
	#SEC_SERVO_FROM
 1

413 
	#SEC_SERVO_TO
 2

	)

416 #i‡
deföed
(
CAMTRIG
)

417 
	#SEC_SERVO_FROM
 3

418 
	#SEC_SERVO_TO
 3

	)

422 #i‡
deföed
(
SIRIUS_AIR
Ë|| deföed(
SIRIUS_AIR_GPS
)

423 
	#RCAUX2PIND17


	)

427 #i‡
deföed
(
PROMINI
)

428 #i‡!
deföed
(
MONGOOSE1_0
)

429 
	#LEDPIN_PINMODE
 
	`pöMode
 (13, 
OUTPUT
);

	)

430 
	#LEDPIN_TOGGLE
 
PINB
 |= 1<<5;

431 
	#LEDPIN_OFF
 
PORTB
 &~(1<<5);

	)

432 
	#LEDPIN_ON
 
PORTB
 |(1<<5);

	)

434 #i‡!
deföed
(
RCAUXPIN8
)

435 #i‡!
deföed
(
MONGOOSE1_0
)

436 
	#BUZZERPIN_PINMODE
 
	`pöMode
 (8, 
OUTPUT
);

	)

437 #i‡
NUMBER_MOTOR
 >4

438 #unde‡
PILOTLAMP


440 #i‡
deföed
 
PILOTLAMP
 && 
NUMBER_MOTOR
 <5

441 
	#PL_PIN_ON
 
PORTB
 |1;

	)

442 
	#PL_PIN_OFF
 
PORTB
 &~1;

	)

444 
	#BUZZERPIN_ON
 
PORTB
 |1;

	)

445 
	#BUZZERPIN_OFF
 
PORTB
 &~1;

	)

449 
	#BUZZERPIN_PINMODE
 ;

	)

450 
	#BUZZERPIN_ON
 ;

	)

451 
	#BUZZERPIN_OFF
 ;

	)

452 
	#RCAUXPIN


	)

454 #i‡!
deföed
(
RCAUXPIN12
Ë&& !deföed(
DISABLE_POWER_PIN
)

455 
	#POWERPIN_PINMODE
 
	`pöMode
 (12, 
OUTPUT
);

	)

456 
	#POWERPIN_ON
 
PORTB
 |1<<4;

	)

457 
	#POWERPIN_OFF
 
PORTB
 &= ~(1<<4);

458 #ñ£

	)

459 
	#POWERPIN_PINMODE
 ;

	)

460 
	#POWERPIN_ON
 ;

	)

461 
	#POWERPIN_OFF
 ;

	)

463 #i‡
deföed
(
RCAUXPIN12
)

464 
	#RCAUXPIN


	)

466 
	#I2C_PULLUPS_ENABLE
 
PORTC
 |= 1<<4; PORTC |= 1<<5;

467 
	#I2C_PULLUPS_DISABLE
 
PORTC
 &~(1<<4); PORTC &~(1<<5);

	)

468 #i‡!
deföed
(
MONGOOSE1_0
)

469 
	#PINMODE_LCD
 
	`pöMode
(0, 
OUTPUT
);

	)

470 
	#LCDPIN_OFF
 
PORTD
 &= ~1;

471 
	#LCDPIN_ON
 
PORTD
 |1;

	)

472 
	#STABLEPIN_PINMODE
 ;

	)

473 
	#STABLEPIN_ON
 ;

	)

474 
	#STABLEPIN_OFF
 ;

	)

476 
	#PPM_PIN_INTERRUPT
 
	`©èchI¡îru±
(0, 
rxI¡
, 
RISING
);

477 
	#RX_SERIAL_PORT
 0

	)

479 
	#THROTTLEPIN
 2

	)

480 
	#ROLLPIN
 4

	)

481 
	#PITCHPIN
 5

	)

482 
	#YAWPIN
 6

	)

483 
	#AUX1PIN
 7

	)

484 
	#AUX2PIN
 0

485 
	#AUX3PIN
 1

486 
	#AUX4PIN
 3

487 

	)

488 
	#PCINT_PIN_COUNT
 5

	)

489 
	#PCINT_RX_BITS
 (1<<2),(1<<4),(1<<5),(1<<6),(1<<7)

	)

490 
	#PCINT_RX_PORT
 
PORTD


	)

491 
	#PCINT_RX_MASK
 
PCMSK2


	)

492 
	#PCIR_PORT_BIT
 (1<<2)

	)

493 
	#RX_PC_INTERRUPT
 
PCINT2_ve˘


	)

494 
	#RX_PCINT_PIN_PORT
 
PIND


	)

495 
	#V_BATPIN
 
A3


496 
	#PSENSORPIN
 
A2


497 

	)

498 #i‡
deföed
(
A0_A1_PIN_HEX
Ë|| (
NUMBER_MOTOR
 > 6)

499 
	#SOFT_PWM_1_PIN_HIGH
 
PORTC
 |1<<0;

	)

500 
	#SOFT_PWM_1_PIN_LOW
 
PORTC
 &~(1<<0);

	)

501 
	#SOFT_PWM_2_PIN_HIGH
 
PORTC
 |1<<1;

	)

502 
	#SOFT_PWM_2_PIN_LOW
 
PORTC
 &~(1<<1);

	)

504 
	#SOFT_PWM_1_PIN_HIGH
 
PORTD
 |1<<5;

	)

505 
	#SOFT_PWM_1_PIN_LOW
 
PORTD
 &~(1<<5);

	)

506 
	#SOFT_PWM_2_PIN_HIGH
 
PORTD
 |1<<6;

	)

507 
	#SOFT_PWM_2_PIN_LOW
 
PORTD
 &~(1<<6);

	)

509 
	#SOFT_PWM_3_PIN_HIGH
 
PORTC
 |1<<2;

	)

510 
	#SOFT_PWM_3_PIN_LOW
 
PORTC
 &~(1<<2);

	)

511 
	#SOFT_PWM_4_PIN_HIGH
 
PORTB
 |1<<4;

	)

512 
	#SOFT_PWM_4_PIN_LOW
 
PORTB
 &~(1<<4);

	)

514 
	#SERVO_1_PINMODE
 
	`pöMode
(
A0
,
OUTPUT
);

515 
	#SERVO_1_PIN_HIGH
 
PORTC
 |1<<0;

	)

516 
	#SERVO_1_PIN_LOW
 
PORTC
 &~(1<<0);

	)

517 
	#SERVO_2_PINMODE
 
	`pöMode
(
A1
,
OUTPUT
);

518 
	#SERVO_2_PIN_HIGH
 
PORTC
 |1<<1;

	)

519 
	#SERVO_2_PIN_LOW
 
PORTC
 &~(1<<1);

	)

520 
	#SERVO_3_PINMODE
 
	`pöMode
(
A2
,
OUTPUT
);

521 
	#SERVO_3_PIN_HIGH
 
PORTC
 |1<<2;

	)

522 
	#SERVO_3_PIN_LOW
 
PORTC
 &~(1<<2);

	)

523 #i‡!
deföed
(
MONGOOSE1_0
)

524 
	#SERVO_4_PINMODE
 
	`pöMode
(12,
OUTPUT
);

525 
	#SERVO_4_PIN_HIGH
 
PORTB
 |1<<4;

	)

526 
	#SERVO_4_PIN_LOW
 
PORTB
 &~(1<<4);

	)

528 
	#SERVO_5_PINMODE
 
	`pöMode
(11,
OUTPUT
);

529 
	#SERVO_5_PIN_HIGH
 
PORTB
 |1<<3;

	)

530 
	#SERVO_5_PIN_LOW
 
PORTB
 &~(1<<3);

	)

531 
	#SERVO_6_PINMODE
 
	`pöMode
(3,
OUTPUT
);

532 
	#SERVO_6_PIN_HIGH
 
PORTD
|1<<3;

	)

533 
	#SERVO_6_PIN_LOW
 
PORTD
 &~(1<<3);

	)

534 
	#SERVO_7_PINMODE
 
	`pöMode
(10,
OUTPUT
);

535 
	#SERVO_7_PIN_HIGH
 
PORTB
 |1<<2;

	)

536 
	#SERVO_7_PIN_LOW
 
PORTB
 &~(1<<2);

	)

537 
	#SERVO_8_PINMODE
 
	`pöMode
(9,
OUTPUT
);

538 
	#SERVO_8_PIN_HIGH
 
PORTB
 |1<<1;

	)

539 
	#SERVO_8_PIN_LOW
 
PORTB
 &~(1<<1);

	)

543 #i‡
deföed
(
PROMICRO
)

544 #i‡
deföed
(
MICROWII
)

545 
	#A32U4ALLPINS


	)

547 #i‡!
deföed
(
TEENSY20
)

548 
	#LEDPIN_PINMODE


549 
	#LEDPIN_TOGGLE
 
PIND
 |= 1<<5;

550 #i‡!
	`deföed
(
PROMICRO10
)

	)

551 
	#LEDPIN_OFF
 
PORTD
 |(1<<5);

	)

552 
	#LEDPIN_ON
 
PORTD
 &~(1<<5);

	)

554 
	#LEDPIN_OFF
 
PORTD
 &~(1<<5);

	)

555 
	#LEDPIN_ON
 
PORTD
 |(1<<5);

	)

558 
	#LEDPIN_PINMODE
 
DDRD
 |(1<<6);

	)

559 
	#LEDPIN_OFF
 
PORTD
 &~(1<<6);

	)

560 
	#LEDPIN_ON
 
PORTD
 |(1<<6);

	)

561 
	#LEDPIN_TOGGLE
 
PIND
 |= 1<<6;

563 #i‡
	`deföed
(
D8BUZZER
)

	)

564 
	#BUZZERPIN_PINMODE
 
DDRB
 |(1<<4);

	)

565 #i‡
deföed
 
PILOTLAMP


566 
	#PL_PIN_ON
 
PORTB
 |1<<4;

	)

567 
	#PL_PIN_OFF
 
PORTB
 &~(1<<4);

	)

569 
	#BUZZERPIN_ON
 
PORTB
 |1<<4;

	)

570 
	#BUZZERPIN_OFF
 
PORTB
 &~(1<<4);

	)

573 #ñi‡
deföed
(
A32U4ALLPINS
)

574 
	#BUZZERPIN_PINMODE
 
DDRD
 |(1<<4);

	)

575 #i‡
deföed
 
PILOTLAMP


576 
	#PL_PIN_ON
 
PORTD
 |1<<4;

	)

577 
	#PL_PIN_OFF
 
PORTD
 &~(1<<4);

	)

579 
	#BUZZERPIN_ON
 
PORTD
 |1<<4;

	)

580 
	#BUZZERPIN_OFF
 
PORTD
 &~(1<<4);

	)

583 
	#BUZZERPIN_PINMODE
 
DDRD
 |(1<<3);

	)

584 #i‡
deföed
 
PILOTLAMP


585 
	#PL_PIN_ON
 
PORTD
 |1<<3;

	)

586 
	#PL_PIN_OFF
 
PORTD
 &~(1<<3);

	)

588 
	#BUZZERPIN_ON
 
PORTD
 |1<<3;

	)

589 
	#BUZZERPIN_OFF
 
PORTD
 &~(1<<3);

	)

592 
	#POWERPIN_PINMODE


593 
	#POWERPIN_ON


594 
	#POWERPIN_OFF


595 
	#I2C_PULLUPS_ENABLE
 
PORTD
 |= 1<<0; PORTD |= 1<<1;

596 
	#I2C_PULLUPS_DISABLE
 
PORTD
 &~(1<<0); PORTD &~(1<<1);

	)

597 
	#PINMODE_LCD
 
DDRD
 |(1<<2);

	)

598 
	#LCDPIN_OFF
 
PORTD
 &~1;

	)

599 
	#LCDPIN_ON
 
PORTD
 |1;

	)

600 
	#STABLEPIN_PINMODE
 ;

	)

601 
	#STABLEPIN_ON
 ;

	)

602 
	#STABLEPIN_OFF
 ;

	)

603 
	#PPM_PIN_INTERRUPT
 
DDRE
 &~(1 << 6);
PORTE
 |(1 << 6); 
EICRB
 |(1 << 
ISC61
)|(1 << 
ISC60
); 
EIMSK
 |(1 << 
INT6
);

	)

604 #i‡!
deföed
(
RX_SERIAL_PORT
)

605 
	#RX_SERIAL_PORT
 1

	)

607 
	#USB_CDC_TX
 3

	)

608 
	#USB_CDC_RX
 2

	)

611 
	#SOFT_PWM_1_PIN_HIGH
 
PORTD
 |1<<4;

	)

612 
	#SOFT_PWM_1_PIN_LOW
 
PORTD
 &~(1<<4);

	)

613 
	#SOFT_PWM_2_PIN_HIGH
 
PORTF
 |1<<5;

	)

614 
	#SOFT_PWM_2_PIN_LOW
 
PORTF
 &~(1<<5);

	)

615 #i‡!
deföed
(
A32U4ALLPINS
)

616 
	#SOFT_PWM_3_PIN_HIGH
 
PORTF
 |1<<7;

	)

617 
	#SOFT_PWM_3_PIN_LOW
 
PORTF
 &~(1<<7);

	)

618 
	#SOFT_PWM_4_PIN_HIGH
 
PORTF
 |1<<6;

	)

619 
	#SOFT_PWM_4_PIN_LOW
 
PORTF
 &~(1<<6);

	)

620 
	#SW_PWM_P3
 
A1


	)

621 
	#SW_PWM_P4
 
A0


	)

623 
	#SOFT_PWM_3_PIN_HIGH
 
PORTF
 |1<<4;

	)

624 
	#SOFT_PWM_3_PIN_LOW
 
PORTF
 &~(1<<4);

	)

625 
	#SOFT_PWM_4_PIN_HIGH
 
PORTF
 |1<<5;

	)

626 
	#SOFT_PWM_4_PIN_LOW
 
PORTF
 &~(1<<5);

	)

627 
	#SW_PWM_P3
 
A2


	)

628 
	#SW_PWM_P4
 
A3


	)

632 
	#SERVO_1_PINMODE
 
DDRF
 |= (1<<7);

633 
	#SERVO_1_PIN_HIGH
 
PORTF
|1<<7;

	)

634 
	#SERVO_1_PIN_LOW
 
PORTF
 &~(1<<7);

	)

635 
	#SERVO_2_PINMODE
 
DDRF
 |= (1<<6);

636 
	#SERVO_2_PIN_HIGH
 
PORTF
 |1<<6;

	)

637 
	#SERVO_2_PIN_LOW
 
PORTF
 &~(1<<6);

	)

638 
	#SERVO_3_PINMODE
 
DDRF
 |= (1<<5);

639 
	#SERVO_3_PIN_HIGH
 
PORTF
 |1<<5;

	)

640 
	#SERVO_3_PIN_LOW
 
PORTF
 &~(1<<5);

	)

641 #i‡!
deföed
(
A32U4ALLPINS
)

642 
	#SERVO_4_PINMODE
 
DDRD
 |= (1<<4);

643 
	#SERVO_4_PIN_HIGH
 
PORTD
 |1<<4;

	)

644 
	#SERVO_4_PIN_LOW
 
PORTD
 &~(1<<4);

	)

646 
	#SERVO_4_PINMODE
 
DDRF
 |= (1<<4);

647 
	#SERVO_4_PIN_HIGH
 
PORTF
 |1<<4;

	)

648 
	#SERVO_4_PIN_LOW
 
PORTF
 &~(1<<4);

	)

650 
	#SERVO_5_PINMODE
 
DDRC
 |= (1<<6);

651 
	#SERVO_5_PIN_HIGH
 
PORTC
|1<<6;

	)

652 
	#SERVO_5_PIN_LOW
 
PORTC
 &~(1<<6);

	)

653 
	#SERVO_6_PINMODE
 
DDRD
 |= (1<<7);

654 
	#SERVO_6_PIN_HIGH
 
PORTD
 |1<<7;

	)

655 
	#SERVO_6_PIN_LOW
 
PORTD
 &~(1<<7);

	)

656 
	#SERVO_7_PINMODE
 
DDRB
 |= (1<<6);

657 
	#SERVO_7_PIN_HIGH
 
PORTB
 |1<<6;

	)

658 
	#SERVO_7_PIN_LOW
 
PORTB
 &~(1<<6);

	)

659 
	#SERVO_8_PINMODE
 
DDRB
 |= (1<<5);

660 
	#SERVO_8_PIN_HIGH
 
PORTB
 |1<<5;

	)

661 
	#SERVO_8_PIN_LOW
 
PORTB
 &~(1<<5);

	)

664 
	#THROTTLEPIN
 3

	)

665 #i‡
deföed
(
A32U4ALLPINS
)

666 
	#ROLLPIN
 6

	)

667 
	#PITCHPIN
 2

	)

668 
	#YAWPIN
 4

	)

669 
	#AUX1PIN
 5

	)

671 
	#ROLLPIN
 4

	)

672 
	#PITCHPIN
 5

	)

673 
	#YAWPIN
 2

	)

674 
	#AUX1PIN
 6

	)

676 
	#AUX2PIN
 7

	)

677 
	#AUX3PIN
 1

678 
	#AUX4PIN
 0

679 #i‡!
	`deföed
(
RCAUX2PIND17
)

	)

680 
	#PCINT_PIN_COUNT
 4

	)

681 
	#PCINT_RX_BITS
 (1<<1),(1<<2),(1<<3),(1<<4)

	)

683 
	#PCINT_PIN_COUNT
 5

684 
	#PCINT_RX_BITS
 (1<<1),(1<<2),(1<<3),(1<<4),(1<<0)

	)

686 
	#PCINT_RX_PORT
 
PORTB


	)

687 
	#PCINT_RX_MASK
 
PCMSK0


	)

688 
	#PCIR_PORT_BIT
 (1<<0)

	)

689 
	#RX_PC_INTERRUPT
 
PCINT0_ve˘


	)

690 
	#RX_PCINT_PIN_PORT
 
PINB


	)

692 #i‡!
deföed
(
A32U4ALLPINS
Ë&& !deföed(
TEENSY20
)

693 
	#V_BATPIN
 
A3


694 #ñi‡
	`deföed
(
A32U4ALLPINS
)

	)

695 
	#V_BATPIN
 
A4


696 #ñ£

	)

697 
	#V_BATPIN
 
A2


699 #i‡!
	`deföed
(
TEENSY20
)

	)

700 
	#PSENSORPIN
 
A2


701 #ñ£

	)

702 
	#PSENSORPIN
 
A2


705 

	)

707 #i‡
deföed
(
MEGA
)

708 
	#LEDPIN_PINMODE
 
	`pöMode
 (13, 
OUTPUT
);pöModê(30, OUTPUT);

	)

709 
	#LEDPIN_TOGGLE
 
PINB
 |(1<<7); 
PINC
 |(1<<7);

	)

710 
	#LEDPIN_ON
 
PORTB
 |(1<<7); 
PORTC
 |(1<<7);

	)

711 
	#LEDPIN_OFF
 
PORTB
 &~(1<<7);
PORTC
 &~(1<<7);

	)

712 
	#BUZZERPIN_PINMODE
 
	`pöMode
 (32, 
OUTPUT
);

	)

713 #i‡
deföed
 
PILOTLAMP


714 
	#PL_PIN_ON
 
PORTC
 |1<<5;

	)

715 
	#PL_PIN_OFF
 
PORTC
 &~(1<<5);

	)

717 
	#BUZZERPIN_ON
 
PORTC
 |1<<5;

	)

718 
	#BUZZERPIN_OFF
 
PORTC
 &~(1<<5);

	)

721 #i‡!
deföed
(
DISABLE_POWER_PIN
)

722 
	#POWERPIN_PINMODE
 
	`pöMode
 (37, 
OUTPUT
);

	)

723 
	#POWERPIN_ON
 
PORTC
 |1<<0;

	)

724 
	#POWERPIN_OFF
 
PORTC
 &~(1<<0);

	)

726 
	#POWERPIN_PINMODE
 ;

	)

727 
	#POWERPIN_ON
 ;

	)

728 
	#POWERPIN_OFF
 ;

	)

730 
	#I2C_PULLUPS_ENABLE
 
PORTD
 |= 1<<0; PORTD |= 1<<1;

731 
	#I2C_PULLUPS_DISABLE
 
PORTD
 &~(1<<0); PORTD &~(1<<1);

	)

732 
	#PINMODE_LCD
 
	`pöMode
(0, 
OUTPUT
);

	)

733 
	#LCDPIN_OFF
 
PORTE
 &= ~1;

734 
	#LCDPIN_ON
 
PORTE
 |1;

	)

735 
	#STABLEPIN_PINMODE
 
	`pöMode
 (31, 
OUTPUT
);

	)

736 
	#STABLEPIN_ON
 
PORTC
 |1<<6;

	)

737 
	#STABLEPIN_OFF
 
PORTC
 &~(1<<6);

	)

738 #i‡
deföed
(
PPM_ON_THROTTLE
)

740 
	#PPM_PIN_INTERRUPT
 
DDRK
 &~(1<<0); 
PORTK
 |(1<<0); 
PCICR
 |(1<<2); 
PCMSK2
 |(1<<0);

	)

742 
	#PPM_PIN_INTERRUPT
 
	`©èchI¡îru±
(4, 
rxI¡
, 
RISING
);

744 #i‡!
	`deföed
(
RX_SERIAL_PORT
)

	)

745 
	#RX_SERIAL_PORT
 1

	)

748 
	#THROTTLEPIN
 0

749 
	#ROLLPIN
 1

750 
	#PITCHPIN
 2

751 
	#YAWPIN
 3

752 
	#AUX1PIN
 4

753 
	#AUX2PIN
 5

754 
	#AUX3PIN
 6

755 
	#AUX4PIN
 7

756 
	#V_BATPIN
 
A0


757 
	#PSENSORPIN
 
A2


758 
	#PCINT_PIN_COUNT
 8

	)

759 
	#PCINT_RX_BITS
 (1<<2),(1<<4),(1<<5),(1<<6),(1<<7),(1<<0),(1<<1),(1<<3)

	)

760 
	#PCINT_RX_PORT
 
PORTK


	)

761 
	#PCINT_RX_MASK
 
PCMSK2


	)

762 
	#PCIR_PORT_BIT
 (1<<2)

	)

763 
	#RX_PC_INTERRUPT
 
PCINT2_ve˘


	)

764 
	#RX_PCINT_PIN_PORT
 
PINK


	)

766 
	#SERVO_1_PINMODE
 
	`pöMode
(34,
OUTPUT
);pinMode(44,OUTPUT);

767 
	#SERVO_1_PIN_HIGH
 
PORTC
 |1<<3;
PORTL
 |1<<5;

	)

768 
	#SERVO_1_PIN_LOW
 
PORTC
 &~(1<<3);
PORTL
 &~(1<<5);

	)

769 
	#SERVO_2_PINMODE
 
	`pöMode
(35,
OUTPUT
);pinMode(45,OUTPUT);

770 
	#SERVO_2_PIN_HIGH
 
PORTC
 |1<<2;
PORTL
 |1<<4;

	)

771 
	#SERVO_2_PIN_LOW
 
PORTC
 &~(1<<2);
PORTL
 &~(1<<4);

	)

772 
	#SERVO_3_PINMODE
 
	`pöMode
(33,
OUTPUT
);ÖinMode(46,OUTPUT);

773 
	#SERVO_3_PIN_HIGH
 
PORTC
 |1<<4;
PORTL
 |1<<3;

	)

774 
	#SERVO_3_PIN_LOW
 
PORTC
 &~(1<<4);
PORTL
 &~(1<<3);

	)

775 
	#SERVO_4_PINMODE
 
	`pöMode
 (37, 
OUTPUT
);pinMode(7,OUTPUT);

776 
	#SERVO_4_PIN_HIGH
 
PORTC
 |1<<0; 
PORTH
 |1<<4;

	)

777 
	#SERVO_4_PIN_LOW
 
PORTC
 &~(1<<0);
PORTH
 &~(1<<4);

	)

779 
	#SERVO_5_PINMODE
 
	`pöMode
(6,
OUTPUT
);

780 
	#SERVO_5_PIN_HIGH
 
PORTH
 |1<<3;

	)

781 
	#SERVO_5_PIN_LOW
 
PORTH
 &~(1<<3);

	)

782 
	#SERVO_6_PINMODE
 
	`pöMode
(2,
OUTPUT
);

783 
	#SERVO_6_PIN_HIGH
 
PORTE
 |1<<4;

	)

784 
	#SERVO_6_PIN_LOW
 
PORTE
 &~(1<<4);

	)

785 
	#SERVO_7_PINMODE
 
	`pöMode
(5,
OUTPUT
);

786 
	#SERVO_7_PIN_HIGH
 
PORTE
 |1<<3;

	)

787 
	#SERVO_7_PIN_LOW
 
PORTE
 &~(1<<3);

	)

788 
	#SERVO_8_PINMODE
 
	`pöMode
(3,
OUTPUT
);

789 
	#SERVO_8_PIN_HIGH
 
PORTE
 |1<<5;

	)

790 
	#SERVO_8_PIN_LOW
 
PORTE
 &~(1<<5);

	)

797 #i‡
deföed
(
MONGOOSE1_0
)

800 
	#LEDPIN_PINMODE
 
	`pöMode
 (4, 
OUTPUT
);

	)

801 
	#LEDPIN_TOGGLE
 
PIND
 |= 1<<4;

802 
	#LEDPIN_OFF
 
PORTD
 &~(1<<4);

	)

803 
	#LEDPIN_ON
 
PORTD
 |(1<<4);

	)

804 
	#SPEK_BAUD_SET
 
UCSR0A
 = (1<<
U2X0
); 
UBRR0H
 = ((
F_CPU
 / 4 / 115200 -1Ë/ 2Ë>> 8; 
UBRR0L
 = ((F_CPU / 4 / 115200 -1Ë/ 2);

	)

805 
	#RX_SERIAL_PORT
 0

	)

808 
	#BUZZERPIN_PINMODE
 ;

809 
	#BUZZERPIN_ON
 ;

	)

810 
	#BUZZERPIN_OFF
 ;

	)

811 
	#POWERPIN_PINMODE
 ;

812 
	#POWERPIN_ON
 ;

	)

813 
	#POWERPIN_OFF
 ;

	)

814 
	#STABLEPIN_PINMODE
 ;

815 
	#STABLEPIN_ON
 ;

	)

816 
	#STABLEPIN_OFF
 ;

	)

817 
	#PINMODE_LCD
 ;

818 
	#LCDPIN_OFF
 ;

	)

819 
	#LCDPIN_ON
 ;

	)

822 
	#SERVO_4_PINMODE
 ;

823 
	#SERVO_4_PIN_HIGH
 ;

	)

824 
	#SERVO_4_PIN_LOW
 ;

	)

831 #i‡(
PRI_SERVO_FROM
 =1Ë|| (
SEC_SERVO_FROM
 == 1)

832 
	#LAST_LOW
 
SERVO_1_PIN_LOW


	)

833 
	#SERVO_1_HIGH
 
SERVO_1_PIN_HIGH


	)

834 
	#SERVO_1_LOW
 
SERVO_1_PIN_LOW


	)

835 
	#SERVO_1_ARR_POS
 0

	)

837 #i‡(
PRI_SERVO_FROM
 <2 && 
PRI_SERVO_TO
 >2Ë|| (
SEC_SERVO_FROM
 <2 && 
SEC_SERVO_TO
 >= 2)

838 #unde‡
LAST_LOW


839 
	#LAST_LOW
 
SERVO_2_PIN_LOW


	)

840 #i‡!
deföed
(
SERVO_1_HIGH
)

841 
	#SERVO_1_HIGH
 
SERVO_2_PIN_HIGH


	)

842 
	#SERVO_1_LOW
 
SERVO_2_PIN_LOW


	)

843 
	#SERVO_1_ARR_POS
 1

	)

845 
	#SERVO_2_HIGH
 
SERVO_2_PIN_HIGH


	)

846 
	#SERVO_2_LOW
 
SERVO_2_PIN_LOW


	)

847 
	#SERVO_2_ARR_POS
 1

	)

850 #i‡(
PRI_SERVO_FROM
 <3 && 
PRI_SERVO_TO
 >3Ë|| (
SEC_SERVO_FROM
 <3 && 
SEC_SERVO_TO
 >= 3)

851 #unde‡
LAST_LOW


852 
	#LAST_LOW
 
SERVO_3_PIN_LOW


	)

853 #i‡!
deföed
(
SERVO_1_HIGH
)

854 
	#SERVO_1_HIGH
 
SERVO_3_PIN_HIGH


	)

855 
	#SERVO_1_LOW
 
SERVO_3_PIN_LOW


	)

856 
	#SERVO_1_ARR_POS
 2

	)

857 #ñi‡!
deföed
(
SERVO_2_HIGH
)

858 
	#SERVO_2_HIGH
 
SERVO_3_PIN_HIGH


	)

859 
	#SERVO_2_LOW
 
SERVO_3_PIN_LOW


	)

860 
	#SERVO_2_ARR_POS
 2

	)

862 
	#SERVO_3_HIGH
 
SERVO_3_PIN_HIGH


	)

863 
	#SERVO_3_LOW
 
SERVO_3_PIN_LOW


	)

864 
	#SERVO_3_ARR_POS
 2

	)

867 #i‡(
PRI_SERVO_FROM
 <4 && 
PRI_SERVO_TO
 >4Ë|| (
SEC_SERVO_FROM
 <4 && 
SEC_SERVO_TO
 >= 4)

868 #unde‡
LAST_LOW


869 
	#LAST_LOW
 
SERVO_4_PIN_LOW


	)

870 #i‡!
deföed
(
SERVO_1_HIGH
)

871 
	#SERVO_1_HIGH
 
SERVO_4_PIN_HIGH


	)

872 
	#SERVO_1_LOW
 
SERVO_4_PIN_LOW


	)

873 
	#SERVO_1_ARR_POS
 3

	)

874 #ñi‡!
deföed
(
SERVO_2_HIGH
)

875 
	#SERVO_2_HIGH
 
SERVO_4_PIN_HIGH


	)

876 
	#SERVO_2_LOW
 
SERVO_4_PIN_LOW


	)

877 
	#SERVO_2_ARR_POS
 3

	)

878 #ñi‡!
deföed
(
SERVO_3_HIGH
)

879 
	#SERVO_3_HIGH
 
SERVO_4_PIN_HIGH


	)

880 
	#SERVO_3_LOW
 
SERVO_4_PIN_LOW


	)

881 
	#SERVO_3_ARR_POS
 3

	)

883 
	#SERVO_4_HIGH
 
SERVO_4_PIN_HIGH


	)

884 
	#SERVO_4_LOW
 
SERVO_4_PIN_LOW


	)

885 
	#SERVO_4_ARR_POS
 3

	)

888 #i‡(
PRI_SERVO_FROM
 <5 && 
PRI_SERVO_TO
 >5Ë|| (
SEC_SERVO_FROM
 <5 && 
SEC_SERVO_TO
 >= 5)

889 #unde‡
LAST_LOW


890 
	#LAST_LOW
 
SERVO_5_PIN_LOW


	)

891 #i‡!
deföed
(
SERVO_1_HIGH
)

892 
	#SERVO_1_HIGH
 
SERVO_5_PIN_HIGH


	)

893 
	#SERVO_1_LOW
 
SERVO_5_PIN_LOW


	)

894 
	#SERVO_1_ARR_POS
 4

	)

895 #ñi‡!
deföed
(
SERVO_2_HIGH
)

896 
	#SERVO_2_HIGH
 
SERVO_5_PIN_HIGH


	)

897 
	#SERVO_2_LOW
 
SERVO_5_PIN_LOW


	)

898 
	#SERVO_2_ARR_POS
 4

	)

899 #ñi‡!
deföed
(
SERVO_3_HIGH
)

900 
	#SERVO_3_HIGH
 
SERVO_5_PIN_HIGH


	)

901 
	#SERVO_3_LOW
 
SERVO_5_PIN_LOW


	)

902 
	#SERVO_3_ARR_POS
 4

	)

903 #ñi‡!
deföed
(
SERVO_4_HIGH
)

904 
	#SERVO_4_HIGH
 
SERVO_5_PIN_HIGH


	)

905 
	#SERVO_4_LOW
 
SERVO_5_PIN_LOW


	)

906 
	#SERVO_4_ARR_POS
 4

	)

908 
	#SERVO_5_HIGH
 
SERVO_5_PIN_HIGH


	)

909 
	#SERVO_5_LOW
 
SERVO_5_PIN_LOW


	)

910 
	#SERVO_5_ARR_POS
 4

	)

913 #i‡(
PRI_SERVO_FROM
 <6 && 
PRI_SERVO_TO
 >6Ë|| (
SEC_SERVO_FROM
 <6 && 
SEC_SERVO_TO
 >= 6)

914 #unde‡
LAST_LOW


915 
	#LAST_LOW
 
SERVO_6_PIN_LOW


	)

916 #i‡!
deföed
(
SERVO_1_HIGH
)

917 
	#SERVO_1_HIGH
 
SERVO_6_PIN_HIGH


	)

918 
	#SERVO_1_LOW
 
SERVO_6_PIN_LOW


	)

919 
	#SERVO_1_ARR_POS
 5

	)

920 #ñi‡!
deföed
(
SERVO_2_HIGH
)

921 
	#SERVO_2_HIGH
 
SERVO_6_PIN_HIGH


	)

922 
	#SERVO_2_LOW
 
SERVO_6_PIN_LOW


	)

923 
	#SERVO_2_ARR_POS
 5

	)

924 #ñi‡!
deföed
(
SERVO_3_HIGH
)

925 
	#SERVO_3_HIGH
 
SERVO_6_PIN_HIGH


	)

926 
	#SERVO_3_LOW
 
SERVO_6_PIN_LOW


	)

927 
	#SERVO_3_ARR_POS
 5

	)

928 #ñi‡!
deföed
(
SERVO_4_HIGH
)

929 
	#SERVO_4_HIGH
 
SERVO_6_PIN_HIGH


	)

930 
	#SERVO_4_LOW
 
SERVO_6_PIN_LOW


	)

931 
	#SERVO_4_ARR_POS
 5

	)

932 #ñi‡!
deföed
(
SERVO_5_HIGH
)

933 
	#SERVO_5_HIGH
 
SERVO_6_PIN_HIGH


	)

934 
	#SERVO_5_LOW
 
SERVO_6_PIN_LOW


	)

935 
	#SERVO_5_ARR_POS
 5

	)

937 
	#SERVO_6_HIGH
 
SERVO_6_PIN_HIGH


	)

938 
	#SERVO_6_LOW
 
SERVO_6_PIN_LOW


	)

939 
	#SERVO_6_ARR_POS
 5

	)

942 #i‡(
PRI_SERVO_FROM
 <7 && 
PRI_SERVO_TO
 >7Ë|| (
SEC_SERVO_FROM
 <7 && 
SEC_SERVO_TO
 >= 7)

943 #unde‡
LAST_LOW


944 
	#LAST_LOW
 
SERVO_7_PIN_LOW


	)

945 #i‡!
deföed
(
SERVO_1_HIGH
)

946 
	#SERVO_1_HIGH
 
SERVO_7_PIN_HIGH


	)

947 
	#SERVO_1_LOW
 
SERVO_7_PIN_LOW


	)

948 
	#SERVO_1_ARR_POS
 6

	)

949 #ñi‡!
deföed
(
SERVO_2_HIGH
)

950 
	#SERVO_2_HIGH
 
SERVO_7_PIN_HIGH


	)

951 
	#SERVO_2_LOW
 
SERVO_7_PIN_LOW


	)

952 
	#SERVO_2_ARR_POS
 6

	)

953 #ñi‡!
deföed
(
SERVO_3_HIGH
)

954 
	#SERVO_3_HIGH
 
SERVO_7_PIN_HIGH


	)

955 
	#SERVO_3_LOW
 
SERVO_7_PIN_LOW


	)

956 
	#SERVO_3_ARR_POS
 6

	)

957 #ñi‡!
deföed
(
SERVO_4_HIGH
)

958 
	#SERVO_4_HIGH
 
SERVO_7_PIN_HIGH


	)

959 
	#SERVO_4_LOW
 
SERVO_7_PIN_LOW


	)

960 
	#SERVO_4_ARR_POS
 6

	)

961 #ñi‡!
deföed
(
SERVO_5_HIGH
)

962 
	#SERVO_5_HIGH
 
SERVO_7_PIN_HIGH


	)

963 
	#SERVO_5_LOW
 
SERVO_7_PIN_LOW


	)

964 
	#SERVO_5_ARR_POS
 6

	)

965 #ñi‡!
deföed
(
SERVO_6_HIGH
)

966 
	#SERVO_6_HIGH
 
SERVO_7_PIN_HIGH


	)

967 
	#SERVO_6_LOW
 
SERVO_7_PIN_LOW


	)

968 
	#SERVO_6_ARR_POS
 6

	)

970 
	#SERVO_7_HIGH
 
SERVO_7_PIN_HIGH


	)

971 
	#SERVO_7_LOW
 
SERVO_7_PIN_LOW


	)

972 
	#SERVO_7_ARR_POS
 6

	)

975 #i‡(
PRI_SERVO_FROM
 <8 && 
PRI_SERVO_TO
 >8Ë|| (
SEC_SERVO_FROM
 <8 && 
SEC_SERVO_TO
 >= 8)

976 #unde‡
LAST_LOW


977 
	#LAST_LOW
 
SERVO_8_PIN_LOW


	)

978 #i‡!
deföed
(
SERVO_1_HIGH
)

979 
	#SERVO_1_HIGH
 
SERVO_8_PIN_HIGH


	)

980 
	#SERVO_1_LOW
 
SERVO_8_PIN_LOW


	)

981 
	#SERVO_1_ARR_POS
 7

	)

982 #ñi‡!
deföed
(
SERVO_2_HIGH
)

983 
	#SERVO_2_HIGH
 
SERVO_8_PIN_HIGH


	)

984 
	#SERVO_2_LOW
 
SERVO_8_PIN_LOW


	)

985 
	#SERVO_2_ARR_POS
 7

	)

986 #ñi‡!
deföed
(
SERVO_3_HIGH
)

987 
	#SERVO_3_HIGH
 
SERVO_8_PIN_HIGH


	)

988 
	#SERVO_3_LOW
 
SERVO_8_PIN_LOW


	)

989 
	#SERVO_3_ARR_POS
 7

	)

990 #ñi‡!
deföed
(
SERVO_4_HIGH
)

991 
	#SERVO_4_HIGH
 
SERVO_8_PIN_HIGH


	)

992 
	#SERVO_4_LOW
 
SERVO_8_PIN_LOW


	)

993 
	#SERVO_4_ARR_POS
 7

	)

994 #ñi‡!
deföed
(
SERVO_5_HIGH
)

995 
	#SERVO_5_HIGH
 
SERVO_8_PIN_HIGH


	)

996 
	#SERVO_5_LOW
 
SERVO_8_PIN_LOW


	)

997 
	#SERVO_5_ARR_POS
 7

	)

998 #ñi‡!
deföed
(
SERVO_6_HIGH
)

999 
	#SERVO_6_HIGH
 
SERVO_8_PIN_HIGH


	)

1000 
	#SERVO_6_LOW
 
SERVO_8_PIN_LOW


	)

1001 
	#SERVO_6_ARR_POS
 7

	)

1002 #ñi‡!
deföed
(
SERVO_7_HIGH
)

1003 
	#SERVO_7_HIGH
 
SERVO_8_PIN_HIGH


	)

1004 
	#SERVO_7_LOW
 
SERVO_8_PIN_LOW


	)

1005 
	#SERVO_7_ARR_POS
 7

	)

1007 
	#SERVO_8_HIGH
 
SERVO_8_PIN_HIGH


	)

1008 
	#SERVO_8_LOW
 
SERVO_8_PIN_LOW


	)

1009 
	#SERVO_8_ARR_POS
 7

	)

1013 #i‡–
deföed
(
MEGA
Ë&& deföed(
MEGA_HW_PWM_SERVOS
ËË|| (deföed(
PROMICRO
Ë&& deföed(
A32U4_4_HW_PWM_SERVOS
))

1014 #unde‡
SERVO_1_HIGH


1015 
	#HW_PWM_SERVOS


	)

1018 #i‡
deföed
(
MWI_SDCARD
)

1019 
	#LOGFILE_GPS
 1

	)

1020 
	#LOGFILE_PERM
 1

	)

1029 #i‡
deföed
(
FFIMUv1
)

1030 
	#ITG3200


	)

1031 
	#BMA180


	)

1032 
	#BMP085


	)

1033 
	#HMC5843


	)

1034 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1035 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1036 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1039 #i‡
deföed
(
FFIMUv2
)

1040 
	#ITG3200


	)

1041 
	#BMA180


	)

1042 
	#BMP085


	)

1043 
	#HMC5883


	)

1044 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1045 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1046 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = Y; imu.magADC[
PITCH
] = -X; imu.magADC[
YAW
] = -Z;}

	)

1049 #i‡
deföed
(
FREEIMUv1
)

1050 
	#ITG3200


	)

1051 
	#ADXL345


	)

1052 
	#HMC5843


	)

1053 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1054 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1055 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1056 
	#ADXL345_ADDRESS
 0x53

	)

1057 #unde‡
INTERNAL_I2C_PULLUPS


1060 #i‡
deföed
(
FREEIMUv03
)

1061 
	#ITG3200


	)

1062 
	#ADXL345


1063 
	#HMC5883


	)

1064 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1065 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1066 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1067 
	#ADXL345_ADDRESS
 0x53

	)

1068 #unde‡
INTERNAL_I2C_PULLUPS


1071 #i‡
deföed
(
FREEIMUv035
Ë|| deföed(
FREEIMUv035_MS
Ë|| deföed(
FREEIMUv035_BMP
)

1072 
	#ITG3200


	)

1073 
	#BMA180


	)

1074 
	#HMC5883


	)

1075 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1076 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1077 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1078 #unde‡
INTERNAL_I2C_PULLUPS


1079 #i‡
deföed
(
FREEIMUv035_MS
)

1080 
	#MS561101BA


	)

1081 #ñi‡
deföed
(
FREEIMUv035_BMP
)

1082 
	#BMP085


	)

1086 #i‡
deföed
(
FREEIMUv04
)

1087 
	#FREEIMUv043


	)

1090 #i‡
deföed
(
Mu…iWiiMega
)

1091 
	#FREEIMUv043


	)

1094 #i‡
deföed
(
FREEIMUv043
Ë|| deföed(
MICROWII
)

1095 
	#MPU6050


	)

1096 
	#HMC5883


	)

1097 
	#MS561101BA


	)

1098 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1099 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1100 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1101 
	#MPU6050_I2C_AUX_MASTER


1102 #unde‡
INTERNAL_I2C_PULLUPS


	)

1105 #i‡
deföed
(
NANOWII
)

1106 
	#MPU6050


	)

1107 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -Y; imu.accADC[
PITCH
] = X; imu.accADC[
YAW
] = Z;}

	)

1108 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -X; imu.gyroADC[
PITCH
] = -Y; imu.gyroADC[
YAW
] = -Z;}

	)

1109 #unde‡
INTERNAL_I2C_PULLUPS


1111 #unde‡
SOFT_PWM_3_PIN_HIGH


1112 #unde‡
SOFT_PWM_3_PIN_LOW


1113 #unde‡
SOFT_PWM_4_PIN_HIGH


1114 #unde‡
SOFT_PWM_4_PIN_LOW


1115 #unde‡
SW_PWM_P3


1116 #unde‡
SW_PWM_P4


1117 
	#SOFT_PWM_3_PIN_HIGH
 
PORTD
 |1<<4;

	)

1118 
	#SOFT_PWM_3_PIN_LOW
 
PORTD
 &~(1<<4);

	)

1119 
	#SOFT_PWM_4_PIN_HIGH
 
PORTF
 |1<<5;

	)

1120 
	#SOFT_PWM_4_PIN_LOW
 
PORTF
 &~(1<<5);

	)

1121 
	#SW_PWM_P3
 4

	)

1122 
	#SW_PWM_P4
 
A2


	)

1123 
	#HWPWM6


	)

1125 #unde‡
SERVO_3_PINMODE


1126 #unde‡
SERVO_3_PIN_HIGH


1127 #unde‡
SERVO_3_PIN_LOW


1128 #unde‡
SERVO_4_PINMODE


1129 #unde‡
SERVO_4_PIN_HIGH


1130 #unde‡
SERVO_4_PIN_LOW


1131 
	#SERVO_3_PINMODE
 
DDRC
 |= (1<<7);

1132 
	#SERVO_3_PIN_HIGH
 
PORTC
 |1<<7;

	)

1133 
	#SERVO_3_PIN_LOW
 
PORTC
 &~(1<<7);

	)

1134 
	#SERVO_4_PINMODE
 
DDRB
 |= (1<<7);

1135 
	#SERVO_4_PIN_HIGH
 
PORTB
 |1<<7;

	)

1136 
	#SERVO_4_PIN_LOW
 
PORTB
 &~(1<<7);

	)

1138 #i‡!
deföed
(
OCTOX8
Ë&& !deföed(
OCTOFLATP
Ë&& !deföed(
OCTOFLATX
)

1139 #unde‡
LEDPIN_PINMODE


1140 #unde‡
LEDPIN_TOGGLE


1141 #unde‡
LEDPIN_OFF


1142 #unde‡
LEDPIN_ON


1143 
	#LEDPIN_PINMODE
 
DDRD
 |= (1<<4);

1144 
	#LEDPIN_TOGGLE
 
PIND
 |= (1<<5)|(1<<4);

1145 
	#LEDPIN_OFF
 
PORTD
 |(1<<5); PORTD &~(1<<4);

	)

1146 
	#LEDPIN_ON
 
PORTD
 &~(1<<5); PORTD |(1<<4);

	)

1150 #i‡
deföed
(
PIPO
)

1151 
	#L3G4200D


	)

1152 
	#ADXL345


	)

1153 
	#HMC5883


	)

1154 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1155 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = Y; imu.gyroADC[
YAW
] = -Z;}

	)

1156 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = Y; imu.magADC[
PITCH
] = -X; imu.magADC[
YAW
] = Z;}

	)

1157 
	#ADXL345_ADDRESS
 0x53

	)

1160 #i‡
deföed
(
QUADRINO
)

1161 
	#ITG3200


	)

1162 
	#BMA180


	)

1163 
	#BMP085


	)

1164 
	#HMC5883


	)

1165 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1166 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1167 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1170 #i‡
deföed
(
QUADRINO_ZOOM
)

1171 
	#ITG3200


	)

1172 
	#BMA180


	)

1173 
	#BMP085


	)

1174 
	#HMC5883


	)

1175 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1176 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1177 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1178 
	#STABLEPIN_PINMODE
 
	`pöMode
 (
A2
, 
OUTPUT
);

	)

1179 
	#STABLEPIN_ON
 
PORTC
 |(1<<2);

	)

1180 
	#STABLEPIN_OFF
 
PORTC
 &~(1<<2);

	)

1183 #i‡
deföed
(
QUADRINO_ZOOM_MS
)

1184 
	#ITG3200


	)

1185 
	#BMA180


	)

1186 
	#MS561101BA


	)

1187 
	#HMC5883


	)

1188 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1189 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1190 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1191 
	#STABLEPIN_PINMODE
 
	`pöMode
 (
A2
, 
OUTPUT
);

	)

1192 
	#STABLEPIN_ON
 
PORTC
 |(1<<2);

	)

1193 
	#STABLEPIN_OFF
 
PORTC
 &~(1<<2);

	)

1196 #i‡
deföed
(
QUADRINO_NANO
)

1197 
	#MPU6050


	)

1198 
	#MS561101BA


	)

1199 
	#AK8975


1200 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1201 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1202 
	#MAG_ORIENTATION
(
Y
, 
X
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = Z;}

	)

1204 
	#MPU6050_ADDRESS
 0x68

	)

1205 
	#MS561101BA_ADDRESS
 0x76

	)

1207 
	#GPS_SERIAL
 2

	)

1208 
	#VENUS8


	)

1209 
	#USE_MSP_WP


	)

1211 
	#LED1PIN_ON
 
PORTB
 |(1<<7);

	)

1212 
	#LED1PIN_OFF
 
PORTB
 &~(1<<7);

	)

1213 
	#LED2PIN_ON
 
PORTC
 |(1<<7);

	)

1214 
	#LED2PIN_OFF
 
PORTC
 &~(1<<7);

	)

1216 #unde‡
DISABLE_POWER_PIN


1217 
	#POWERPIN_PINMODE
 
DDRC
 |= 1<<1;

1218 
	#POWERPIN_ON
 
PORTC
 |1<<1;

	)

1219 
	#POWERPIN_OFF
 
PORTC
 &~(1<<1);

	)

1222 #i‡
deföed
(
ALLINONE
)

1223 
	#ITG3200


	)

1224 
	#BMA180


	)

1225 
	#BMP085


	)

1226 
	#HMC5883


	)

1227 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1228 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1229 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1230 
	#BMA180_ADDRESS
 0x41

	)

1233 #i‡
deföed
(
AEROQUADSHIELDv2
)

1234 
	#ITG3200


	)

1235 
	#BMA180


	)

1236 
	#BMP085


	)

1237 
	#HMC5843


	)

1238 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1239 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = Y; imu.gyroADC[
YAW
] = -Z;}

	)

1240 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1241 
	#GYRO_ADDRESS
 0X69

	)

1244 #i‡
deföed
(
ATAVRSBIN1
)

1245 
	#ITG3200


	)

1246 
	#BMA020


1247 
	#AK8975


	)

1248 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = Y; imu.accADC[
PITCH
] = -X; imu.accADC[
YAW
] = Z;}

	)

1249 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = Y; imu.gyroADC[
YAW
] = -Z;}

	)

1250 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = -Y; imu.magADC[
PITCH
] = -X; imu.magADC[
YAW
] = Z;}

	)

1253 #i‡
deföed
(
SIRIUS
)

1254 
	#ITG3200


	)

1255 
	#BMA180


	)

1256 
	#BMP085


	)

1257 
	#HMC5883


	)

1258 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1259 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1260 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1263 #i‡
deföed
(
SIRIUSGPS
)

1264 
	#ITG3200


	)

1265 
	#BMA180


	)

1266 
	#BMP085


	)

1267 
	#HMC5883


	)

1268 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1269 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1270 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = -X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = Z;}

	)

1273 #i‡
deföed
(
SIRIUS600
)

1274 
	#WMP


	)

1275 
	#BMA180


	)

1276 
	#BMP085


	)

1277 
	#HMC5883


	)

1278 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1279 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1282 #i‡
deföed
(
SIRIUS_AIR
)

1283 
	#MPU6050


	)

1284 
	#BMP085


	)

1285 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = X; imu.accADC[
PITCH
] = Y; imu.accADC[
YAW
] = Z;}

	)

1286 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -Y; imu.gyroADC[
PITCH
] = X; imu.gyroADC[
YAW
] = -Z;}

	)

1287 #unde‡
INTERNAL_I2C_PULLUPS


1288 
	#HWPWM6


	)

1291 #i‡
deföed
(
SIRIUS_AIR_GPS
)

1292 
	#MPU6050


	)

1293 
	#BMP085


	)

1294 
	#HMC5883


	)

1295 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = X; imu.accADC[
PITCH
] = Y; imu.accADC[
YAW
] = Z;}

	)

1296 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -Y; imu.gyroADC[
PITCH
] = X; imu.gyroADC[
YAW
] = -Z;}

	)

1297 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = -X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = Z;}

1298 #unde‡
INTERNAL_I2C_PULLUPS


	)

1299 
	#HWPWM6


	)

1302 #i‡
deföed
(
SIRIUS_MEGAv5_OSD
)

1303 
	#ITG3050


	)

1304 
	#BMA280


	)

1305 
	#MS561101BA


	)

1306 
	#HMC5883


	)

1307 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1308 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -X; imu.gyroADC[
PITCH
] = -Y; imu.gyroADC[
YAW
] = -Z;}

	)

1309 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = Y; imu.magADC[
PITCH
] = -X; imu.magADC[
YAW
] = -Z;}

	)

1310 #unde‡
INTERNAL_I2C_PULLUPS


1313 #i‡
deföed
(
MINIWII
)

1314 
	#ITG3200


	)

1315 
	#BMA180


	)

1316 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1317 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1320 #i‡
deföed
(
CITRUSv2_1
)

1321 
	#ITG3200


	)

1322 
	#ADXL345


	)

1323 
	#BMP085


	)

1324 
	#HMC5883


	)

1325 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1326 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1327 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1328 #unde‡
INTERNAL_I2C_PULLUPS


1331 #i‡
deföed
(
CHERRY6DOFv1_0
)

1332 
	#MPU6050


	)

1333 
	#ACC_ORIENTATION
(
Y
, 
X
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -Y; imu.accADC[
PITCH
] = -X; imu.accADC[
YAW
] = Z;}

	)

1334 
	#GYRO_ORIENTATION
(
Y
, 
X
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = -Y; imu.gyroADC[
YAW
] = -Z;}

	)

1335 #unde‡
INTERNAL_I2C_PULLUPS


1338 #i‡
deföed
(
DROTEK_10DOF
Ë|| deföed(
DROTEK_10DOF_MS
)

1339 
	#ITG3200


	)

1340 
	#BMA180


	)

1341 
	#HMC5883


	)

1342 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1343 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1344 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1345 
	#GYRO_ADDRESS
 0X69

	)

1346 #i‡
deföed
(
DROTEK_10DOF_MS
)

1347 
	#MS561101BA


	)

1348 #ñi‡
deföed
(
DROTEK_10DOF
)

1349 
	#BMP085


	)

1353 #i‡
deföed
(
DROTEK_6DOFv2
)

1354 
	#ITG3200


	)

1355 
	#BMA180


	)

1356 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -Y; imu.accADC[
PITCH
] = X; imu.accADC[
YAW
] = Z;}

	)

1357 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -X; imu.gyroADC[
PITCH
] = -Y; imu.gyroADC[
YAW
] = -Z;}

	)

1358 
	#GYRO_ADDRESS
 0X69

	)

1361 #i‡
deföed
(
DROTEK_6DOF_MPU
)

1362 
	#MPU6050


	)

1363 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -Y; imu.accADC[
PITCH
] = X; imu.accADC[
YAW
] = Z;}

	)

1364 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -X; imu.gyroADC[
PITCH
] = -Y; imu.gyroADC[
YAW
] = -Z;}

	)

1365 
	#MPU6050_ADDRESS
 0x69

	)

1366 #unde‡
INTERNAL_I2C_PULLUPS


1369 #i‡
deföed
(
DROTEK_10DOF_MPU
)

1370 
	#MPU6050


	)

1371 
	#HMC5883


	)

1372 
	#MS561101BA


	)

1373 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = Y; imu.accADC[
PITCH
] = -X; imu.accADC[
YAW
] = Z;}

	)

1374 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = Y; imu.gyroADC[
YAW
] = -Z;}

	)

1375 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = -Y; imu.magADC[
PITCH
] = X; imu.magADC[
YAW
] = -Z;}

	)

1376 
	#MPU6050_ADDRESS
 0X69

	)

1377 
	#MPU6050_I2C_AUX_MASTER


1378 #unde‡
INTERNAL_I2C_PULLUPS


	)

1381 #i‡
deföed
(
FLYDUINO_MPU
)

1382 
	#MPU6050


	)

1383 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = X; imu.accADC[
PITCH
] = Y; imu.accADC[
YAW
] = Z;}

	)

1384 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -Y; imu.gyroADC[
PITCH
] = X; imu.gyroADC[
YAW
] = -Z;}

	)

1387 #i‡
deföed
(
MONGOOSE1_0
)

1388 
	#ITG3200


	)

1389 
	#ADXL345


	)

1390 
	#BMP085


	)

1391 
	#HMC5883


	)

1392 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = -Y; imu.gyroADC[
PITCH
] = X; imu.gyroADC[
YAW
] = -Z;}

	)

1393 
	#ACC_ORIENTATION
(
Y
, 
X
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = Y; imu.accADC[
PITCH
] = X; imu.accADC[
YAW
] = Z;}

	)

1394 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = -X; imu.magADC[
PITCH
] = -Y; imu.magADC[
YAW
] = -Z;}

	)

1395 
	#ADXL345_ADDRESS
 0x53

	)

1396 #unde‡
INTERNAL_I2C_PULLUPS


1399 #i‡
deföed
(
CRIUS_LITE
)

1400 
	#ITG3200


	)

1401 
	#ADXL345


	)

1402 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1403 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1406 #i‡
deföed
(
CRIUS_SE
)

1407 
	#ITG3200


	)

1408 
	#BMA180


	)

1409 
	#HMC5883


	)

1410 
	#BMP085


	)

1411 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1412 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1413 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1416 #i‡
deföed
(
CRIUS_SE_v2_0
)

1417 
	#MPU6050


	)

1418 
	#HMC5883


	)

1419 
	#BMP085


	)

1420 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1421 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1422 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1425 #i‡
deföed
(
RCTIMER_CRIUS_SE_v2_0
)

1426 
	#MPU6050


	)

1427 
	#HMC5883


	)

1428 
	#MS561101BA


	)

1429 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1430 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1431 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1436 #i‡
deföed
(
BOARD_PROTO_1
)

1437 
	#MPU6050


	)

1438 
	#HMC5883


	)

1439 
	#MS561101BA


	)

1440 
	#ACC_ORIENTATION
(
Y
, 
X
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -Y; imu.accADC[
PITCH
] = -X; imu.accADC[
YAW
] = Z;}

	)

1441 
	#GYRO_ORIENTATION
(
Y
, 
X
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = -Y; imu.gyroADC[
YAW
] = -Z;}

	)

1442 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1443 
	#MS561101BA_ADDRESS
 0x76

	)

1444 
	#STABLEPIN_PINMODE
 
	`pöMode
 (
A2
, 
OUTPUT
);

	)

1445 
	#STABLEPIN_ON
 
PORTC
 |(1<<2);

	)

1446 
	#STABLEPIN_OFF
 
PORTC
 &~(1<<2);

	)

1449 #i‡
deföed
(
BOARD_PROTO_2
)

1450 
	#MPU6050


	)

1451 
	#MAG3110


	)

1452 
	#MS561101BA


	)

1453 
	#ACC_ORIENTATION
(
Y
, 
X
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -Y; imu.accADC[
PITCH
] = -X; imu.accADC[
YAW
] = Z;}

	)

1454 
	#GYRO_ORIENTATION
(
Y
, 
X
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = -Y; imu.gyroADC[
YAW
] = -Z;}

	)

1455 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = Z;}

	)

1456 
	#MPU6050_I2C_AUX_MASTER


	)

1457 
	#MS561101BA_ADDRESS
 0x76

	)

1458 
	#STABLEPIN_PINMODE
 
	`pöMode
 (
A2
, 
OUTPUT
);

	)

1459 
	#STABLEPIN_ON
 
PORTC
 |(1<<2);

	)

1460 
	#STABLEPIN_OFF
 
PORTC
 &~(1<<2);

	)

1463 #i‡
deföed
(
GY_80
)

1464 
	#L3G4200D


	)

1465 
	#ADXL345


	)

1466 
	#HMC5883


	)

1467 
	#BMP085


	)

1468 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1469 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1470 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1471 #unde‡
INTERNAL_I2C_PULLUPS


1472 
	#ADXL345_ADDRESS
 0x53

	)

1475 #i‡
deföed
(
GY_85
)

1476 
	#ITG3200


	)

1477 
	#ADXL345


	)

1478 
	#HMC5883


	)

1479 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1480 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1481 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1482 #unde‡
INTERNAL_I2C_PULLUPS


1483 
	#ADXL345_ADDRESS
 0x53

	)

1486 #i‡
deföed
(
GY_86
)

1487 
	#MPU6050


	)

1488 
	#HMC5883


	)

1489 
	#MS561101BA


	)

1490 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1491 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1492 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1493 
	#MPU6050_I2C_AUX_MASTER


1494 #unde‡
INTERNAL_I2C_PULLUPS


	)

1497 #i‡
deföed
(
GY_88
)

1498 
	#MPU6050


	)

1499 
	#HMC5883


	)

1500 
	#BMP085


	)

1501 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1502 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1503 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1504 
	#MPU6050_I2C_AUX_MASTER


1505 #unde‡
INTERNAL_I2C_PULLUPS


	)

1508 #i‡
deföed
(
GY_521
)

1509 
	#MPU6050


	)

1510 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1511 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1512 #unde‡
INTERNAL_I2C_PULLUPS


1515 #i‡
deföed
(
INNOVWORKS_10DOF
)

1516 
	#ITG3200


	)

1517 
	#BMA180


	)

1518 
	#BMP085


	)

1519 
	#HMC5883


	)

1520 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1521 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1522 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.imu.[
YAW
] = -Z;}

	)

1523 #unde‡
INTERNAL_I2C_PULLUPS


1526 #i‡
deföed
(
INNOVWORKS_6DOF
)

1527 
	#ITG3200


	)

1528 
	#BMA180


	)

1529 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1530 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1531 #unde‡
INTERNAL_I2C_PULLUPS


1534 #i‡
deföed
(
PROTO_DIY
)

1535 
	#ITG3200


	)

1536 
	#BMA180


	)

1537 
	#HMC5883


	)

1538 
	#MS561101BA


	)

1539 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = X; imu.accADC[
PITCH
] = Y; imu.accADC[
YAW
] = Z;}

	)

1540 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = Y; imu.gyroADC[
YAW
] = -Z;}

	)

1541 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1542 #unde‡
INTERNAL_I2C_PULLUPS


1543 
	#STABLEPIN_ON
 
PORTC
 &~(1<<6);

	)

1544 
	#STABLEPIN_OFF
 
PORTC
 |1<<6;

	)

1547 #i‡
deföed
(
IOI_MINI_MULTIWII
)

1548 
	#ITG3200


	)

1549 
	#BMA180


	)

1550 
	#HMC5883


	)

1551 
	#BMP085


	)

1552 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1553 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1554 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = -Y; imu.magADC[
PITCH
] = X; imu.magADC[
YAW
] = -Z;}

	)

1557 #i‡
deföed
(
Bobs_6DOF_V1
)

1558 
	#ITG3200


	)

1559 
	#BMA180


	)

1560 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1561 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1562 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = Y; imu.magADC[
PITCH
] = -X; imu.magADC[
YAW
] = -Z;}

	)

1563 #unde‡
INTERNAL_I2C_PULLUPS


1566 #i‡
deföed
(
Bobs_9DOF_V1
)

1567 
	#ITG3200


	)

1568 
	#BMA180


	)

1569 
	#BMP085


	)

1570 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1571 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1572 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = Y; imu.magADC[
PITCH
] = -X; imu.magADC[
YAW
] = -Z;}

	)

1573 #unde‡
INTERNAL_I2C_PULLUPS


1576 #i‡
deföed
(
Bobs_10DOF_BMP_V1
)

1577 
	#ITG3200


	)

1578 
	#BMA180


	)

1579 
	#BMP085


1580 
	#HMC5883


	)

1581 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1582 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1583 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = Y; imu.magADC[
PITCH
] = -X; imu.magADC[
YAW
] = -Z;}

	)

1584 #unde‡
INTERNAL_IC2_PULLUPS


1587 #i‡
deföed
(
HK_Mu…iWii_SE_V2
 )

1588 
	#MPU6050


	)

1589 
	#HMC5883


	)

1590 
	#BMP085


	)

1591 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1592 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
){
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1593 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1594 
	#MPU6050_EN_I2C_BYPASS


1595 #unde‡
INTERNAL_I2C_PULLUPS


	)

1598 #i‡
deföed
(
HK_Mu…iWii_328P
 )

1599 
	#ITG3200


	)

1600 
	#BMA180


	)

1601 
	#HMC5883


	)

1602 
	#BMP085


	)

1603 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1604 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
){
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1605 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1606 #unde‡
INTERNAL_I2C_PULLUPS


1609 #i‡
deföed
(
CRIUS_AIO_PRO
)

1610 
	#MPU6050


	)

1611 
	#HMC5883


	)

1612 
	#MS561101BA


	)

1613 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1614 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1615 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1616 
	#MPU6050_I2C_AUX_MASTER


1617 #unde‡
INTERNAL_I2C_PULLUPS


	)

1618 
	#I2C_SPEED
 400000L

1621 
	#SERVO_1_PINMODE
 
	`pöMode
(44,
OUTPUT
);

1622 
	#SERVO_1_PIN_HIGH
 
PORTL
 |1<<5;

	)

1623 
	#SERVO_1_PIN_LOW
 
PORTL
 &~(1<<5);

	)

1624 
	#SERVO_2_PINMODE
 
	`pöMode
(45,
OUTPUT
);

1625 
	#SERVO_2_PIN_HIGH
 
PORTL
 |1<<4;

	)

1626 
	#SERVO_2_PIN_LOW
 
PORTL
 &~(1<<4);

	)

1627 
	#SERVO_3_PINMODE
 
	`pöMode
(46,
OUTPUT
);

1628 
	#SERVO_3_PIN_HIGH
 
PORTL
 |1<<3;

	)

1629 
	#SERVO_3_PIN_LOW
 
PORTL
 &~(1<<3);

	)

1632 #i‡
deföed
(
LADYBIRD
)

1633 
	#MPU6050


	)

1634 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1635 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1636 #unde‡
INTERNAL_I2C_PULLUPS


1637 
	#MINTHROTTLE
 1050

	)

1638 
	#MAXTHROTTLE
 2000

	)

1639 
	#EXT_MOTOR_32KHZ


	)

1640 
	#VBAT


	)

1641 
	#VBATSCALE
 54

	)

1642 
	#VBATLEVEL_WARN1
 10

	)

1643 
	#VBATLEVEL_WARN2
 10

	)

1644 
	#VBATLEVEL_CRIT
 10

	)

1645 
	#NO_VBAT
 10

	)

1646 
	#MOTOR_STOP


	)

1649 #i‡
deföed
(
MEGAWAP_V2_STD
)

1650 
	#ITG3200


	)

1651 
	#BMA180


	)

1652 
	#HMC5883


	)

1653 
	#BMP085


	)

1654 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1655 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1656 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1659 #i‡
deföed
(
MEGAWAP_V2_ADV
)

1660 
	#MPU6050


	)

1661 
	#HMC5883


	)

1662 
	#MS561101BA


	)

1663 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1664 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1665 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1666 
	#MPU6050_EN_I2C_BYPASS


1667 #unde‡
INTERNAL_I2C_PULLUPS


	)

1670 #i‡
deföed
(
RCNë_FC_GPS
)

1671 
	#RCNë_FC


	)

1672 
	#HMC5883


	)

1673 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = -X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = Z;}

	)

1674 
	#MPU6050_I2C_AUX_MASTER


1675 #unde‡
INTERNAL_I2C_PULLUPS


	)

1676 
	#GPS_SERIAL
 2

	)

1677 
	#GPS_BAUD
 115200

	)

1678 
	#UBLOX


	)

1681 #i‡
deföed
(
RCNë_FC
)

1682 
	#MPU6050


	)

1683 
	#MS561101BA


	)

1684 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1685 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1686 #unde‡
INTERNAL_I2C_PULLUPS


1688 
	#SERVO_1_PINMODE
 
	`pöMode
(40,
OUTPUT
);

1689 
	#SERVO_1_PIN_HIGH
 
PORTL
 |1<<5;

	)

1690 
	#SERVO_1_PIN_LOW
 
PORTL
 &~(1<<5);

	)

1691 
	#SERVO_2_PINMODE
 
	`pöMode
(39,
OUTPUT
);

1692 
	#SERVO_2_PIN_HIGH
 
PORTL
 |1<<4;

	)

1693 
	#SERVO_2_PIN_LOW
 
PORTL
 &~(1<<4);

	)

1694 
	#SERVO_3_PINMODE
 
	`pöMode
(38,
OUTPUT
);

1695 
	#SERVO_3_PIN_HIGH
 
PORTL
 |1<<3;

	)

1696 
	#SERVO_3_PIN_LOW
 
PORTL
 &~(1<<3);

	)

1699 #i‡
deföed
(
FLYDU_ULTRA
)

1700 
	#ITG3200


	)

1701 
	#MMA8451Q


	)

1702 
	#MS561101BA


	)

1703 
	#MAG3110


	)

1705 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = X; imu.accADC[
PITCH
] = Y; imu.accADC[
YAW
] = Z;}

	)

1706 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1707 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = -Y; imu.magADC[
PITCH
] = X; imu.magADC[
YAW
] = Z;}

	)

1709 
	#GPS_SERIAL
 2

	)

1710 
	#GPS_BAUD
 57600

	)

1711 
	#MTK_BINARY19


	)

1712 
	#INIT_MTK_GPS


	)

1715 #i‡
deföed
(
Mu…iWii_32U4_SE
)

1716 
	#MPU6050


	)

1717 
	#HMC5883


	)

1718 
	#MPU6050_I2C_AUX_MASTER


1719 
	#MS561101BA


	)

1720 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1721 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1722 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1723 #unde‡
INTERNAL_I2C_PULLUPS


1726 #i‡
deföed
(
Mu…iWii_32U4_SE_no_b¨o
)

1727 
	#MPU6050


	)

1728 
	#HMC5883


	)

1729 
	#MPU6050_I2C_AUX_MASTER


1730 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1731 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1732 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1733 #unde‡
INTERNAL_I2C_PULLUPS


1736 #i‡
deföed
(
Flyduöo9DOF
)

1737 
	#MPU6050


	)

1738 
	#HMC5883


	)

1739 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1740 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1741 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1742 
	#MPU6050_EN_I2C_BYPASS


1743 #unde‡
INTERNAL_I2C_PULLUPS


	)

1746 #i‡
deföed
(
N™o_Pœ√
)

1747 
	#LSM330


	)

1748 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1749 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1750 #unde‡
INTERNAL_I2C_PULLUPS


1753 #i‡
deföed
(
OPENLRSv2MULTI
Ë|| deföed(
OPENLRS_V2
)

1754 
	#OPENLRSv2MULTI


	)

1755 #i‡!
deföed
(
OPENLRS_V2
)

1756 
	#ITG3200


	)

1757 
	#ADXL345


	)

1758 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1759 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1760 
	#ADXL345_ADDRESS
 0x53

	)

1763 
	#SDO_pö
 
A0


	)

1764 
	#SDI_pö
 
A1


	)

1765 
	#SCLK_pö
 
A2


	)

1766 
	#IRQ_pö
 2

	)

1767 
	#nSñ_pö
 4

	)

1768 
	#IRQ_öãºu±
 0

	)

1770 
	#nIRQ_1
 (
PIND
 & 0x04)==0x04

1771 
	#nIRQ_0
 (
PIND
 & 0x04)==0x00

1772 

	)

1773 
	#nSEL_⁄
 
PORTD
 |= 0x10

1774 
	#nSEL_off
 
PORTD
 &= 0xEF

1775 

	)

1776 
	#SCK_⁄
 
PORTC
 |= 0x04

1777 
	#SCK_off
 
PORTC
 &= 0xFB

1778 

	)

1779 
	#SDI_⁄
 
PORTC
 |= 0x02

1780 
	#SDI_off
 
PORTC
 &= 0xFD

1781 

	)

1782 
	#SDO_1
 (
PINC
 & 0x01) == 0x01

1783 
	#SDO_0
 (
PINC
 & 0x01) == 0x00

1784 

	)

1786 
	#GREEN_LED_pö
 13

	)

1787 
	#RED_LED_pö
 
A3


	)

1789 
	#Red_LED_ON
 
PORTC
 |
	`_BV
(3);

	)

1790 
	#Red_LED_OFF
 
PORTC
 &~
	`_BV
(3);

	)

1792 
	#Gªí_LED_ON
 
PORTB
 |
	`_BV
(5);

	)

1793 
	#Gªí_LED_OFF
 
PORTB
 &~
	`_BV
(5);

	)

1795 
	#NOP
(Ë
__asm__
 
	`__vﬁ©ûe__
("n›")

	)

1797 
	#RF22B_PWRSTATE_READY
 01

	)

1798 
	#RF22B_PWRSTATE_TX
 0x09

	)

1799 
	#RF22B_PWRSTATE_RX
 05

	)

1800 
	#RF22B_Rx_∑ckë_ª˚ived_öãºu±
 0x02

	)

1801 
	#RF22B_PACKET_SENT_INTERRUPT
 04

	)

1802 
	#RF22B_PWRSTATE_POWERDOWN
 00

	)

1806 #i‡
deföed
(
DESQUARED6DOFV2GO
)

1807 
	#ITG3200


	)

1808 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1809 #unde‡
INTERNAL_I2C_PULLUPS


1812 #i‡
deföed
(
DESQUARED6DOFV4
)

1813 
	#MPU6050


	)

1814 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1815 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1816 #unde‡
INTERNAL_I2C_PULLUPS


1819 #i‡
deföed
(
OSEPPGYRO
)

1820 
	#MPU3050


	)

1821 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1822 #unde‡
INTERNAL_I2C_PULLUPS


1825 #i‡
deföed
(
DIYFLYING_MAGE_V1
)

1826 
	#MPU6050


1827 
	#BMP085


1828 
	#HMC5883


1829 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = -X; imu.accADC[
PITCH
] = -Y; imu.accADC[
YAW
] = Z;}

	)

1830 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
gyroADC
[
ROLL
] = Y; imu.gyroADC[
PITCH
] = -X; imu.gyroADC[
YAW
] = -Z;}

	)

1831 
	#MAG_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
magADC
[
ROLL
] = X; imu.magADC[
PITCH
] = Y; imu.magADC[
YAW
] = -Z;}

	)

1832 #unde‡
INTERNAL_I2C_PULLUPS


1835 #i‡
deföed
(
Gizduöo
)

1837 
	#ITG3200


	)

1838 
	#ADXL345


	)

1841 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = Y; imu.accADC[
PITCH
] = -X; imu.accADC[
YAW
] = Z;}

	)

1842 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
){
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = Y; imu.gyroADC[
YAW
] = -Z;}

	)

1845 
	#ADXL345_ADDRESS
 0x53

	)

1848 #unde‡
INTERNAL_I2C_PULLUPS


1851 #i‡
deföed
(
Ardh©
)

1853 
	#MPU9250


1854 
	#BMP085


1855 

	)

1857 
	#ACC_ORIENTATION
(
X
, 
Y
, 
Z
Ë{
imu
.
accADC
[
ROLL
] = Y; imu.accADC[
PITCH
] = -X; imu.accADC[
YAW
] = Z;}

	)

1858 
	#GYRO_ORIENTATION
(
X
, 
Y
, 
Z
){
imu
.
gyroADC
[
ROLL
] = X; imu.gyroADC[
PITCH
] = Y; imu.gyroADC[
YAW
] = -Z;}

	)

1860 #unde‡
INTERNAL_I2C_PULLUPS


1866 #i‡
deföed
(
SLIM_WING
)

1867 #i‡!
deföed
(
MEGA
Ë|| deföed (
TESTBED
)

1869 #unde‡
BMP085


1870 #unde‡
MS561101BA


1873 #unde‡
HMC5843


1874 #unde‡
HMC5883


1875 #unde‡
AK8975


1876 #unde‡
MAG3110


1877 #unde‡
MPU6050_EN_I2C_BYPASS


1878 #unde‡
MPU6050_I2C_AUX_MASTER


1879 #unde‡
GPS_LED_INDICATOR


1881 #unde‡
SLIM_WING


1885 #i‡
deföed
(
ADXL345
Ë|| deföed(
BMA020
Ë|| deföed(
BMA180
Ë|| deföed(
BMA280
Ë|| deföed(
MMA7455
Ë|| deföed(
ADCACC
Ë|| deföed(
LIS3LV02
Ë|| deföed(
LSM303DLx_ACC
Ë|| deföed(
MPU6050
Ë|| deföed(
LSM330
Ë|| deföed(
MMA8451Q
Ë|| deföed(
MPU9250
)

1886 
	#ACC
 1

	)

1888 
	#ACC
 0

	)

1891 #i‡
deföed
(
HMC5883
Ë|| deföed(
HMC5843
Ë|| deföed(
AK8975
Ë|| deföed(
MAG3110
Ë|| deföed(
MPU9250
)

1892 
	#MAG
 1

	)

1894 
	#MAG
 0

	)

1897 #i‡
deföed
(
ITG3200
Ë|| deföed(
ITG3050
Ë|| deföed(
L3G4200D
Ë|| deföed(
MPU6050
Ë|| deföed(
LSM330
Ë|| deföed(
MPU3050
Ë|| deföed(
WMP
Ë|| deföed(
MPU9250
)

1898 
	#GYRO
 1

	)

1900 
	#GYRO
 0

	)

1903 #i‡
deföed
(
BMP085
Ë|| deföed(
MS561101BA
)

1904 
	#BARO
 1

	)

1906 
	#BARO
 0

	)

1909 #i‡
deföed
(
GPS_SERIAL
Ë|| deföed(
I2C_GPS
)

1910 
	#GPS
 1

	)

1912 
	#GPS
 0

	)

1915 #i‡
deföed
(
USE_MSP_WP
)

1916 
	#NAVCAP
 1

	)

1918 
	#NAVCAP
 0

	)

1921 #i‡
deföed
(
SRF02
Ë|| deföed(
SRF08
Ë|| deföed(
SRF10
Ë|| deföed(
SRC235
Ë|| deföed(
I2C_GPS_SONAR
)

1922 
	#SONAR
 1

	)

1924 
	#SONAR
 0

	)

1927 #i‡
deföed
(
EXTENDED_AUX_STATES
)

1928 
	#EXTAUX
 1

	)

1930 
	#EXTAUX
 0

	)

1933 #i‡
deföed
(
RX_RSSI_CHAN
)

1934 
	#RX_RSSI


	)

1940 #i‡
deföed
(
TRI
)

1941 
	#MULTITYPE
 1

	)

1942 #ñi‡
deföed
(
QUADP
)

1943 
	#MULTITYPE
 2

	)

1944 #ñi‡
deföed
(
QUADX
)

1945 
	#MULTITYPE
 3

	)

1946 #ñi‡
deföed
(
BI
)

1947 
	#MULTITYPE
 4

	)

1948 
	#SERVO_RATES
 {30,30,100,100,0,1,100,100}

	)

1949 #ñi‡
deföed
(
GIMBAL
)

1950 
	#MULTITYPE
 5

	)

1951 #ñi‡
deföed
(
Y6
)

1952 
	#MULTITYPE
 6

	)

1953 #ñi‡
deföed
(
HEX6
)

1954 
	#MULTITYPE
 7

	)

1955 #ñi‡
deföed
(
FLYING_WING
)

1956 
	#MULTITYPE
 8

	)

1957 
	#SERVO_RATES
 {30,30,100,0,1,100,100,100}

	)

1958 #ñi‡
deföed
(
Y4
)

1959 
	#MULTITYPE
 9

	)

1960 #ñi‡
deföed
(
HEX6X
)

1961 
	#MULTITYPE
 10

	)

1962 #ñi‡
deföed
(
OCTOX8
)

1963 
	#MULTITYPE
 11

1964 #ñi‡
	`deföed
(
OCTOFLATP
)

	)

1965 
	#MULTITYPE
 12

1966 #ñi‡
	`deföed
(
OCTOFLATX
)

	)

1967 
	#MULTITYPE
 13

1968 #ñi‡
	`deföed
(
AIRPLANE
)

	)

1969 
	#MULTITYPE
 14

	)

1970 
	#SERVO_RATES
 {30,30,100,100,-100,100,100,100}

	)

1971 #ñi‡
deföed
 (
HELI_120_CCPM
)

1972 
	#MULTITYPE
 15

	)

1973 #ñi‡
deföed
 (
HELI_90_DEG
)

1974 
	#MULTITYPE
 16

	)

1975 
	#SERVO_RATES
 {30,30,100,-100,-100,100,100,100}

	)

1976 #ñi‡
deföed
(
VTAIL4
)

1977 
	#MULTITYPE
 17

	)

1978 #ñi‡
deföed
(
HEX6H
)

1979 
	#MULTITYPE
 18

	)

1980 #ñi‡
deföed
(
SINGLECOPTER
)

1981 
	#MULTITYPE
 21

	)

1982 
	#SERVO_RATES
 {30,30,100,0,1,0,1,100}

	)

1983 #ñi‡
deföed
(
DUALCOPTER
)

1984 
	#MULTITYPE
 20

	)

1985 #ñi‡
deföed
(
QUADWING
)

1986 
	#MULTITYPE
 8

1988 

	)

1993 #i‡
deföed
 (
AIRPLANE
Ë|| deföed(
HELICOPTER
)|| deföed(
SINGLECOPTER
)|| deföed(
DUALCOPTER
Ë&& deföed(
PROMINI
)

1994 #i‡
deföed
(
D12_POWER
)

1995 
	#SERVO_4_PINMODE
 ;

1996 
	#SERVO_4_PIN_HIGH
 ;

	)

1997 
	#SERVO_4_PIN_LOW
 ;

	)

1999 #unde‡
POWERPIN_PINMODE


2000 #unde‡
POWERPIN_ON


2001 #unde‡
POWERPIN_OFF


2002 
	#POWERPIN_PINMODE
 ;

	)

2003 
	#POWERPIN_ON
 ;

	)

2004 
	#POWERPIN_OFF
 ;

	)

2008 #i‡
deföed
(
POWERMETER_HARD
Ë|| deföed(
POWERMETER_SOFT
)

2009 
	#POWERMETER


	)

2010 
	#PLEVELSCALE
 50

2011 
	#PLEVELDIVSOFT
 100000

	)

2012 
	#PLEVELDIV
 36000

	)

2015 #i‡
deföed
 
PILOTLAMP


2016 
	#PL_CHANNEL
 
OCR0B


2017 
	#PL_ISR
 
TIMER0_COMPB_ve˘


	)

2018 
	#PL_INIT
 
TCCR0A
=0;
TIMSK0
|=(1<<
OCIE0B
);
PL_CHANNEL
=
PL_IDLE
;
	`PûŸLamp
(
PL_GRN_OFF
);PûŸLamp(
PL_BLU_OFF
);PûŸLamp(
PL_RED_OFF
);PûŸLamp(
PL_BZR_OFF
);

	)

2019 
	#BUZZERPIN_ON
 
	`PûŸLamp
(
PL_BZR_ON
);

	)

2020 
	#BUZZERPIN_OFF
 
	`PûŸLamp
(
PL_BZR_OFF
);

	)

2021 
	#PL_GRN_ON
 25

2022 
	#PL_GRN_OFF
 50

2023 
	#PL_BLU_ON
 75

2024 
	#PL_BLU_OFF
 100

2025 
	#PL_RED_ON
 125

2026 
	#PL_RED_OFF
 150

2027 
	#PL_BZR_ON
 175

2028 
	#PL_BZR_OFF
 200

2029 
	#PL_IDLE
 125

2031 

	)

2032 #i‡
deföed
(
PILOTLAMP
)

2033 
	#BUZZER


	)

2038 #i‡!
deföed
(
SERIAL_SUM_PPM
Ë&& !deföed(
SPEKTRUM
Ë&& !deföed(
SBUS
Ë&& !deföed(
SUMD
)

2039 
	#STANDARD_RX


	)

2042 #i‡
deföed
(
SPEKTRUM
Ë|| deföed(
SBUS
Ë|| deföed(
SUMD
)

2043 
	#SERIAL_RX


	)

2047 
	#BIND_CAPABLE
 0

2048 #i‡
	`deföed
(
SPEKTRUM
)

	)

2049 
	#SPEK_FRAME_SIZE
 16

	)

2050 #i‡(
SPEKTRUM
 == 1024)

2051 
	#SPEK_CHAN_SHIFT
 2

2052 
	#SPEK_CHAN_MASK
 0x03

2053 
	#SPEK_DATA_SHIFT


2054 
	#SPEK_BIND_PULSES
 3

	)

2056 #i‡(
SPEKTRUM
 == 2048)

2057 
	#SPEK_CHAN_SHIFT
 3

2058 
	#SPEK_CHAN_MASK
 0x07

2059 
	#SPEK_DATA_SHIFT
 >> 1

2060 
	#SPEK_BIND_PULSES
 5

	)

2062 #i‡
deföed
(
SPEK_BIND
)

2063 
	#BIND_CAPABLE
 1

	)

2064 #i‡!
deföed
(
SPEK_BIND_GROUND
)

2065 
	#SPEK_BIND_GROUND
 4

	)

2067 #i‡!
deföed
(
SPEK_BIND_POWER
)

2068 
	#SPEK_BIND_POWER
 5

	)

2070 #i‡!
deföed
(
SPEK_BIND_DATA
)

2071 
	#SPEK_BIND_DATA
 6

	)

2076 #i‡
deföed
(
SBUS
)

2077 
	#RC_CHANS
 18

	)

2078 #ñi‡
deföed
(
SPEKTRUM
Ë|| deföed(
SERIAL_SUM_PPM
)

2079 
	#RC_CHANS
 12

	)

2081 
	#RC_CHANS
 8

	)

2084 #i‡!(
deföed
(
DISPLAY_2LINES
)Ë&& !(deföed(
DISPLAY_MULTILINE
))

2085 #i‡(
deföed
(
LCD_VT100
)Ë|| (deföed(
OLED_I2C_128x64
Ë|| deföed(
OLED_DIGOLE
) )

2086 
	#DISPLAY_MULTILINE


	)

2088 
	#DISPLAY_2LINES


	)

2092 #i‡(
deföed
(
LCD_VT100
))

2093 #i‡!(
deföed
(
MULTILINE_PRE
))

2094 
	#MULTILINE_PRE
 6

	)

2096 #i‡!(
deföed
(
MULTILINE_POST
))

2097 
	#MULTILINE_POST
 9

	)

2099 #i‡!(
deföed
(
DISPLAY_COLUMNS
))

2100 
	#DISPLAY_COLUMNS
 40

	)

2102 #ñi‡(
deföed
(
OLED_I2C_128x64
Ë&& deföed(
DISPLAY_FONT_DSIZE
))

2103 #i‡!(
deföed
(
MULTILINE_PRE
))

2104 
	#MULTILINE_PRE
 1

	)

2106 #i‡!(
deföed
(
MULTILINE_POST
))

2107 
	#MULTILINE_POST
 3

	)

2109 #i‡!(
deföed
(
DISPLAY_COLUMNS
))

2110 
	#DISPLAY_COLUMNS
 21

	)

2112 #ñi‡(
deföed
(
OLED_I2C_128x64
))

2113 #i‡!(
deföed
(
MULTILINE_PRE
))

2114 
	#MULTILINE_PRE
 3

	)

2116 #i‡!(
deföed
(
MULTILINE_POST
))

2117 
	#MULTILINE_POST
 5

	)

2119 #i‡!(
deföed
(
DISPLAY_COLUMNS
))

2120 
	#DISPLAY_COLUMNS
 21

	)

2122 #ñi‡(
deföed
(
OLED_DIGOLE
Ë&& deföed(
DISPLAY_FONT_DSIZE
))

2123 #i‡!(
deföed
(
MULTILINE_PRE
))

2124 
	#MULTILINE_PRE
 2

	)

2126 #i‡!(
deföed
(
MULTILINE_POST
))

2127 
	#MULTILINE_POST
 3

	)

2129 #ñi‡(
deföed
(
OLED_DIGOLE
))

2130 #i‡!(
deföed
(
MULTILINE_PRE
))

2131 
	#MULTILINE_PRE
 3

	)

2133 #i‡!(
deföed
(
MULTILINE_POST
))

2134 
	#MULTILINE_POST
 4

	)

2136 #i‡!(
deföed
(
DISPLAY_COLUMNS
))

2137 
	#DISPLAY_COLUMNS
 21

	)

2141 #i‡!(
deföed
(
DISPLAY_COLUMNS
))

2142 
	#DISPLAY_COLUMNS
 16

	)

2145 #i‡
deföed
(
FRSKY_TELEMETRY
Ë|| deföed(
SPORT_TELEMETRY
)

2146 
	#TELEMETRY


	)

2154 #ifde‡
OVERRIDE_V_BATPIN


2155 #unde‡
V_BATPIN


2156 
	#V_BATPIN
 
OVERRIDE_V_BATPIN


	)

2158 #ifde‡
OVERRIDE_PSENSORPIN


2159 #unde‡
PSENSORPIN


2160 
	#PSENSORPIN
 
OVERRIDE_PSENSORPIN


	)

2162 #ifde‡
OVERRIDE_LEDPIN_PINMODE


2163 #unde‡
LEDPIN_PINMODE


2164 #unde‡
LEDPIN_TOGGLE


2165 #unde‡
LEDPIN_OFF


2166 #unde‡
LEDPIN_ON


2167 
	#LEDPIN_PINMODE
 
OVERRIDE_LEDPIN_PINMODE


	)

2168 
	#LEDPIN_TOGGLE
 
OVERRIDE_LEDPIN_TOGGLE


	)

2169 
	#LEDPIN_OFF
 
OVERRIDE_LEDPIN_OFF


	)

2170 
	#LEDPIN_ON
 
OVERRIDE_LEDPIN_ON


	)

2172 #ifde‡
OVERRIDE_BUZZERPIN_PINMODE


2173 #unde‡
BUZZERPIN_PINMODE


2174 #unde‡
BUZZERPIN_ON


2175 #unde‡
BUZZERPIN_OFF


2176 
	#BUZZERPIN_PINMODE
 
OVERRIDE_BUZZERPIN_PINMODE


	)

2177 
	#BUZZERPIN_ON
 
OVERRIDE_BUZZERPIN_ON


	)

2178 
	#BUZZERPIN_OFF
 
OVERRIDE_BUZZERPIN_OFF


	)

2182 #ifde‡
FORCE_GYRO_ORIENTATION


2183 #unde‡
GYRO_ORIENTATION


2184 
	#GYRO_ORIENTATION
 
FORCE_GYRO_ORIENTATION


	)

2186 #ifde‡
FORCE_ACC_ORIENTATION


2187 #unde‡
ACC_ORIENTATION


2188 
	#ACC_ORIENTATION
 
FORCE_ACC_ORIENTATION


	)

2190 #ifde‡
FORCE_MAG_ORIENTATION


2191 #unde‡
MAG_ORIENTATION


2192 
	#MAG_ORIENTATION
 
FORCE_MAG_ORIENTATION


	)

2196 #ifde‡
FORCE_SERVO_RATES


2197 #unde‡
SERVO_RATES


2198 
	#SERVO_RATES
 
FORCE_SERVO_RATES


	)

2204 #i‚de‡
NUMBER_MOTOR


2208 #i‡(
deföed
(
LCD_DUMMY
Ë|| deföed(
LCD_SERIAL3W
Ë|| deföed(
LCD_TEXTSTAR
Ë|| deföed(
LCD_VT100
Ë|| deföed(
LCD_TTY
Ë|| deföed(
LCD_ETPP
Ë|| deföed(
LCD_LCD03
Ë|| deföed(
LCD_LCD03S
Ë|| deföed(
OLED_I2C_128x64
ËË|| deföed(
OLED_DIGOLE
)

2209 
	#HAS_LCD


	)

2212 #i‡(
deföed
(
LCD_CONF
Ë|| deföed(
LCD_TELEMETRY
)Ë&& !(deföed(
HAS_LCD
) )

2216 #i‡
deföed
(
POWERMETER_SOFT
Ë&& !(deföed(
VBAT
))

2220 #i‡
deföed
(
WATTS
Ë&& !(deföed(
POWERMETER_HARD
)Ë&& !(deföed(
VBAT
))

2224 #i‡
deföed
(
LCD_TELEMETRY_AUTO
Ë&& !(deföed(
LCD_TELEMETRY
))

2228 #i‡
deföed
(
LCD_TELEMETRY_STEP
Ë&& !(deföed(
LCD_TELEMETRY
))

2232 #i‡
deföed
(
A32U4_4_HW_PWM_SERVOS
Ë&& !(deföed(
HELI_120_CCPM
))

2236 #i‡
GPS
 && !
deföed
(
NMEA
Ë&& !deföed(
UBLOX
Ë&& !deföed(
MTK_BINARY16
Ë&& !deföed(
MTK_BINARY19
Ë&& !deföed(
INIT_MTK_GPS
Ë&& !deföed(
I2C_GPS
Ë&& !deföed(
VENUS8
)

2240 #i‡
deföed
(
NUNCHUK
) || \

2241 
deföed
–
MPU6050_LPF_256HZ
Ë|| deföed(
MPU6050_LPF_188HZ
Ë|| deföed–
MPU6050_LPF_98HZ
Ë|| deföed–
MPU6050_LPF_42HZ
) || \

2242 
deföed
–
MPU6050_LPF_20HZ
Ë|| deföed–
MPU6050_LPF_10HZ
Ë|| deföed–
MPU6050_LPF_5HZ
) || \

2243 
deföed
–
ITG3200_LPF_256HZ
Ë|| deföed–
ITG3200_LPF_188HZ
Ë|| deföed–
ITG3200_LPF_98HZ
Ë|| deföed–
ITG3200_LPF_42HZ
) || \

2244 
deföed
–
ITG3200_LPF_20HZ
Ë|| 
	$deföed
–
ITG3200_LPF_10HZ
)

2249 #i‡
	`deföed
(
SONAR_GENERIC_ECHOPULSE
)

2250 
	#SONAR_GEP_TriggîPö
 
SONAR_GENERIC_TRIGGER_PIN


	)

2251 
	#SONAR_GEP_TriggîPö_PINMODE_OUT
 
	`pöMode
(
SONAR_GEP_TriggîPö
,
OUTPUT
);

	)

2252 
	#SONAR_GEP_TriggîPö_PIN_HIGH
 
PORTB
 |1<<6;

	)

2253 
	#SONAR_GEP_TriggîPö_PIN_LOW
 
PORTB
 &~(1<<6);

	)

2254 
	#SONAR_GEP_EchoPö
 
SONAR_GENERIC_ECHO_PIN


	)

2255 
	#SONAR_GEP_EchoPö_PINMODE_IN
 
	`pöMode
(
SONAR_GEP_EchoPö
,
INPUT
);

	)

2256 
	#SONAR_GEP_EchoPö_PCINT
 
PCINT5


	)

2257 
	#SONAR_GEP_EchoPö_PCICR
 
PCICR
 |(1<<
PCIE0
);

2258 
	#SONAR_GEP_EchoPö_PCMSK
 
PCMSK0
 = (1<<
SONAR_GEP_EchoPö_PCINT
);

2259 
	#SONAR_GEP_EchoPö_PCINT_ve˘
 
PCINT0_ve˘


2260 
	#SONAR_GEP_EchoPö_PIN
 
PINB


2262 

	)

2265 #i‡(
	`deföed
 (
LOG_PERMANENT_SD_ONLY
))|(deföed (
LOG_GPS_POSITION
)Ë&& !(deföed(
MWI_SDCARD
))

2269 #i‡
	`deföed
 (
LOG_GPS_POSITION
)&&!
GPS


2273 #i‡(
	`deföed
 (
MWI_SDCARD
))&& !(deföed(
SDCARD_CSPIN
))

2277 #i‡(
	`deföed
 (
MWI_SDCARD
))&& !(deföed(
LOG_PERMANENT
))

	@platform.h

2 
	#U_ID_0
 (*(
uöt32_t
*)0x1FFFF7AC)

	)

3 
	#U_ID_1
 (*(
uöt32_t
*)0x1FFFF7B0)

	)

4 
	#U_ID_2
 (*(
uöt32_t
*)0x1FFFF7B4)

	@target.h

1 
	#TARGET_BOARD_IDENTIFIER
 "ARDHAT"

	@types.h

1 #i‚de‡
TYPES_H_


2 
	#TYPES_H_


	)

4 
	erc
 {

5 
	mROLL
,

6 
	mPITCH
,

7 
	mYAW
,

8 
	mTHROTTLE
,

9 
	mAUX1
,

10 
	mAUX2
,

11 
	mAUX3
,

12 
	mAUX4
,

13 
	mAUX5
,

14 
	mAUX6
,

15 
	mAUX7
,

16 
	mAUX8


19 
	epid
 {

20 
	mPIDROLL
,

21 
	mPIDPITCH
,

22 
	mPIDYAW
,

23 
	mPIDALT
,

24 
	mPIDPOS
,

25 
	mPIDPOSR
,

26 
	mPIDNAVR
,

27 
	mPIDLEVEL
,

28 
	mPIDMAG
,

29 
	mPIDVEL
,

30 
	mPIDITEMS


33 
	ebox
 {

34 
	mBOXARM
,

35 #i‡
ACC


36 
	mBOXANGLE
,

37 
	mBOXHORIZON
,

39 #i‡
BARO
 && (!
deföed
(
SUPPRESS_BARO_ALTHOLD
))

40 
	mBOXBARO
,

42 #ifde‡
VARIOMETER


43 
	mBOXVARIO
,

45 
	mBOXMAG
,

46 #i‡
deföed
(
HEADFREE
)

47 
	mBOXHEADFREE
,

48 
	mBOXHEADADJ
,

50 #i‡
deföed
(
SERVO_TILT
Ë|| deföed(
GIMBAL
Ë|| deföed(
SERVO_MIX_TILT
)

51 
	mBOXCAMSTAB
,

53 #i‡
deföed
(
CAMTRIG
)

54 
	mBOXCAMTRIG
,

56 #i‡
GPS


57 
	mBOXGPSHOME
,

58 
	mBOXGPSHOLD
,

60 #i‡
deföed
(
FIXEDWING
Ë|| deföed(
HELICOPTER
)

61 
	mBOXPASSTHRU
,

63 #i‡
deföed
(
BUZZER
)

64 
	mBOXBEEPERON
,

66 #i‡
deföed
(
LED_FLASHER
)

67 
	mBOXLEDMAX
,

68 
	mBOXLEDLOW
,

70 #i‡
deföed
(
LANDING_LIGHTS_DDR
)

71 
	mBOXLLIGHTS
,

73 #ifde‡
INFLIGHT_ACC_CALIBRATION


74 
	mBOXCALIB
,

76 #ifde‡
GOVERNOR_P


77 
	mBOXGOV
,

79 #ifde‡
OSD_SWITCH


80 
	mBOXOSD
,

82 #i‡
GPS


83 
	mBOXGPSNAV
,

84 
	mBOXLAND
,

86 #i‡
deföed
(
INFLIGHT_PID_TUNING
)

87 
	mBOXPIDTUNE
,

89 #i‡
SONAR


90 
	mBOXSONAR
,

91 #i‡
deföed
(
FIXEDWING
)

92 
	mBOXCRUISE
,

95 
	mCHECKBOXITEMS


99 
öt16_t
 
	maccSmoŸh
[3];

100 
öt16_t
 
	mgyroD©a
[3];

101 
öt16_t
 
	mmagADC
[3];

102 
öt16_t
 
	mgyroADC
[3];

103 
öt16_t
 
	maccADC
[3];

104 } 
	timu_t
;

107 
uöt8_t
 
	mvb©
;

108 
uöt16_t
 
	mötPowîMëîSum
;

109 
uöt16_t
 
	mrssi
;

110 
uöt16_t
 
	mam≥øge
;

111 
uöt16_t
 
	mw©ts
;

112 
uöt16_t
 
	mvb©˚Œs
[
VBAT_CELLS_NUM
];

113 } 
	t™Æog_t
;

116 
öt32_t
 
	mE°A…
;

117 
öt16_t
 
	mv¨io
;

118 } 
	tÆt_t
;

121 
öt16_t
 
	m™gÀ
[2];

122 
öt16_t
 
	mhódög
;

123 } 
	t©t_t
;

126 
uöt8_t
 
	mOK_TO_ARM
 :1 ;

127 
uöt8_t
 
	mARMED
 :1 ;

128 
uöt8_t
 
	mACC_CALIBRATED
 :1 ;

129 
uöt8_t
 
	mANGLE_MODE
 :1 ;

130 
uöt8_t
 
	mHORIZON_MODE
 :1 ;

131 
uöt8_t
 
	mMAG_MODE
 :1 ;

132 
uöt8_t
 
	mBARO_MODE
 :1 ;

133 
uöt8_t
 
	mMOTORS_STOPPED
 :1;

134 
uöt8_t
 
	mFS_MODE
: 1;

135 #ifde‡
HEADFREE


136 
uöt8_t
 
	mHEADFREE_MODE
 :1 ;

138 #i‡
deföed
(
FIXEDWING
Ë|| deföed(
HELICOPTER
)

139 
uöt8_t
 
	mPASSTHRU_MODE
 :1 ;

141 
uöt8_t
 
	mSMALL_ANGLES_25
 :1 ;

142 #i‡
MAG


143 
uöt8_t
 
	mCALIBRATE_MAG
 :1 ;

145 #ifde‡
VARIOMETER


146 
uöt8_t
 
	mVARIO_MODE
 :1;

148 
uöt8_t
 
	mGPS_mode
: 2;

149 #i‡
BARO
 || 
GPS
 || 
deföed
(
FIXEDWING
Ë|| 
SONAR


150 
uöt8_t
 
	mTHROTTLE_IGNORED
 : 1;

152 #i‡
GPS


153 
uöt8_t
 
	mGPS_FIX
 :1 ;

154 
uöt8_t
 
	mGPS_FIX_HOME
 :1 ;

155 
uöt8_t
 
	mGPS_BARO_MODE
 : 1;

156 
uöt8_t
 
	mGPS_hód_£t
: 1;

157 
uöt8_t
 
	mLAND_COMPLETED
: 1;

158 
uöt8_t
 
	mLAND_IN_PROGRESS
: 1;

159 
uöt8_t
 
	mCLIMBOUT_FW
 :1 ;

160 
uöt8_t
 
	mFixed_Wög_Nav
 :1;

161 
uöt8_t
 
	mCRUISE_MODE
 :1;

163 #i‡
deföed
(
INFLIGHT_PID_TUNING
)

164 
uöt8_t
 
	mPIDTUNE_MODE
 :1;

166 #i‡
SONAR


167 
uöt8_t
 
	mSONAR_MODE
 : 1;

169 
uöt8_t
 
	mFAILSAFE_RTH_ENABLE
 :1;

170 #ifde‡
MWI_SDCARD


171 
uöt8_t
 
	mSDCARD
: 1;

173 } 
	tÊags_°ru˘_t
;

176 
uöt8_t
 
	mcuºítSë
;

177 
öt16_t
 
	maccZîo
[3];

178 
öt16_t
 
	mmagZîo
[3];

179 
uöt16_t
 
	mÊashsum
;

180 
uöt8_t
 
	mchecksum
;

181 } 
	tglobÆ_c⁄f_t
;

183 
	spid_
 {

184 
uöt8_t
 
	mP8
;

185 
uöt8_t
 
	mI8
;

186 
uöt8_t
 
	mD8
;

189 
	s£rvo_c⁄f_
 {

190 
öt16_t
 
	mmö
;

191 
öt16_t
 
	mmax
;

192 
öt16_t
 
	mmiddÀ
;

193 
öt8_t
 
	møã
;

197 
pid_
 
	mpid
[
PIDITEMS
];

198 
uöt8_t
 
	mrcR©e8
;

199 
uöt8_t
 
	mrcExpo8
;

200 
uöt8_t
 
	mrﬁlPôchR©e
;

201 
uöt8_t
 
	myawR©e
;

202 
uöt8_t
 
	mdynThrPID
;

203 
uöt8_t
 
	mthrMid8
;

204 
uöt8_t
 
	mthrExpo8
;

205 
öt16_t
 
	m™gÀTrim
[2];

206 #i‡
deföed
(
EXTENDED_AUX_STATES
)

207 
uöt32_t
 
	ma˘iv©e
[
CHECKBOXITEMS
];

209 
uöt16_t
 
	ma˘iv©e
[
CHECKBOXITEMS
];

211 
uöt8_t
 
	mpowîTriggî1
;

212 #i‡
MAG


213 
öt16_t
 
	mmag_de˛ö©i⁄
;

215 
£rvo_c⁄f_
 
	m£rvoC⁄f
[8];

216 #i‡
deföed
(
GYRO_SMOOTHING
)

217 
uöt8_t
 
	mSmoŸhög
[3];

219 #i‡
deföed
 (
FAILSAFE
)

220 
öt16_t
 
	mÁûß„_thrŸée
;

222 #ifde‡
VBAT


223 
uöt8_t
 
	mvb©sˇÀ
;

224 
uöt8_t
 
	mvb©Àvñ_w¨n1
;

225 
uöt8_t
 
	mvb©Àvñ_w¨n2
;

226 
uöt8_t
 
	mvb©Àvñ_¸ô
;

228 #ifde‡
POWERMETER


229 
uöt8_t
 
	mpöt2ma
;

231 #ifde‡
POWERMETER_HARD


232 
uöt16_t
 
	mp£ns‹nuŒ
;

234 #ifde‡
MMGYRO


235 
uöt8_t
 
	mmmgyro
;

237 #ifde‡
ARMEDTIMEWARNING


238 
uöt16_t
 
	m¨medtimew¨nög
;

240 
öt16_t
 
	mmöthrŸée
;

241 #ifde‡
GOVERNOR_P


242 
öt16_t
 
	mgovîn‹P
;

243 
öt16_t
 
	mgovîn‹D
;

245 #ifde‡
YAW_COLL_PRECOMP


246 
uöt8_t
 
	myawCﬁlPªcomp
;

247 
uöt16_t
 
	myawCﬁlPªcompDódb™d
;

249 
uöt8_t
 
	mchecksum
;

250 } 
	tc⁄f_t
;

252 #ifde‡
LOG_PERMANENT


254 
uöt16_t
 
	m¨m
;

255 
uöt16_t
 
	mdißrm
;

256 
uöt16_t
 
	m°¨t
;

257 
uöt32_t
 
	m¨med_time
 ;

258 
uöt32_t
 
	mli„time
;

259 
uöt16_t
 
	mÁûß„
;

260 
uöt16_t
 
	mi2c
;

261 
uöt8_t
 
	mru¬ög
;

262 
uöt8_t
 
	mchecksum
;

263 } 
	t∂og_t
;

266 #i‡
GPS


271 
	egpsmode
 {

272 
	mGPS_MODE_NONE
 = 0,

273 
	mGPS_MODE_HOLD
,

274 
	mGPS_MODE_RTH
,

275 
	mGPS_MODE_NAV


278 
	e«v°©e
 {

279 
	mNAV_STATE_NONE
 = 0,

280 
	mNAV_STATE_RTH_START
,

281 
	mNAV_STATE_RTH_ENROUTE
,

282 
	mNAV_STATE_HOLD_INFINIT
,

283 
	mNAV_STATE_HOLD_TIMED
,

284 
	mNAV_STATE_WP_ENROUTE
,

285 
	mNAV_STATE_PROCESS_NEXT
,

286 
	mNAV_STATE_DO_JUMP
,

287 
	mNAV_STATE_LAND_START
,

288 
	mNAV_STATE_LAND_IN_PROGRESS
,

289 
	mNAV_STATE_LANDED
,

290 
	mNAV_STATE_LAND_SETTLE
,

291 
	mNAV_STATE_LAND_START_DESCENT


294 
	e«vîr‹
 {

295 
	mNAV_ERROR_NONE
 = 0,

296 
	mNAV_ERROR_TOOFAR
,

297 
	mNAV_ERROR_SPOILED_GPS
,

298 
	mNAV_ERROR_WP_CRC
,

299 
	mNAV_ERROR_FINISH
,

300 
	mNAV_ERROR_TIMEWAIT
,

301 
	mNAV_ERROR_INVALID_JUMP
,

302 
	mNAV_ERROR_INVALID_DATA
,

303 
	mNAV_ERROR_WAIT_FOR_RTH_ALT
,

304 
	mNAV_ERROR_GPS_FIX_LOST
,

305 
	mNAV_ERROR_DISARMED
,

306 
	mNAV_ERROR_LANDING


310 
uöt8_t
 
	mnumbî
;

311 
öt32_t
 
	mpos
[2];

312 
uöt8_t
 
	ma˘i⁄
;

313 
öt16_t
 
	m∑ømëî1
;

314 
öt16_t
 
	m∑ømëî2
;

315 
öt16_t
 
	m∑ømëî3
;

316 
uöt32_t
 
	mÆtôude
;

317 
uöt8_t
 
	mÊag
;

318 
uöt8_t
 
	mchecksum
;

319 } 
	tmissi⁄_°ï_°ru˘
;

327 
uöt8_t
 
	mfûãrög
 : 1;

328 
uöt8_t
 
	mÀad_fûãr
 : 1;

329 
uöt8_t
 
	md⁄t_ª£t_home_©_¨m
 : 1;

330 
uöt8_t
 
	m«v_c⁄åﬁs_hódög
 : 1;

331 
uöt8_t
 
	m«v_èû_fú°
 : 1;

332 
uöt8_t
 
	m«v_πh_èkeoff_hódög
 : 1;

333 
uöt8_t
 
	m¶ow_«v
 : 1;

334 
uöt8_t
 
	mwaô_f‹_πh_Æt
 : 1;

336 
uöt8_t
 
	mign‹e_thrŸée
: 1;

337 
uöt8_t
 
	mèkeovî_b¨o
: 1;

342 
uöt16_t
 
	mwp_ødius
;

343 
uöt16_t
 
	mß„_wp_di°™˚
;

344 
uöt16_t
 
	m«v_max_Ætôude
;

345 
uöt16_t
 
	m«v_•ìd_max
;

346 
uöt16_t
 
	m«v_•ìd_mö
;

347 
uöt8_t
 
	m¸os°øck_gaö
;

348 
uöt16_t
 
	m«v_b™k_max
;

349 
uöt16_t
 
	mπh_Ætôude
;

350 
uöt8_t
 
	mœnd_•ìd
;

351 
uöt16_t
 
	m„n˚
;

353 
uöt8_t
 
	mmax_wp_numbî
;

355 
uöt8_t
 
	mchecksum
;

356 } 
	tgps_c⁄f_°ru˘
;

	@version.cpp

2 *
	gsh‹tGôRevisi⁄
 = "1234";

3 *
	gbuûdD©e
 = 
__DATE__
;

4 *
	gbuûdTime
 = 
__TIME__
;

	@version.h

1 
	#FC_VERSION_MAJOR
 1

2 
	#FC_VERSION_MINOR
 8

3 
	#FC_VERSION_PATCH_LEVEL
 0

4 

	)

5 
	#GIT_SHORT_REVISION_LENGTH
 7

6 * 
sh‹tGôRevisi⁄
;

	)

8 
	#BUILD_DATE_LENGTH
 11

	)

9 * 
buûdD©e
;

11 
	#BUILD_TIME_LENGTH
 8

	)

12 * 
buûdTime
;

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

81 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

82 
	~<bôs/m©hˇŒs.h
>

83 #unde‡
_MdoubÀ_


84 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


85 #unde‡
_MdoubÀ_END_NAMESPACE


86 #unde‡
__MATH_PRECNAME


88 #ifde‡
__USE_ISOC99


94 #i‚de‡
_MÊﬂt_


95 
	#_MÊﬂt_
 

	)

97 
	#_MdoubÀ_
 
_MÊﬂt_


	)

98 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

99 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

100 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

101 
	~<bôs/m©hˇŒs.h
>

102 #unde‡
_MdoubÀ_


103 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


104 #unde‡
_MdoubÀ_END_NAMESPACE


105 #unde‡
__MATH_PRECNAME


107 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

108 || 
deföed
 
__LDBL_COMPAT
 \

109 || 
deföed
 
_LIBC_TEST


110 #ifde‡
__LDBL_COMPAT


112 #ifde‡
__USE_ISOC99


113 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

114 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

115 #ifde‡
__REDIRECT_NTH


116 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

117 
__∆dbl_√xâow¨df
)

118 
	`__©åibuã__
 ((
__c⁄°__
));

119 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

120 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

121 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

122 (
__x
, 
__y
),

123 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

127 #unde‡
__MATHDECL_1


128 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

129 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

130 
¨gs
, 
Æüs
)

	)

131 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

132 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

138 #i‚de‡
_Ml⁄g_doubÀ_


139 
	#_Ml⁄g_doubÀ_
 

	)

141 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

142 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

143 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

144 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

145 
	#__MATH_DECLARE_LDOUBLE
 1

	)

146 
	~<bôs/m©hˇŒs.h
>

147 #unde‡
_MdoubÀ_


148 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


149 #unde‡
_MdoubÀ_END_NAMESPACE


150 #unde‡
__MATH_PRECNAME


155 #unde‡
__MATHDECL_1


156 #unde‡
__MATHDECL


157 #unde‡
__MATHCALL


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


162 
signgam
;

167 #ifde‡
__USE_ISOC99


205 
FP_NAN
 =

206 
	#FP_NAN
 0

	)

207 
FP_NAN
,

208 
FP_INFINITE
 =

209 
	#FP_INFINITE
 1

	)

210 
FP_INFINITE
,

211 
FP_ZERO
 =

212 
	#FP_ZERO
 2

	)

213 
FP_ZERO
,

214 
FP_SUBNORMAL
 =

215 
	#FP_SUBNORMAL
 3

	)

216 
FP_SUBNORMAL
,

217 
FP_NORMAL
 =

218 
	#FP_NORMAL
 4

	)

219 
FP_NORMAL


223 #ifde‡
__NO_LONG_DOUBLE_MATH


224 
	#Â˛assify
(
x
) \

225 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

227 
	#Â˛assify
(
x
) \

228 ( (
x
) ==  () \

229 ? 
	`__Â˛assifyf
 (
x
) \

230 :  (
x
) ==  () \

231 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

235 #ifde‡
__NO_LONG_DOUBLE_MATH


236 
	#signbô
(
x
) \

237 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

239 
	#signbô
(
x
) \

240 ( (
x
) ==  () \

241 ? 
	`__signbôf
 (
x
) \

242 :  (
x
) ==  () \

243 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

247 #ifde‡
__NO_LONG_DOUBLE_MATH


248 
	#isföôe
(
x
) \

249 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

251 
	#isföôe
(
x
) \

252 ( (
x
) ==  () \

253 ? 
	`__föôef
 (
x
) \

254 :  (
x
) ==  () \

255 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

259 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

263 #ifde‡
__NO_LONG_DOUBLE_MATH


264 
	#i¢™
(
x
) \

265 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

267 
	#i¢™
(
x
) \

268 ( (
x
) ==  () \

269 ? 
	`__i¢™f
 (
x
) \

270 :  (
x
) ==  () \

271 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

275 #ifde‡
__NO_LONG_DOUBLE_MATH


276 
	#isöf
(
x
) \

277 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

279 
	#isöf
(
x
) \

280 ( (
x
) ==  () \

281 ? 
	`__isöff
 (
x
) \

282 :  (
x
) ==  () \

283 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

287 
	#MATH_ERRNO
 1

	)

288 
	#MATH_ERREXCEPT
 2

	)

293 #i‚de‡
__FAST_MATH__


294 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

299 #ifde‡
__USE_GNU


301 #ifde‡
__NO_LONG_DOUBLE_MATH


302 
	#issig«lög
(
x
) \

303 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

305 
	#issig«lög
(
x
) \

306 ( (
x
) ==  () \

307 ? 
	`__issig«lögf
 (
x
) \

308 :  (
x
) ==  () \

309 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

313 #ifdef 
__USE_MISC


317 
_IEEE_
 = -1,

318 
_SVID_
,

319 
_XOPEN_
,

320 
_POSIX_
,

321 
_ISOC_


322 } 
	t_LIB_VERSION_TYPE
;

327 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

331 #ifde‡
__USE_MISC


337 #ifde‡
__˝lu•lus


338 
__ex˚±i⁄


340 
ex˚±i⁄


343 
ty≥
;

344 *
«me
;

345 
¨g1
;

346 
¨g2
;

347 
ªtvÆ
;

348 
	}
};

350 #ifde‡
__˝lu•lus


351 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

353 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

356 
	#X_TLOSS
 1.41484755040568800000e+16

	)

359 
	#DOMAIN
 1

	)

360 
	#SING
 2

	)

361 
	#OVERFLOW
 3

	)

362 
	#UNDERFLOW
 4

	)

363 
	#TLOSS
 5

	)

364 
	#PLOSS
 6

	)

367 
	#HUGE
 3.40282347e+38F

	)

371 #ifde‡
__USE_XOPEN


373 
	#MAXFLOAT
 3.40282347e+38F

	)

380 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


381 
	#M_E
 2.7182818284590452354

	)

382 
	#M_LOG2E
 1.4426950408889634074

	)

383 
	#M_LOG10E
 0.43429448190325182765

	)

384 
	#M_LN2
 0.69314718055994530942

	)

385 
	#M_LN10
 2.30258509299404568402

	)

386 
	#M_PI
 3.14159265358979323846

	)

387 
	#M_PI_2
 1.57079632679489661923

	)

388 
	#M_PI_4
 0.78539816339744830962

	)

389 
	#M_1_PI
 0.31830988618379067154

	)

390 
	#M_2_PI
 0.63661977236758134308

	)

391 
	#M_2_SQRTPI
 1.12837916709551257390

	)

392 
	#M_SQRT2
 1.41421356237309504880

	)

393 
	#M_SQRT1_2
 0.70710678118654752440

	)

399 #ifde‡
__USE_GNU


400 
	#M_El
 2.718281828459045235360287471352662498L

	)

401 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

402 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

403 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

404 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

405 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

406 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

407 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

408 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

409 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

410 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

411 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

412 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

419 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


420 
	#__NO_MATH_INLINES
 1

	)

423 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

430 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

431 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

432 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

433 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

434 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

435 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

439 #ifde‡
__USE_EXTERN_INLINES


440 
	~<bôs/m©hölöe.h
>

445 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

446 
	~<bôs/m©h-föôe.h
>

449 #ifde‡
__USE_ISOC99


453 #i‚de‡
isgª©î


454 
	#isgª©î
(
x
, 
y
) \

455 (
__exãnsi⁄__
 \

456 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

457 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

461 #i‚de‡
isgª©îequÆ


462 
	#isgª©îequÆ
(
x
, 
y
) \

463 (
__exãnsi⁄__
 \

464 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

465 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

469 #i‚de‡
i¶ess


470 
	#i¶ess
(
x
, 
y
) \

471 (
__exãnsi⁄__
 \

472 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

473 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

477 #i‚de‡
i¶es£quÆ


478 
	#i¶es£quÆ
(
x
, 
y
) \

479 (
__exãnsi⁄__
 \

480 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

481 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

485 #i‚de‡
i¶essgª©î


486 
	#i¶essgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

493 #i‚de‡
isun‹dîed


494 
	#isun‹dîed
(
u
, 
v
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

497 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

502 
	g__END_DECLS


	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

26 #ifde‡
__MATH_DECLARE_LDOUBLE


27 #ifde‡
__NO_LONG_DOUBLE_MATH


28 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

30 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

34 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


36 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

37 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

38 #ifde‡
__MATH_DECLARE_LDOUBLE


39 #ifde‡
__NO_LONG_DOUBLE_MATH


40 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

42 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

48 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

49 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

50 #ifde‡
__MATH_DECLARE_LDOUBLE


51 #ifde‡
__NO_LONG_DOUBLE_MATH


52 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

54 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

59 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

60 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

61 #ifde‡
__MATH_DECLARE_LDOUBLE


62 #ifde‡
__NO_LONG_DOUBLE_MATH


63 
__REDIRECT_NTH
 (
©™2l
, (, ),

64 
__©™2_föôe
);

66 
__REDIRECT_NTH
 (
©™2l
, (, ),

67 
__©™2l_föôe
);

71 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


73 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

74 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

75 #ifde‡
__MATH_DECLARE_LDOUBLE


76 #ifde‡
__NO_LONG_DOUBLE_MATH


77 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

79 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

85 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

86 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

87 #ifde‡
__MATH_DECLARE_LDOUBLE


88 #ifde‡
__NO_LONG_DOUBLE_MATH


89 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

91 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

96 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

97 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

102 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

106 #ifde‡
__USE_GNU


108 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

109 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

110 #ifde‡
__MATH_DECLARE_LDOUBLE


111 #ifde‡
__NO_LONG_DOUBLE_MATH


112 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

114 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

119 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

120 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

121 #ifde‡
__MATH_DECLARE_LDOUBLE


122 #ifde‡
__NO_LONG_DOUBLE_MATH


123 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

125 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

130 #ifde‡
__USE_ISOC99


132 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

133 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

134 #ifde‡
__MATH_DECLARE_LDOUBLE


135 #ifde‡
__NO_LONG_DOUBLE_MATH


136 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

138 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

144 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

145 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

146 #ifde‡
__MATH_DECLARE_LDOUBLE


147 #ifde‡
__NO_LONG_DOUBLE_MATH


148 
__REDIRECT_NTH
 (
fmodl
, (, ),

149 
__fmod_föôe
);

151 
__REDIRECT_NTH
 (
fmodl
, (, ),

152 
__fmodl_föôe
);

156 #ifde‡
__USE_ISOC99


158 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

159 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

160 #ifde‡
__MATH_DECLARE_LDOUBLE


161 #ifde‡
__NO_LONG_DOUBLE_MATH


162 
__REDIRECT_NTH
 (
hypŸl
, (, ),

163 
__hypŸ_föôe
);

165 
__REDIRECT_NTH
 (
hypŸl
, (, ),

166 
__hypŸl_föôe
);

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


173 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

174 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

175 #ifde‡
__MATH_DECLARE_LDOUBLE


176 #ifde‡
__NO_LONG_DOUBLE_MATH


177 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

179 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

184 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

185 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

186 #ifde‡
__MATH_DECLARE_LDOUBLE


187 #ifde‡
__NO_LONG_DOUBLE_MATH


188 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

190 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

195 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

196 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

197 #ifde‡
__MATH_DECLARE_LDOUBLE


198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

201 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

206 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

207 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

208 #ifde‡
__MATH_DECLARE_LDOUBLE


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

212 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

217 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

218 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

219 #ifde‡
__MATH_DECLARE_LDOUBLE


220 #ifde‡
__NO_LONG_DOUBLE_MATH


221 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

223 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

228 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

229 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

230 #ifde‡
__MATH_DECLARE_LDOUBLE


231 #ifde‡
__NO_LONG_DOUBLE_MATH


232 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

234 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

239 #ifde‡
__USE_MISC


241 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

242 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

243 #ifde‡
__MATH_DECLARE_LDOUBLE


244 #ifde‡
__NO_LONG_DOUBLE_MATH


245 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

246 
__lgamma_r_föôe
);

248 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

249 
__lgammÆ_r_föôe
);

254 #i‡((
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99
) \

255 && 
deföed
 
	g__exã∫_Æways_ölöe
)

257 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

259 #ifde‡
__USE_ISOC99


260 
__loˇl_signgam
 = 0;

261  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

263  
	`lgamma_r
 (
__d
, &
signgam
);

265 
	}
}

266 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

268 #ifde‡
__USE_ISOC99


269 
__loˇl_signgam
 = 0;

270  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

272  
	`lgammaf_r
 (
__d
, &
signgam
);

274 
	}
}

275 #ifde‡
__MATH_DECLARE_LDOUBLE


276 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

278 #ifde‡
__USE_ISOC99


279 
__loˇl_signgam
 = 0;

280  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

282  
	`lgammÆ_r
 (
__d
, &
signgam
);

284 
	}
}

288 #i‡((
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
) \

289 && 
deföed
 
	g__exã∫_Æways_ölöe
)

291 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

293 #ifde‡
__USE_ISOC99


294 
__loˇl_signgam
 = 0;

295  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

297  
	`lgamma_r
 (
__d
, &
signgam
);

299 
	}
}

300 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

302 #ifde‡
__USE_ISOC99


303 
__loˇl_signgam
 = 0;

304  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

306  
	`lgammaf_r
 (
__d
, &
signgam
);

308 
	}
}

309 #ifde‡
__MATH_DECLARE_LDOUBLE


310 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

312 #ifde‡
__USE_ISOC99


313 
__loˇl_signgam
 = 0;

314  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

316  
	`lgammÆ_r
 (
__d
, &
signgam
);

318 
	}
}

323 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

324 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

325 #ifde‡
__MATH_DECLARE_LDOUBLE


326 #ifde‡
__NO_LONG_DOUBLE_MATH


327 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

329 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

334 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

335 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

336 #ifde‡
__MATH_DECLARE_LDOUBLE


337 #ifde‡
__NO_LONG_DOUBLE_MATH


338 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

340 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

344 #ifde‡
__USE_ISOC99


346 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

347 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

348 #ifde‡
__MATH_DECLARE_LDOUBLE


349 #ifde‡
__NO_LONG_DOUBLE_MATH


350 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

352 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

358 
__REDIRECT_NTH
 (
ldexp
, (, ), 
sˇlbn
);

359 
__REDIRECT_NTH
 (
ldexpf
, (, ), 
sˇlbnf
);

360 #ifde‡
__MATH_DECLARE_LDOUBLE


361 
__REDIRECT_NTH
 (
ldex∂
, (, ), 
sˇlb∆
);

365 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

366 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

367 #ifde‡
__MATH_DECLARE_LDOUBLE


368 #ifde‡
__NO_LONG_DOUBLE_MATH


369 
__REDIRECT_NTH
 (
powl
, (, ),

370 
__pow_föôe
);

372 
__REDIRECT_NTH
 (
powl
, (, ),

373 
__powl_föôe
);

378 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

379 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

380 #ifde‡
__MATH_DECLARE_LDOUBLE


381 #ifde‡
__NO_LONG_DOUBLE_MATH


382 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

383 
__ªmaödî_föôe
);

385 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

386 
__ªmaödîl_föôe
);

390 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


392 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

393 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

394 #ifde‡
__MATH_DECLARE_LDOUBLE


395 #ifde‡
__NO_LONG_DOUBLE_MATH


396 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

397 
__sˇlb_föôe
);

399 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

400 
__sˇlbl_föôe
);

406 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

407 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

408 #ifde‡
__MATH_DECLARE_LDOUBLE


409 #ifde‡
__NO_LONG_DOUBLE_MATH


410 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

412 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

417 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

418 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

419 #ifde‡
__MATH_DECLARE_LDOUBLE


420 #ifde‡
__NO_LONG_DOUBLE_MATH


421 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

423 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

427 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


429 
__gamma_r_föôe
 (, *);

430 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

432 
__loˇl_signgam
 = 0;

433 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

434  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

435 
	}
}

436 
__gammaf_r_föôe
 (, *);

437 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

439 
__loˇl_signgam
 = 0;

440 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

441  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

442 
	}
}

443 #ifde‡
__MATH_DECLARE_LDOUBLE


444 
__gammÆ_r_föôe
 (, *);

445 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

447 
__loˇl_signgam
 = 0;

448 #ifde‡
__NO_LONG_DOUBLE_MATH


449 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

451 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

453  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

454 
	}
}

	@/usr/include/bits/math-vector.h

19 #i‚de‡
_MATH_H


25 
	~<bôs/libm-simd-de˛-°ubs.h
>

27 #i‡
deföed
 
__x86_64__
 && deföed 
__FAST_MATH__


28 #i‡
deföed
 
_OPENMP
 && _OPENMP >= 201307

30 
	#__DECL_SIMD_x86_64
 
	`_Pøgma
 ("om∞de˛¨êsimdÇŸöbønch")

	)

31 #unde‡
__DECL_SIMD_cos


32 
	#__DECL_SIMD_cos
 
__DECL_SIMD_x86_64


	)

33 #unde‡
__DECL_SIMD_cosf


34 
	#__DECL_SIMD_cosf
 
__DECL_SIMD_x86_64


	)

35 #unde‡
__DECL_SIMD_sö


36 
	#__DECL_SIMD_sö
 
__DECL_SIMD_x86_64


	)

37 #unde‡
__DECL_SIMD_söf


38 
	#__DECL_SIMD_söf
 
__DECL_SIMD_x86_64


	)

39 #unde‡
__DECL_SIMD_söcos


40 
	#__DECL_SIMD_söcos
 
__DECL_SIMD_x86_64


	)

41 #unde‡
__DECL_SIMD_söcosf


42 
	#__DECL_SIMD_söcosf
 
__DECL_SIMD_x86_64


	)

43 #unde‡
__DECL_SIMD_log


44 
	#__DECL_SIMD_log
 
__DECL_SIMD_x86_64


	)

45 #unde‡
__DECL_SIMD_logf


46 
	#__DECL_SIMD_logf
 
__DECL_SIMD_x86_64


	)

47 #unde‡
__DECL_SIMD_exp


48 
	#__DECL_SIMD_exp
 
__DECL_SIMD_x86_64


	)

49 #unde‡
__DECL_SIMD_expf


50 
	#__DECL_SIMD_expf
 
__DECL_SIMD_x86_64


	)

51 #unde‡
__DECL_SIMD_pow


52 
	#__DECL_SIMD_pow
 
__DECL_SIMD_x86_64


	)

53 #unde‡
__DECL_SIMD_powf


54 
	#__DECL_SIMD_powf
 
__DECL_SIMD_x86_64


	)

60 
__asm__
 ("_ZGVbN2v___log_finite = _ZGVbN2v_log");

61 
__asm__
 ("_ZGVcN4v___log_finite = _ZGVcN4v_log");

62 
__asm__
 ("_ZGVdN4v___log_finite = _ZGVdN4v_log");

63 
__asm__
 ("_ZGVeN8v___log_finite = _ZGVeN8v_log");

64 
__asm__
 ("_ZGVbN4v___logf_finite = _ZGVbN4v_logf");

65 
__asm__
 ("_ZGVcN8v___logf_finite = _ZGVcN8v_logf");

66 
__asm__
 ("_ZGVdN8v___logf_finite = _ZGVdN8v_logf");

67 
__asm__
 ("_ZGVeN16v___logf_finite = _ZGVeN16v_logf");

68 
__asm__
 ("_ZGVbN2v___exp_finite = _ZGVbN2v_exp");

69 
__asm__
 ("_ZGVcN4v___exp_finite = _ZGVcN4v_exp");

70 
__asm__
 ("_ZGVdN4v___exp_finite = _ZGVdN4v_exp");

71 
__asm__
 ("_ZGVeN8v___exp_finite = _ZGVeN8v_exp");

72 
__asm__
 ("_ZGVbN4v___expf_finite = _ZGVbN4v_expf");

73 
__asm__
 ("_ZGVcN8v___expf_finite = _ZGVcN8v_expf");

74 
__asm__
 ("_ZGVdN8v___expf_finite = _ZGVdN8v_expf");

75 
__asm__
 ("_ZGVeN16v___expf_finite = _ZGVeN16v_expf");

76 
__asm__
 ("_ZGVbN2vv___pow_finite = _ZGVbN2vv_pow");

77 
__asm__
 ("_ZGVcN4vv___pow_finite = _ZGVcN4vv_pow");

78 
__asm__
 ("_ZGVdN4vv___pow_finite = _ZGVdN4vv_pow");

79 
__asm__
 ("_ZGVeN8vv___pow_finite = _ZGVeN8vv_pow");

80 
__asm__
 ("_ZGVbN4vv___powf_finite = _ZGVbN4vv_powf");

81 
__asm__
 ("_ZGVcN8vv___powf_finite = _ZGVcN8vv_powf");

82 
__asm__
 ("_ZGVdN8vv___powf_finite = _ZGVdN8vv_powf");

83 
__asm__
 ("_ZGVeN16vv___powf_finite = _ZGVeN16vv_powf");

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL_VEC
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL_VEC
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL_VEC
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL_VEC
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL_VEC
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #ifde‡
__USE_GNU


120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

125 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

131 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

134 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

135 
	g__END_NAMESPACE_C99


138 #ifde‡
__USE_ISOC99


139 
__BEGIN_NAMESPACE_C99


141 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

144 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

145 
	g__END_NAMESPACE_C99


151 
_MdoubÀ_BEGIN_NAMESPACE


153 
__MATHCALL_VEC
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

156 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

157 
	g_MdoubÀ_END_NAMESPACE


159 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


160 
__BEGIN_NAMESPACE_C99


162 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

163 
	g__END_NAMESPACE_C99


166 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

170 
	g__END_NAMESPACE_C99


176 
_MdoubÀ_BEGIN_NAMESPACE


178 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

181 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

184 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

187 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

192 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

195 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
	g_MdoubÀ_END_NAMESPACE


198 #ifde‡
__USE_MISC


201 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

204 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

207 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

211 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

214 #ifde‡
__USE_ISOC99


215 
__BEGIN_NAMESPACE_C99


217 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

218 
	g__END_NAMESPACE_C99


221 #ifde‡
__USE_ISOC99


222 
__BEGIN_NAMESPACE_C99


224 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

225 
	g__END_NAMESPACE_C99


230 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

237 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

238 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

240 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

241 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

246 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


247 
__BEGIN_NAMESPACE_C99


249 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

250 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

252 
	g__END_NAMESPACE_C99


255 #ifde‡
__USE_ISOC99


256 
__BEGIN_NAMESPACE_C99


258 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

259 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


264 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

267 #ifde‡
__USE_MISC


271 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

275 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


276 
__BEGIN_NAMESPACE_C99


279 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

282 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

283 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


284 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

288 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

290 #ifde‡
__USE_ISOC99


292 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

296 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

299 #ifde‡
__USE_ISOC99


301 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

305 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

309 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

313 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

318 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

325 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

326 
__exãnsi⁄__


327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__exãnsi⁄__


333 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

337 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

340 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

343 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

347 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

348 
__©åibuã__
 ((
__c⁄°__
));

351 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

352 
__©åibuã__
 ((
__c⁄°__
));

356 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

359 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


360 
	g__END_NAMESPACE_C99


363 #ifde‡
__USE_GNU


365 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

366 
__©åibuã__
 ((
__c⁄°__
));

369 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


371 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #ifde‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #ifde‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #ifde‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


390 #i‡!
deföed
 
__SSE2_MATH__
 && !deföed 
__x86_64__


391 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

392 && 
deföed
 
	g__OPTIMIZE__
)

396 #unde‡
m©h_îrh™dlög


405 #ifde‡
__USE_ISOC99


406 
	#__ölöe_m©h›
(
func
, 
›
) \

407 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

408 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

409 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

410 
	#__ölöe_m©h›NP
(
func
, 
›
) \

411 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

412 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

413 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

415 
	#__ölöe_m©h›
(
func
, 
›
) \

416 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

417 
	#__ölöe_m©h›NP
(
func
, 
›
) \

418 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

421 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

422 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

423 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

424 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

427 #ifde‡
__USE_ISOC99


428 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

429 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

430 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

432 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

433 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

434 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

435 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

437 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

438 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

439 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

440 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

443 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

444 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

445 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

447 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

448 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

450 
Êﬂt_ty≥
 
__ªsu…
; \

451 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

452  
__ªsu…
; \

453 }

	)

456 #ifde‡
__USE_ISOC99


457 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

458 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

460 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

461 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

462 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

463 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

464 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

465 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

466 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

469 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

470 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

471 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

472 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

473 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

474 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

477 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

478 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

479 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

480 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

482 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

483 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

484 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

485 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

486 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

487 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

488 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

489 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

490 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

491 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

492 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

493 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

496 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

497 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

498 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

500 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

501 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

503 
code
; \

504 }

	)

507 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

508 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

509 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

511 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

512 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

514 
code
; \

515 }

	)

517 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

518 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

519 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

521 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

522 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

523 
Êﬂt_ty≥
 
¨g3
)) \

525 
code
; \

526 }

	)

530 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


534 #ifde‡
__FAST_MATH__


535 #ifde‡
__USE_GNU


536 
	#__söcos_code
 \

537 
__co§
; \

538 
__sör
; \

539 
__swtmp
; \

540 
__asm
 
__vﬁ©ûe__
 \

555 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

556 *
__söx
 = 
__sör
; \

557 *
__cosx
 = 
__co§


	)

559 
__MATH_INLINE
 

560 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

562 
__söcos_code
;

563 
	}
}

565 
__MATH_INLINE
 

566 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

568 
__söcos_code
;

569 
	}
}

571 
__MATH_INLINE
 

572 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

574 
__söcos_code
;

575 
	}
}

582 #i‡
__GNUC_PREREQ
 (3, 5)

583 
	#__expm1_code
 \

584 
__ãmp
; \

585 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

586  
__ãmp
 ? __ãm∞: 
__x


	)

588 
	#__expm1_code
 \

589 
__vÆue
; \

590 
__exp⁄ít
; \

591 
__ãmp
; \

592 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

602 
__asm
 
__vﬁ©ûe__
 \

604 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

605 
__ãmp
 -= 1.0; \

606 
__ãmp
 +
__vÆue
; \

607  
__ãmp
 ? __ãm∞: 
__x


	)

609 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

611 #i‡
	`__GNUC_PREREQ
 (3, 4)

612 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

614 
	#__exp_code
 \

615 
__vÆue
; \

616 
__exp⁄ít
; \

617 
__asm
 
__vﬁ©ûe__
 \

625 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

626 
__vÆue
 += 1.0; \

627 
__asm
 
__vﬁ©ûe__
 \

629 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

630  
__vÆue


	)

631 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

632 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

636 #i‡!
	`__GNUC_PREREQ
 (3, 5)

637 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

638 
__vÆue
; \

639 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

640 
__asm
 
__vﬁ©ûe__
 \

642 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

643  
__vÆue
)

648 #i‡
	`__GNUC_PREREQ
 (3, 4)

649 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

650  
	$__buûtö_©™2l
 (
__y
, 
__x
))

652 
	#__©™2_code
 \

653 
__vÆue
; \

654 
__asm
 
__vﬁ©ûe__
 \

656 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

657  
__vÆue


	)

658 #ifde‡
__FAST_MATH__


659 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

661 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

665 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

666 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

667 
__vÆue
; \

668 
__asm
 
__vﬁ©ûe__
 \

673 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

674  
__vÆue
)

678 #ifde‡
__FAST_MATH__


679 #i‡!
	`__GNUC_PREREQ
 (3,3)

680 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

681 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

682 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

684 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

688 #i‡
	`__GNUC_PREREQ
 (2, 8)

689 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

690 #ifde‡
__USE_ISOC99


691 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

692 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

694 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

696 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

697 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

700 #ifde‡
__FAST_MATH__


701 #i‡!
	`__GNUC_PREREQ
 (3, 4)

703 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

705 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

707 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 #i‡!
	`__GNUC_PREREQ
 (3, 5)

711 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

713 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

714 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

717 #i‡!
	`__GNUC_PREREQ
 (3, 4)

718 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

722 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

723 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

724 { 
__xld
: 
__x
 
	}
}; \

725 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

726 
	g__n
.
	g__xi
[1] = 0x80000000; \

727 
	g__n
.
	g__xi
[0] = 0; \

728  
	g__n
.
	g__xld
)

731 #ifde‡
__FAST_MATH__


733 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

734 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

735  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

737 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

738 
__ex
 = 
	`__ex∂
 (
__x
); \

739  0.5 * (
__ex
 + 1.0 / __ex))

741 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

742 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

743  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

746 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

747 
__vÆue
; \

748 
__ign‹e
; \

749 
__cw
; \

750 
__cwtmp
; \

751 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

759 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

760 "=m" (
__cw
) \

761 : "0" (
__x
)); \

762  
__vÆue
)

764 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

765 
__vÆue
; \

766 
__ign‹e
; \

767 
__cw
; \

768 
__cwtmp
; \

769 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

777 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

778 "=m" (
__cw
) \

779 : "0" (
__x
)); \

780  
__vÆue
)

782 #ifde‡
__FAST_MATH__


783 
	#__ldexp_code
 \

784 
__vÆue
; \

785 
__asm
 
__vﬁ©ûe__
 \

787 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

788  
__vÆue


	)

790 
__MATH_INLINE
 

791 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

793 
__ldexp_code
;

794 
	}
}

799 #ifde‡
__USE_ISOC99


801 #ifde‡
__FAST_MATH__


802 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

806 
	#__M_SQRT2
 1.41421356237309504880L

	)

808 #i‡!
	`__GNUC_PREREQ
 (3, 5)

809 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

810 
__vÆue
; \

811 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

812 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

814 
__asm
 
__vﬁ©ûe__
 \

818 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

819  
__vÆue
)

824 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

825 
__y
 = 
	`__Áb¶
 (
__x
); \

826  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

827 * 
	$__sgn1l
 (
__x
)))

829 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

830  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

832 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

833 
__y
 = 
	`__Áb¶
 (
__x
); \

834  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

837 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

838  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

840 #i‡!
	`__GNUC_PREREQ
 (3, 5)

841 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

842 
__vÆue
; \

843 
__junk
; \

844 
__asm
 
__vﬁ©ûe__
 \

846 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

847  
__vÆue
)

853 #ifde‡
__USE_ISOC99


854 #ifde‡
__FAST_MATH__


856 #i‡!
	`__GNUC_PREREQ
 (3, 5)

857 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

860 
__MATH_INLINE
 

861 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

863 
__ldexp_code
;

864 
	}
}

866 
__MATH_INLINE
 

867 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

869 
__ldexp_code
;

870 
	}
}

872 
__ölöe_m©h›NP
 (
röt
, "frndint")

875 
	#__Ãöt_code
 \

876 
__Ãöåes
; \

877 
__asm__
 
__vﬁ©ûe__
 \

879 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

880  
__Ãöåes


	)

881 
__MATH_INLINE
 

882 
__NTH
 (
	$Ãötf
 (
__x
))

884 
__Ãöt_code
;

885 
	}
}

886 
__MATH_INLINE
 

887 
__NTH
 (
	$Ãöt
 (
__x
))

889 
__Ãöt_code
;

890 
	}
}

891 
__MATH_INLINE
 

892 
__NTH
 (
	$Ãöé
 (
__x
))

894 
__Ãöt_code
;

895 
	}
}

896 #unde‡
__Ãöt_code


898 
	#__Œröt_code
 \

899 
__Œröåes
; \

900 
__asm__
 
__vﬁ©ûe__
 \

902 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

903  
__Œröåes


	)

904 
__exãnsi⁄__


905 
__MATH_INLINE
 

906 
__NTH
 (
	$Œrötf
 (
__x
))

908 
__Œröt_code
;

909 
	}
}

910 
__exãnsi⁄__


911 
__MATH_INLINE
 

912 
__NTH
 (
	$Œröt
 (
__x
))

914 
__Œröt_code
;

915 
	}
}

916 
__exãnsi⁄__


917 
__MATH_INLINE
 

918 
__NTH
 (
	$Œröé
 (
__x
))

920 
__Œröt_code
;

921 
	}
}

922 #unde‡
__Œröt_code


927 #ifde‡
__USE_MISC


929 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

930 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

931 
__vÆue
; \

932 
__˛obbîed
; \

933 
__asm
 
__vﬁ©ûe__
 \

938 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

939  
__vÆue
)

944 
__MATH_INLINE
 

945 
__NTH
 (
	$__föôe
 (
__x
))

947  (
__exãnsi⁄__


948 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

950 
	}
}

955 #unde‡
__©™2_code


956 #ifde‡
__FAST_MATH__


957 #unde‡
__expm1_code


958 #unde‡
__exp_code


959 #unde‡
__söcos_code


966 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


967 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

968 
__ölöe_m©hcode2_
 (, 
__õì754_©™2l
, 
__y
, 
__x
,

969 
__vÆue
;

970 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

971 : "Ò" (
__vÆue
)

972 : "0" (
__x
), "u" (
__y
) : "st(1)");

973  
__vÆue
;)

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


149 #unde‡
_DEFAULT_SOURCE


150 
	#_DEFAULT_SOURCE
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_ISOC11_SOURCE


160 
	#_ISOC11_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_DEFAULT_SOURCE


172 
	#_DEFAULT_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
))

184 #unde‡
_DEFAULT_SOURCE


185 
	#_DEFAULT_SOURCE
 1

	)

189 #i‡(
deföed
 
_ISOC11_SOURCE
 \

190 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

191 
	#__USE_ISOC11
 1

	)

195 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

196 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

197 
	#__USE_ISOC99
 1

	)

201 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

202 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

203 
	#__USE_ISOC95
 1

	)

210 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

211 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

212 
	#__USE_ISOCXX11
 1

	)

218 #ifde‡
_DEFAULT_SOURCE


219 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


220 
	#__USE_POSIX_IMPLICITLY
 1

	)

222 #unde‡
_POSIX_SOURCE


223 
	#_POSIX_SOURCE
 1

	)

224 #unde‡
_POSIX_C_SOURCE


225 
	#_POSIX_C_SOURCE
 200809L

	)

227 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

228 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

229 
	#_POSIX_SOURCE
 1

	)

230 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

231 
	#_POSIX_C_SOURCE
 2

	)

232 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

233 
	#_POSIX_C_SOURCE
 199506L

	)

234 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

235 
	#_POSIX_C_SOURCE
 200112L

	)

237 
	#_POSIX_C_SOURCE
 200809L

	)

239 
	#__USE_POSIX_IMPLICITLY
 1

	)

242 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


243 
	#__USE_POSIX
 1

	)

246 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


247 
	#__USE_POSIX2
 1

	)

250 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

251 
	#__USE_POSIX199309
 1

	)

254 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

255 
	#__USE_POSIX199506
 1

	)

258 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

259 
	#__USE_XOPEN2K
 1

	)

260 #unde‡
__USE_ISOC95


261 
	#__USE_ISOC95
 1

	)

262 #unde‡
__USE_ISOC99


263 
	#__USE_ISOC99
 1

	)

266 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

267 
	#__USE_XOPEN2K8
 1

	)

268 #unde‡
_ATFILE_SOURCE


269 
	#_ATFILE_SOURCE
 1

	)

272 #ifdef 
_XOPEN_SOURCE


273 
	#__USE_XOPEN
 1

	)

274 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

275 
	#__USE_XOPEN_EXTENDED
 1

	)

276 
	#__USE_UNIX98
 1

	)

277 #unde‡
_LARGEFILE_SOURCE


278 
	#_LARGEFILE_SOURCE
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

281 
	#__USE_XOPEN2K8
 1

	)

282 
	#__USE_XOPEN2K8XSI
 1

	)

284 
	#__USE_XOPEN2K
 1

	)

285 
	#__USE_XOPEN2KXSI
 1

	)

286 #unde‡
__USE_ISOC95


287 
	#__USE_ISOC95
 1

	)

288 #unde‡
__USE_ISOC99


289 
	#__USE_ISOC99
 1

	)

292 #ifde‡
_XOPEN_SOURCE_EXTENDED


293 
	#__USE_XOPEN_EXTENDED
 1

	)

298 #ifde‡
_LARGEFILE_SOURCE


299 
	#__USE_LARGEFILE
 1

	)

302 #ifde‡
_LARGEFILE64_SOURCE


303 
	#__USE_LARGEFILE64
 1

	)

306 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

307 
	#__USE_FILE_OFFSET64
 1

	)

310 #i‡
deföed
 
_DEFAULT_SOURCE


311 
	#__USE_MISC
 1

	)

314 #ifdef 
_ATFILE_SOURCE


315 
	#__USE_ATFILE
 1

	)

318 #ifdef 
_GNU_SOURCE


319 
	#__USE_GNU
 1

	)

322 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


323 
	#__USE_REENTRANT
 1

	)

326 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

327 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

328 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

329 #ñi‡!
__GNUC_PREREQ
 (4, 1)

330 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


331 #ñi‡
_FORTIFY_SOURCE
 > 1

332 
	#__USE_FORTIFY_LEVEL
 2

	)

334 
	#__USE_FORTIFY_LEVEL
 1

	)

337 #i‚de‡
__USE_FORTIFY_LEVEL


338 
	#__USE_FORTIFY_LEVEL
 0

	)

343 
	~<°dc-¥edef.h
>

351 #unde‡
__GNU_LIBRARY__


352 
	#__GNU_LIBRARY__
 6

	)

356 
	#__GLIBC__
 2

	)

357 
	#__GLIBC_MINOR__
 22

	)

359 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

360 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

363 #i‚de‡
__ASSEMBLER__


364 #i‚de‡
_SYS_CDEFS_H


365 
	~<sys/cdefs.h
>

370 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


371 
	#__USE_LARGEFILE
 1

	)

372 
	#__USE_LARGEFILE64
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/bits/libm-simd-decl-stubs.h

19 #i‚de‡
_MATH_H


33 #i‚de‡
_BITS_LIBM_SIMD_DECL_STUBS_H


34 
	#_BITS_LIBM_SIMD_DECL_STUBS_H
 1

	)

36 
	#__DECL_SIMD_cos


	)

37 
	#__DECL_SIMD_cosf


	)

38 
	#__DECL_SIMD_co¶


	)

40 
	#__DECL_SIMD_sö


	)

41 
	#__DECL_SIMD_söf


	)

42 
	#__DECL_SIMD_söl


	)

44 
	#__DECL_SIMD_söcos


	)

45 
	#__DECL_SIMD_söcosf


	)

46 
	#__DECL_SIMD_söco¶


	)

48 
	#__DECL_SIMD_log


	)

49 
	#__DECL_SIMD_logf


	)

50 
	#__DECL_SIMD_logl


	)

52 
	#__DECL_SIMD_exp


	)

53 
	#__DECL_SIMD_expf


	)

54 
	#__DECL_SIMD_ex∂


	)

56 
	#__DECL_SIMD_pow


	)

57 
	#__DECL_SIMD_powf


	)

58 
	#__DECL_SIMD_powl


	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

59 
	#__STDC_ISO_10646__
 201304L

	)

62 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

307 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

309 
	#__Æways_ölöe
 
__ölöe


	)

314 #i‡
__GNUC_PREREQ
 (4,3)

315 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

317 
	#__©åibuã_¨tificül__


	)

329 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

331 || 
deföed
 
__GNUC_GNU_INLINE__
)))

332 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


333 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

337 
	#__exã∫_ölöe
 
__ölöe


	)

338 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #ifde‡
__exã∫_Æways_ölöe


343 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

348 #i‡
__GNUC_PREREQ
 (4,3)

349 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

350 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

357 #i‡!
__GNUC_PREREQ
 (2,8)

358 
	#__exãnsi⁄__


	)

362 #i‡!
__GNUC_PREREQ
 (2,92)

363 
	#__ª°ri˘


	)

369 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


370 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

372 #ifde‡
__GNUC__


373 
	#__ª°ri˘_¨r


	)

375 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

379 
	#__ª°ri˘_¨r


	)

384 #i‡
__GNUC__
 >= 3

385 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

386 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

388 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

389 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

392 #i‡(!
deföed
 
_N‹ëu∫
 \

393 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

394 && !
	$__GNUC_PREREQ
 (4,7))

395 #i‡
	`__GNUC_PREREQ
 (2,8)

396 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

398 
	#_N‹ëu∫


	)

402 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

403 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

404 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

405 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

406 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

407 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

410 
	~<bôs/w‹dsize.h
>

412 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


413 
	#__LDBL_COMPAT
 1

	)

414 #ifde‡
__REDIRECT


415 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

416 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

417 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

418 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

419 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

420 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

421 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

422 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

423 
	#__LDBL_REDIR_DECL
(
«me
) \

424 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

425 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

426 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

427 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

428 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

431 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


432 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

433 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

434 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

435 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

436 
	#__LDBL_REDIR_DECL
(
«me
)

	)

437 #ifde‡
__REDIRECT


438 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

439 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

440 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@
1
.
1
/usr/include
60
1054
Alarms.cpp
Alarms.h
EEPROM.cpp
EEPROM.h
GPS.cpp
GPS.h
IMU.cpp
IMU.h
LCD.cpp
LCD.h
MultiWii.cpp
MultiWii.h
Output.cpp
Output.h
PIDControllers.cpp
PIDControllers.h
Protocol.cpp
Protocol.h
RX.cpp
RX.h
SDcard.cpp
SDcard.h
Sensors.cpp
Sensors.h
Serial.cpp
Serial.h
Telemetry.cpp
Telemetry.h
config.h
def.h
platform.h
target.h
types.h
version.cpp
version.h
/usr/include/math.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/math-finite.h
/usr/include/bits/math-vector.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/features.h
/usr/include/bits/libm-simd-decl-stubs.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/types.h
/usr/include/bits/typesizes.h
